{
  "address": "0xBEB99267F7a341F5003b921Ab5A36302A6d6d06D",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "player",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "bet",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "choice",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "seed",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "over",
          "type": "bool"
        }
      ],
      "name": "GameCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "player",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "round",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "multiplier",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "bet",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "prize",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "choice",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "result",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "seed",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "over",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "enum GamesCore.GameState",
          "name": "state",
          "type": "uint8"
        }
      ],
      "name": "GamePlayed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_seed",
          "type": "bytes32"
        },
        {
          "internalType": "uint8",
          "name": "_v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "_r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "_s",
          "type": "bytes32"
        }
      ],
      "name": "confirm",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "croupier",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "edge",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "games",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "player",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "bet",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "prize",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "choice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "result",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "over",
          "type": "bool"
        },
        {
          "internalType": "enum GamesCore.GameState",
          "name": "state",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "houseProfit",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "listGames",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxBet",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minBet",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_choice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_betAmount",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "_seed",
          "type": "bytes32"
        }
      ],
      "name": "play",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "profitTaker",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_min",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_max",
          "type": "uint256"
        }
      ],
      "name": "setBetRange",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_addr",
          "type": "address"
        }
      ],
      "name": "setCroupier",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "_e",
          "type": "uint8"
        }
      ],
      "name": "setEdge",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_profitTaker",
          "type": "address"
        }
      ],
      "name": "setProfitTaker",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "setToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "token",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalGamesCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawProfit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x94f2fc780d65b43843c20574e2b8c35ff6f33dac46dd8105493aa7c9e49356fe",
  "receipt": {
    "to": null,
    "from": "0x5f2cFa351B7d4b973d341fdB2cB154794c0a899c",
    "contractAddress": "0xBEB99267F7a341F5003b921Ab5A36302A6d6d06D",
    "transactionIndex": 3,
    "gasUsed": "1501263",
    "logsBloom": "0x
    "blockHash": "0x9a62c41b86586c1903f6fec932f0ff05be4ec32bf99ee4bf9a9ad988b67cac37",
    "transactionHash": "0x94f2fc780d65b43843c20574e2b8c35ff6f33dac46dd8105493aa7c9e49356fe",
    "logs": [
      {
        "transactionIndex": 3,
        "blockNumber": 12231441,
        "transactionHash": "0x94f2fc780d65b43843c20574e2b8c35ff6f33dac46dd8105493aa7c9e49356fe",
        "address": "0xBEB99267F7a341F5003b921Ab5A36302A6d6d06D",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000005f2cfa351b7d4b973d341fdb2cb154794c0a899c"
        ],
        "data": "0x",
        "logIndex": 77,
        "blockHash": "0x9a62c41b86586c1903f6fec932f0ff05be4ec32bf99ee4bf9a9ad988b67cac37"
      }
    ],
    "blockNumber": 12231441,
    "cumulativeGasUsed": "11547992",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "37330be37f6f9a7bc8b63099012ef667",
  "metadata": "{\"compiler\":{\"version\":\"0.8.3+commit.8d00100c\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bet\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"choice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"seed\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"over\",\"type\":\"bool\"}],\"name\":\"GameCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"round\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"multiplier\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bet\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"prize\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"choice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"result\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"seed\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"over\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"enum GamesCore.GameState\",\"name\":\"state\",\"type\":\"uint8\"}],\"name\":\"GamePlayed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_seed\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"_v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"_r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_s\",\"type\":\"bytes32\"}],\"name\":\"confirm\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"croupier\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"edge\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"games\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"bet\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"prize\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"choice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"result\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"over\",\"type\":\"bool\"},{\"internalType\":\"enum GamesCore.GameState\",\"name\":\"state\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"houseProfit\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"listGames\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxBet\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minBet\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_choice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_betAmount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_seed\",\"type\":\"bytes32\"}],\"name\":\"play\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"profitTaker\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_min\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_max\",\"type\":\"uint256\"}],\"name\":\"setBetRange\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"setCroupier\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_e\",\"type\":\"uint8\"}],\"name\":\"setEdge\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_profitTaker\",\"type\":\"address\"}],\"name\":\"setProfitTaker\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"setToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalGamesCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawProfit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"confirm(bytes32,uint8,bytes32,bytes32)\":{\"params\":{\"_seed\":\": Uniqual value for each game\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"play(uint256,uint256,bytes32)\":{\"params\":{\"_seed\":\": Uniqual value for each game\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"setBetRange(uint256,uint256)\":{\"params\":{\"_max\":\": New maxBet\",\"_min\":\": New minBet\"}},\"setCroupier(address)\":{\"params\":{\"_addr\":\": New croupier\"}},\"setEdge(uint8)\":{\"params\":{\"_e\":\": New edge\"}},\"setProfitTaker(address)\":{\"params\":{\"_profitTaker\":\": New profitTaker\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"confirm(bytes32,uint8,bytes32,bytes32)\":{\"notice\":\"Confirm the game, with seed\"},\"croupier()\":{\"notice\":\"Croupier\"},\"edge()\":{\"notice\":\"Fee factor\"},\"games(bytes32)\":{\"notice\":\"Info of each game\"},\"houseProfit()\":{\"notice\":\"Profit from bets\"},\"listGames(uint256)\":{\"notice\":\"Games seeds\"},\"maxBet()\":{\"notice\":\"Maximal amount for bet\"},\"minBet()\":{\"notice\":\"Minimal amount for bet\"},\"play(uint256,uint256,bytes32)\":{\"notice\":\"Add new game\"},\"profitTaker()\":{\"notice\":\"Person how will receive houseProfit\"},\"setBetRange(uint256,uint256)\":{\"notice\":\"Set new minBet and maxBet\"},\"setCroupier(address)\":{\"notice\":\"Set new croupier\"},\"setEdge(uint8)\":{\"notice\":\"Set new edge\"},\"setProfitTaker(address)\":{\"notice\":\"Set new profitTaker\"},\"totalGamesCount()\":{\"notice\":\"Number of all games\"},\"withdrawAll()\":{\"notice\":\"sends contract's excessive balance to owner\"},\"withdrawProfit()\":{\"notice\":\"sends houseProfit to profitTaker\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"cache/solpp-generated-contracts/CoinFlip.sol\":\"CoinFlip\"},\"evmVersion\":\"istanbul\",\"libraries\":{\":__CACHE_BREAKER__\":\"0x00000000d41867734bbee4c6863d9255b2b06ac1\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\",\"keccak256\":\"0x1cae4f85f114ff17b90414f5da67365b1d00337abb5bce9bf944eb78a2c0673c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xf8e8d118a7a8b2e134181f7da655f6266aa3a0f9134b2605747139fcb0c5d835\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x99f5c21018d796db7833a2100bb0e7411999e248a3c950fb526eee5d2bf47cb7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x069b2631bb5b5193a58ccf7a06266c7361bd2c20095667af4402817605627f45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xf930d2df426bfcfc1f7415be724f04081c96f4fb9ec8d0e3a521c07692dface0\",\"license\":\"MIT\"},\"cache/solpp-generated-contracts/CoinFlip.sol\":{\"content\":\"pragma solidity 0.8.3;\\n\\n// SPDX-License-Identifier: MIT\\n\\n\\n\\nimport \\\"./GamesCore.sol\\\";\\n\\ncontract CoinFlip is GamesCore {\\n    using SafeERC20 for IERC20;\\n\\n    constructor() {\\n        croupier = msg.sender;\\n        profitTaker = msg.sender;\\n\\n        edge = 5;\\n        minBet = 0.1 ether;\\n        maxBet = 10 ether;\\n    }\\n\\n    /**\\n        * @notice Add new game\\n        * @param _seed: Uniqual value for each game\\n    */\\n    function play(uint256 _choice, uint256 _betAmount, bytes32 _seed) public betInRange(_betAmount) uniqueSeed(_seed) {\\n        require(_choice == 0 || _choice == 1, 'CoinFlip: Choice should be 0 or 1');\\n        require(_betAmount != 0, 'CoinFlip: Bet amount couldnt be 0');\\n\\n        uint256 possiblePrize = _betAmount * (200 - edge) / 100;\\n        require(\\n            possiblePrize < token.balanceOf(address(this)),\\n            'CoinFlip: Insufficent funds on contract to cover the bet'\\n        );\\n\\n        token.safeTransferFrom(msg.sender, address(this), _betAmount);\\n\\n        Game storage game = games[_seed];\\n\\n        totalGamesCount++;\\n\\n        game.id = totalGamesCount;\\n        game.player = msg.sender;\\n        game.bet = _betAmount;\\n        game.state = GameState.PENDING;\\n\\n        game.choice = _choice;\\n\\n        houseProfit += int256(game.bet);\\n        listGames.push(_seed);\\n\\n        emit GameCreated(\\n            game.player,\\n            game.bet,\\n            game.choice,\\n            _seed,\\n            true\\n        );\\n    }\\n\\n    /**\\n        * @notice Confirm the game, with seed\\n        * @param _seed: Uniqual value for each game\\n    */\\n    function confirm(\\n        bytes32 _seed,\\n        uint8 _v,\\n        bytes32 _r,\\n        bytes32 _s\\n    ) public override onlyCroupier {\\n        Game storage game = games[_seed];\\n\\n        require(game.state == GameState.PENDING, 'CoinFlip: Game already played');\\n\\n        bytes memory prefix = \\\"\\\\x19Ethereum Signed Message:\\\\n32\\\";\\n        bytes32 prefixedHash = keccak256(abi.encodePacked(prefix, _seed));\\n\\n        require(ecrecover(prefixedHash, _v, _r, _s) == croupier, 'CoinFlip: Invalid signature');\\n\\n        game.result = uint256(_s) % 2;\\n        \\n        if (game.choice == game.result) {\\n            game.prize = game.bet * (200 - edge) / 100;\\n            game.state = GameState.WON;\\n            \\n            houseProfit -= int256(game.prize);\\n            \\n            token.safeTransfer(game.player, game.prize);\\n        } else {\\n            game.prize = 0;\\n            game.state = GameState.LOST;\\n        }\\n\\n        emit GamePlayed(\\n            game.player,\\n            game.id,\\n            (200 - edge),\\n            game.bet,\\n            game.prize,\\n            game.choice,\\n            game.result,\\n            _seed,\\n            true,\\n            game.state\\n        );\\n    }\\n}\",\"keccak256\":\"0x994fa3fe15661508f9327e94c636cdacdb17ae148c4101c4c96ddaecc283a936\",\"license\":\"MIT\"},\"cache/solpp-generated-contracts/GamesCore.sol\":{\"content\":\"pragma solidity 0.8.3;\\n\\n// SPDX-License-Identifier: MIT\\n\\n\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\n\\nabstract contract GamesCore is Ownable {\\n    using SafeERC20 for IERC20;\\n\\n    struct Game {\\n        uint256 id;\\n        address player;\\n        uint256 bet;\\n        uint256 prize;\\n        uint256 choice;\\n        uint256 result;\\n        bool over;\\n        GameState state;\\n    }\\n\\n    enum GameState {\\n        PENDING,\\n        WON,\\n        LOST\\n    }\\n\\n    /// Number of all games\\n    uint256 public totalGamesCount;\\n    /// Minimal amount for bet\\n    uint256 public minBet;\\n    /// Maximal amount for bet\\n    uint256 public maxBet;\\n\\n    /// Profit from bets\\n    int256 public houseProfit;\\n\\n    /// Croupier\\n    address public croupier;\\n    /// Person how will receive houseProfit\\n    address public profitTaker;\\n    IERC20 public token =\\n        IERC20(0x9a946c3Cb16c08334b69aE249690C236Ebd5583E);\\n    /// Fee factor\\n    uint8 public edge;\\n\\n    /// Info of each game\\n    mapping(bytes32 => Game) public games;\\n\\n    /// Games seeds\\n    bytes32[] public listGames;\\n\\n    event GameCreated(\\n        address indexed player,\\n        uint256 bet,\\n        uint256 choice,\\n        bytes32 seed,\\n        bool over\\n    );\\n\\n    event GamePlayed(\\n        address indexed player,\\n        uint256 round,\\n        uint256 multiplier,\\n        uint256 bet,\\n        uint256 prize,\\n        uint256 choice,\\n        uint256 result,\\n        bytes32 indexed seed,\\n        bool over,\\n        GameState state\\n    );\\n\\n    // Modifier for functions that can only be ran by the croupier\\n    modifier onlyCroupier() {\\n        require(\\n            msg.sender == croupier,\\n            \\\"Only the croupier can run this function.\\\"\\n        );\\n        _;\\n    }\\n\\n    // Modifier for functions that can only be ran by the profit taker\\n    modifier onlyProfitTaker() {\\n        require(\\n            msg.sender == profitTaker,\\n            \\\"Only the profit taker can run this function.\\\"\\n        );\\n        _;\\n    }\\n\\n    // Check that the rate is between min and max bet\\n    modifier betInRange(uint256 _betAmount) {\\n        require(\\n            minBet <= _betAmount && _betAmount <= maxBet,\\n            \\\"Incorrect amount to bet\\\"\\n        );\\n        _;\\n    }\\n\\n    /// Check that sedd is unique\\n    modifier uniqueSeed(bytes32 _seed) {\\n        require(games[_seed].id == 0, \\\"Seed already used\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @notice Confirm the game, with seed\\n     * @param _seed: Uniqual value for each game\\n     */\\n    function confirm(\\n        bytes32 _seed,\\n        uint8 _v,\\n        bytes32 _r,\\n        bytes32 _s\\n    ) public virtual;\\n\\n    /**\\n     * @notice Set new minBet and maxBet\\n     * @param _min: New minBet\\n     * @param _max: New maxBet\\n     */\\n    function setBetRange(uint256 _min, uint256 _max) public onlyOwner {\\n        minBet = _min;\\n        maxBet = _max;\\n    }\\n\\n    /**\\n     * @notice Set new croupier\\n     * @param _addr: New croupier\\n     */\\n    function setCroupier(address _addr) public onlyOwner {\\n        croupier = _addr;\\n    }\\n\\n    /**\\n     * @notice Set new profitTaker\\n     * @param _profitTaker: New profitTaker\\n     */\\n    function setProfitTaker(address _profitTaker) public onlyOwner {\\n        profitTaker = _profitTaker;\\n    }\\n\\n    /**\\n     * @notice Set new edge\\n     * @param _e: New edge\\n     */\\n    function setEdge(uint8 _e) public onlyOwner {\\n        edge = _e;\\n    }\\n\\n    function setToken(address _token) external onlyOwner {\\n        require(_token != address(0x0));\\n        token = IERC20(_token);\\n    }\\n\\n    /**\\n     * @notice sends houseProfit to profitTaker\\n     */\\n    function withdrawProfit() public onlyProfitTaker {\\n        if (houseProfit > 0) {\\n            token.safeTransfer(profitTaker, uint256(houseProfit));\\n            houseProfit = 0;\\n        }\\n    }\\n\\n    /**\\n     * @notice sends contract's excessive balance to owner\\n     */\\n    function withdrawAll() public onlyOwner {\\n        if (houseProfit > 0) {\\n            token.safeTransfer(\\n                owner(),\\n                token.balanceOf(address(this)) - uint256(houseProfit)\\n            );\\n\\n            return;\\n        }\\n\\n        token.safeTransfer(owner(), token.balanceOf(address(this)));\\n    }\\n\\n    // Fallback function\\n    fallback() external payable {}\\n\\n    receive() external payable {}\\n}\\n\",\"keccak256\":\"0xa016cc4a237cf253bc72816902eceb275a4212d78596eb89e5d0a59f58fa8d10\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6080604052600780546001600160a01b031916739a946c3cb16c08334b69ae249690c236ebd5583e17905534801561003657600080fd5b50600080546001600160a01b031916339081178255604051909182917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a35060058054336001600160a01b031991821681179092556006805490911690911790556007805460ff60a01b1916600560a01b17905567016345785d8a0000600255678ac7230489e800006003556117db806100d46000396000f3fe6080604052600436106101395760003560e01c80638da5cb5b116100ab578063b00606a51161006f578063b00606a51461033f578063f2fde38b1461035f578063f579f8821461037f578063f593a38714610401578063f8bb201c14610417578063fc0c546a1461043757610140565b80638da5cb5b146102a3578063959499b6146102c15780639619367d146102d6578063abae5050146102ec578063adc2c98a1461030c57610140565b80636b5c5f39116100fd5780636b5c5f3914610203578063715018a614610223578063722153731461023857806372be411214610258578063853828b61461027857806388fedd041461028d57610140565b8063144fa6d7146101425780632e5b2168146101625780635c6c09391461018b57806365fe09d7146101c357806367759501146101e357610140565b3661014057005b005b34801561014e57600080fd5b5061014061015d3660046113bb565b610457565b34801561016e57600080fd5b5061017860035481565b6040519081526020015b60405180910390f35b34801561019757600080fd5b506006546101ab906001600160a01b031681565b6040516001600160a01b039091168152602001610182565b3480156101cf57600080fd5b506101786101de366004611402565b6104bf565b3480156101ef57600080fd5b506101406101fe36600461148d565b6104e0565b34801561020f57600080fd5b506005546101ab906001600160a01b031681565b34801561022f57600080fd5b50610140610898565b34801561024457600080fd5b506101406102533660046113bb565b61090c565b34801561026457600080fd5b506101406102733660046114b8565b610958565b34801561028457600080fd5b506101406109a2565b34801561029957600080fd5b5061017860045481565b3480156102af57600080fd5b506000546001600160a01b03166101ab565b3480156102cd57600080fd5b50610140610b23565b3480156102e257600080fd5b5061017860025481565b3480156102f857600080fd5b5061014061030736600461146c565b610bc5565b34801561031857600080fd5b5060075461032d90600160a01b900460ff1681565b60405160ff9091168152602001610182565b34801561034b57600080fd5b5061014061035a36600461141a565b610bfa565b34801561036b57600080fd5b5061014061037a3660046113bb565b610f71565b34801561038b57600080fd5b506103ed61039a366004611402565b600860205260009081526040902080546001820154600283015460038401546004850154600586015460069096015494956001600160a01b03909416949293919290919060ff8082169161010090041688565b60405161018298979695949392919061159a565b34801561040d57600080fd5b5061017860015481565b34801561042357600080fd5b506101406104323660046113bb565b61105b565b34801561044357600080fd5b506007546101ab906001600160a01b031681565b6000546001600160a01b0316331461048a5760405162461bcd60e51b815260040161048190611565565b60405180910390fd5b6001600160a01b03811661049d57600080fd5b600780546001600160a01b0319166001600160a01b0392909216919091179055565b600981815481106104cf57600080fd5b600091825260209091200154905081565b8180600254111580156104f557506003548111155b6105415760405162461bcd60e51b815260206004820152601760248201527f496e636f727265637420616d6f756e7420746f206265740000000000000000006044820152606401610481565b6000828152600860205260409020548290156105935760405162461bcd60e51b815260206004820152601160248201527014d9595908185b1c9958591e481d5cd959607a1b6044820152606401610481565b8415806105a05750846001145b6105f65760405162461bcd60e51b815260206004820152602160248201527f436f696e466c69703a2043686f6963652073686f756c642062652030206f72206044820152603160f81b6064820152608401610481565b8361064d5760405162461bcd60e51b815260206004820152602160248201527f436f696e466c69703a2042657420616d6f756e7420636f756c646e74206265206044820152600360fc1b6064820152608401610481565b60075460009060649061066b90600160a01b900460ff1660c86116fb565b6106789060ff1687611686565b6106829190611672565b6007546040516370a0823160e01b81523060048201529192506001600160a01b0316906370a082319060240160206040518083038186803b1580156106c657600080fd5b505afa1580156106da573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106fe9190611454565b81106107725760405162461bcd60e51b815260206004820152603860248201527f436f696e466c69703a20496e737566666963656e742066756e6473206f6e206360448201527f6f6e747261637420746f20636f766572207468652062657400000000000000006064820152608401610481565b60075461078a906001600160a01b03163330886110a7565b60008481526008602052604081206001805491926107a78361174a565b9091555050600180548255810180546001600160a01b031916331790556002810186905560068101805461ff0019169055600480820188905580548791906000906107f3908490611631565b909155505060098054600180820183556000929092527f6e1540171b6c0c960b71a7020d9f60077f6af931a8bbf590da0223dacf75c7af018690558181015460028301546004840154604080519283526020830191909152810188905260608101929092526001600160a01b0316907f5c0023731903eb93130ada523196982a48d902eea3b24cc0b647c08d99007b609060800160405180910390a250505050505050565b6000546001600160a01b031633146108c25760405162461bcd60e51b815260040161048190611565565b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b6000546001600160a01b031633146109365760405162461bcd60e51b815260040161048190611565565b600680546001600160a01b0319166001600160a01b0392909216919091179055565b6000546001600160a01b031633146109825760405162461bcd60e51b815260040161048190611565565b6007805460ff909216600160a01b0260ff60a01b19909216919091179055565b6000546001600160a01b031633146109cc5760405162461bcd60e51b815260040161048190611565565b60006004541315610a9157610a8c6109ec6000546001600160a01b031690565b600480546007546040516370a0823160e01b8152309381019390935290916001600160a01b03909116906370a082319060240160206040518083038186803b158015610a3757600080fd5b505afa158015610a4b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a6f9190611454565b610a7991906116e4565b6007546001600160a01b03169190611118565b610b21565b610b21610aa66000546001600160a01b031690565b6007546040516370a0823160e01b81523060048201526001600160a01b03909116906370a082319060240160206040518083038186803b158015610ae957600080fd5b505afa158015610afd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a799190611454565b565b6006546001600160a01b03163314610b925760405162461bcd60e51b815260206004820152602c60248201527f4f6e6c79207468652070726f6669742074616b65722063616e2072756e20746860448201526b34b990333ab731ba34b7b71760a11b6064820152608401610481565b60006004541315610b2157600654600454600754610bbe926001600160a01b0391821692911690611118565b6000600455565b6000546001600160a01b03163314610bef5760405162461bcd60e51b815260040161048190611565565b600291909155600355565b6005546001600160a01b03163314610c655760405162461bcd60e51b815260206004820152602860248201527f4f6e6c79207468652063726f75706965722063616e2072756e207468697320666044820152673ab731ba34b7b71760c11b6064820152608401610481565b6000848152600860205260408120906006820154610100900460ff166002811115610ca057634e487b7160e01b600052602160045260246000fd5b14610ced5760405162461bcd60e51b815260206004820152601d60248201527f436f696e466c69703a2047616d6520616c726561647920706c617965640000006044820152606401610481565b60006040518060400160405280601c81526020017f19457468657265756d205369676e6564204d6573736167653a0a333200000000815250905060008187604051602001610d3c929190611510565b60408051808303601f1901815282825280516020918201206005546000855291840180845281905260ff8a169284019290925260608301889052608083018790529092506001600160a01b03169060019060a0016020604051602081039080840390855afa158015610db2573d6000803e3d6000fd5b505050602060405103516001600160a01b031614610e125760405162461bcd60e51b815260206004820152601b60248201527f436f696e466c69703a20496e76616c6964207369676e617475726500000000006044820152606401610481565b610e1d600285611765565b6005840181905560048401541415610ebf57600754606490610e4a90600160a01b900460ff1660c86116fb565b60ff168460020154610e5c9190611686565b610e669190611672565b6003840181905560068401805461ff00191661010017905560048054600090610e909084906116a5565b909155505060018301546003840154600754610eba926001600160a01b0391821692911690611118565b610ed8565b6000600384015560068301805461ff0019166102001790555b6001830154835460075489926001600160a01b0316917e867f710c53fead2d43f716b65ca12f0ecbef01e58edb8cd235073f9149243191610f2490600160a01b900460ff1660c86116fb565b8760020154886003015489600401548a6005015460018c60060160019054906101000a900460ff16604051610f609897969594939291906115ef565b60405180910390a350505050505050565b6000546001600160a01b03163314610f9b5760405162461bcd60e51b815260040161048190611565565b6001600160a01b0381166110005760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610481565b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b6000546001600160a01b031633146110855760405162461bcd60e51b815260040161048190611565565b600580546001600160a01b0319166001600160a01b0392909216919091179055565b6040516001600160a01b03808516602483015283166044820152606481018290526111129085906323b872dd60e01b906084015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b03199093169290921790915261114d565b50505050565b6040516001600160a01b03831660248201526044810182905261114890849063a9059cbb60e01b906064016110db565b505050565b60006111a2826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b031661121f9092919063ffffffff16565b80519091501561114857808060200190518101906111c091906113e2565b6111485760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610481565b606061122e8484600085611238565b90505b9392505050565b6060824710156112995760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610481565b6112a285611367565b6112ee5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610481565b600080866001600160a01b0316858760405161130a91906114f4565b60006040518083038185875af1925050503d8060008114611347576040519150601f19603f3d011682016040523d82523d6000602084013e61134c565b606091505b509150915061135c828286611371565b979650505050505050565b803b15155b919050565b60608315611380575081611231565b8251156113905782518084602001fd5b8160405162461bcd60e51b81526004016104819190611532565b803560ff8116811461136c57600080fd5b6000602082840312156113cc578081fd5b81356001600160a01b0381168114611231578182fd5b6000602082840312156113f3578081fd5b81518015158114611231578182fd5b600060208284031215611413578081fd5b5035919050565b6000806000806080858703121561142f578283fd5b8435935061143f602086016113aa565b93969395505050506040820135916060013590565b600060208284031215611465578081fd5b5051919050565b6000806040838503121561147e578182fd5b50508035926020909101359150565b6000806000606084860312156114a1578283fd5b505081359360208301359350604090920135919050565b6000602082840312156114c9578081fd5b611231826113aa565b600381106114f057634e487b7160e01b600052602160045260246000fd5b9052565b6000825161150681846020870161171e565b9190910192915050565b6000835161152281846020880161171e565b9190910191825250602001919050565b600060208252825180602084015261155181604085016020870161171e565b601f01601f19169190910160400192915050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b8881526001600160a01b038816602082015260408101879052606081018690526080810185905260a0810184905282151560c082015261010081016115e260e08301846114d2565b9998505050505050505050565b60006101008201905089825260ff891660208301528760408301528660608301528560808301528460a083015283151560c08301526115e260e08301846114d2565b600080821280156001600160ff1b038490038513161561165357611653611779565b600160ff1b839003841281161561166c5761166c611779565b50500190565b6000826116815761168161178f565b500490565b60008160001904831182151516156116a0576116a0611779565b500290565b60008083128015600160ff1b8501841216156116c3576116c3611779565b6001600160ff1b03840183138116156116de576116de611779565b50500390565b6000828210156116f6576116f6611779565b500390565b600060ff821660ff84168082101561171557611715611779565b90039392505050565b60005b83811015611739578181015183820152602001611721565b838111156111125750506000910152565b600060001982141561175e5761175e611779565b5060010190565b6000826117745761177461178f565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fdfea26469706673582212207dbe2e313c1abe1d46ef4a474d9afa339c54123d66779c21038988ca0aba50c264736f6c63430008030033",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "confirm(bytes32,uint8,bytes32,bytes32)": {
        "params": {
          "_seed": ": Uniqual value for each game"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "play(uint256,uint256,bytes32)": {
        "params": {
          "_seed": ": Uniqual value for each game"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "setBetRange(uint256,uint256)": {
        "params": {
          "_max": ": New maxBet",
          "_min": ": New minBet"
        }
      },
      "setCroupier(address)": {
        "params": {
          "_addr": ": New croupier"
        }
      },
      "setEdge(uint8)": {
        "params": {
          "_e": ": New edge"
        }
      },
      "setProfitTaker(address)": {
        "params": {
          "_profitTaker": ": New profitTaker"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "confirm(bytes32,uint8,bytes32,bytes32)": {
        "notice": "Confirm the game, with seed"
      },
      "croupier()": {
        "notice": "Croupier"
      },
      "edge()": {
        "notice": "Fee factor"
      },
      "games(bytes32)": {
        "notice": "Info of each game"
      },
      "houseProfit()": {
        "notice": "Profit from bets"
      },
      "listGames(uint256)": {
        "notice": "Games seeds"
      },
      "maxBet()": {
        "notice": "Maximal amount for bet"
      },
      "minBet()": {
        "notice": "Minimal amount for bet"
      },
      "play(uint256,uint256,bytes32)": {
        "notice": "Add new game"
      },
      "profitTaker()": {
        "notice": "Person how will receive houseProfit"
      },
      "setBetRange(uint256,uint256)": {
        "notice": "Set new minBet and maxBet"
      },
      "setCroupier(address)": {
        "notice": "Set new croupier"
      },
      "setEdge(uint8)": {
        "notice": "Set new edge"
      },
      "setProfitTaker(address)": {
        "notice": "Set new profitTaker"
      },
      "totalGamesCount()": {
        "notice": "Number of all games"
      },
      "withdrawAll()": {
        "notice": "sends contract's excessive balance to owner"
      },
      "withdrawProfit()": {
        "notice": "sends houseProfit to profitTaker"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "cache/solpp-generated-contracts/CoinFlip.sol:CoinFlip",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 4782,
        "contract": "cache/solpp-generated-contracts/CoinFlip.sol:CoinFlip",
        "label": "totalGamesCount",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 4785,
        "contract": "cache/solpp-generated-contracts/CoinFlip.sol:CoinFlip",
        "label": "minBet",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 4788,
        "contract": "cache/solpp-generated-contracts/CoinFlip.sol:CoinFlip",
        "label": "maxBet",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 4791,
        "contract": "cache/solpp-generated-contracts/CoinFlip.sol:CoinFlip",
        "label": "houseProfit",
        "offset": 0,
        "slot": "4",
        "type": "t_int256"
      },
      {
        "astId": 4794,
        "contract": "cache/solpp-generated-contracts/CoinFlip.sol:CoinFlip",
        "label": "croupier",
        "offset": 0,
        "slot": "5",
        "type": "t_address"
      },
      {
        "astId": 4797,
        "contract": "cache/solpp-generated-contracts/CoinFlip.sol:CoinFlip",
        "label": "profitTaker",
        "offset": 0,
        "slot": "6",
        "type": "t_address"
      },
      {
        "astId": 4803,
        "contract": "cache/solpp-generated-contracts/CoinFlip.sol:CoinFlip",
        "label": "token",
        "offset": 0,
        "slot": "7",
        "type": "t_contract(IERC20)187"
      },
      {
        "astId": 4806,
        "contract": "cache/solpp-generated-contracts/CoinFlip.sol:CoinFlip",
        "label": "edge",
        "offset": 20,
        "slot": "7",
        "type": "t_uint8"
      },
      {
        "astId": 4812,
        "contract": "cache/solpp-generated-contracts/CoinFlip.sol:CoinFlip",
        "label": "games",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_bytes32,t_struct(Game)4775_storage)"
      },
      {
        "astId": 4816,
        "contract": "cache/solpp-generated-contracts/CoinFlip.sol:CoinFlip",
        "label": "listGames",
        "offset": 0,
        "slot": "9",
        "type": "t_array(t_bytes32)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IERC20)187": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_enum(GameState)4779": {
        "encoding": "inplace",
        "label": "enum GamesCore.GameState",
        "numberOfBytes": "1"
      },
      "t_int256": {
        "encoding": "inplace",
        "label": "int256",
        "numberOfBytes": "32"
      },
      "t_mapping(t_bytes32,t_struct(Game)4775_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct GamesCore.Game)",
        "numberOfBytes": "32",
        "value": "t_struct(Game)4775_storage"
      },
      "t_struct(Game)4775_storage": {
        "encoding": "inplace",
        "label": "struct GamesCore.Game",
        "members": [
          {
            "astId": 4759,
            "contract": "cache/solpp-generated-contracts/CoinFlip.sol:CoinFlip",
            "label": "id",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 4761,
            "contract": "cache/solpp-generated-contracts/CoinFlip.sol:CoinFlip",
            "label": "player",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 4763,
            "contract": "cache/solpp-generated-contracts/CoinFlip.sol:CoinFlip",
            "label": "bet",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 4765,
            "contract": "cache/solpp-generated-contracts/CoinFlip.sol:CoinFlip",
            "label": "prize",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 4767,
            "contract": "cache/solpp-generated-contracts/CoinFlip.sol:CoinFlip",
            "label": "choice",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 4769,
            "contract": "cache/solpp-generated-contracts/CoinFlip.sol:CoinFlip",
            "label": "result",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 4771,
            "contract": "cache/solpp-generated-contracts/CoinFlip.sol:CoinFlip",
            "label": "over",
            "offset": 0,
            "slot": "6",
            "type": "t_bool"
          },
          {
            "astId": 4774,
            "contract": "cache/solpp-generated-contracts/CoinFlip.sol:CoinFlip",
            "label": "state",
            "offset": 1,
            "slot": "6",
            "type": "t_enum(GameState)4779"
          }
        ],
        "numberOfBytes": "224"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}