{
  "address": "0x38Ac2B36d179BDA3062008d86Bd161db79c2a5fF",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "player",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "bet",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "choice",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "seed",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "over",
          "type": "bool"
        }
      ],
      "name": "GameCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "player",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "round",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "multiplier",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "bet",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "prize",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "choice",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "result",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "seed",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "over",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "enum GamesCore.GameState",
          "name": "state",
          "type": "uint8"
        }
      ],
      "name": "GamePlayed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_seed",
          "type": "bytes32"
        },
        {
          "internalType": "uint8",
          "name": "_v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "_r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "_s",
          "type": "bytes32"
        }
      ],
      "name": "confirm",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "croupier",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "edge",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "games",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "player",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "bet",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "prize",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "choice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "result",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "over",
          "type": "bool"
        },
        {
          "internalType": "enum GamesCore.GameState",
          "name": "state",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "houseProfit",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "listGames",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxBet",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxPayout",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minBet",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_over",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "_choice",
          "type": "uint256"
        }
      ],
      "name": "multiplier",
      "outputs": [
        {
          "internalType": "int128",
          "name": "",
          "type": "int128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "padding",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_over",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "_choice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_bet",
          "type": "uint256"
        }
      ],
      "name": "payout",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_choice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_betAmount",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_over",
          "type": "bool"
        },
        {
          "internalType": "bytes32",
          "name": "_seed",
          "type": "bytes32"
        }
      ],
      "name": "play",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "profitTaker",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rangeMax",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rangeMin",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_min",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_max",
          "type": "uint256"
        }
      ],
      "name": "setBetRange",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_min",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_max",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_padding",
          "type": "uint256"
        }
      ],
      "name": "setChoiceRange",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_addr",
          "type": "address"
        }
      ],
      "name": "setCroupier",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "_e",
          "type": "uint8"
        }
      ],
      "name": "setEdge",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_maxPayout",
          "type": "uint256"
        }
      ],
      "name": "setMaxPayout",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_profitTaker",
          "type": "address"
        }
      ],
      "name": "setProfitTaker",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "setToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "token",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalGamesCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawProfit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x9b8377540b541eabdcb66fda83cb6b6bc0f3d29ba8c0c9f5b7e28e798c01f4ef",
  "receipt": {
    "to": null,
    "from": "0xfa3b0f0194843dF6a1Cd87C07515FA97CCf9A5A6",
    "contractAddress": "0x38Ac2B36d179BDA3062008d86Bd161db79c2a5fF",
    "transactionIndex": 120,
    "gasUsed": "1828195",
    "logsBloom": "0x
    "blockHash": "0x85f5b362aa9d46e82aaebf1590d9d2b56838a8265dc2c22c1eeae6e30df00ef6",
    "transactionHash": "0x9b8377540b541eabdcb66fda83cb6b6bc0f3d29ba8c0c9f5b7e28e798c01f4ef",
    "logs": [
      {
        "transactionIndex": 120,
        "blockNumber": 10999535,
        "transactionHash": "0x9b8377540b541eabdcb66fda83cb6b6bc0f3d29ba8c0c9f5b7e28e798c01f4ef",
        "address": "0x38Ac2B36d179BDA3062008d86Bd161db79c2a5fF",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000fa3b0f0194843df6a1cd87c07515fa97ccf9a5a6"
        ],
        "data": "0x",
        "logIndex": 331,
        "blockHash": "0x85f5b362aa9d46e82aaebf1590d9d2b56838a8265dc2c22c1eeae6e30df00ef6"
      }
    ],
    "blockNumber": 10999535,
    "cumulativeGasUsed": "14612175",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "ec852e81497cd11210cc8392e35af545",
  "metadata": "{\"compiler\":{\"version\":\"0.8.3+commit.8d00100c\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bet\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"choice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"seed\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"over\",\"type\":\"bool\"}],\"name\":\"GameCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"round\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"multiplier\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bet\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"prize\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"choice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"result\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"seed\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"over\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"enum GamesCore.GameState\",\"name\":\"state\",\"type\":\"uint8\"}],\"name\":\"GamePlayed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_seed\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"_v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"_r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_s\",\"type\":\"bytes32\"}],\"name\":\"confirm\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"croupier\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"edge\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"games\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"bet\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"prize\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"choice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"result\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"over\",\"type\":\"bool\"},{\"internalType\":\"enum GamesCore.GameState\",\"name\":\"state\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"houseProfit\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"listGames\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxBet\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxPayout\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minBet\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_over\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_choice\",\"type\":\"uint256\"}],\"name\":\"multiplier\",\"outputs\":[{\"internalType\":\"int128\",\"name\":\"\",\"type\":\"int128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"padding\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_over\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_choice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_bet\",\"type\":\"uint256\"}],\"name\":\"payout\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_choice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_betAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_over\",\"type\":\"bool\"},{\"internalType\":\"bytes32\",\"name\":\"_seed\",\"type\":\"bytes32\"}],\"name\":\"play\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"profitTaker\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rangeMax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rangeMin\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_min\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_max\",\"type\":\"uint256\"}],\"name\":\"setBetRange\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_min\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_max\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_padding\",\"type\":\"uint256\"}],\"name\":\"setChoiceRange\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"setCroupier\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_e\",\"type\":\"uint8\"}],\"name\":\"setEdge\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxPayout\",\"type\":\"uint256\"}],\"name\":\"setMaxPayout\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_profitTaker\",\"type\":\"address\"}],\"name\":\"setProfitTaker\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"setToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalGamesCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawProfit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"confirm(bytes32,uint8,bytes32,bytes32)\":{\"params\":{\"_seed\":\": Uniqual value for each game\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"payout(bool,uint256,uint256)\":{\"params\":{\"_bet\":\": Bet amount\"}},\"play(uint256,uint256,bool,bytes32)\":{\"params\":{\"_choice\":\": Choice\",\"_over\":\": More or less than choice\",\"_seed\":\": Uniqual value for each game\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"setBetRange(uint256,uint256)\":{\"params\":{\"_max\":\": New maxBet\",\"_min\":\": New minBet\"}},\"setChoiceRange(uint256,uint256,uint256)\":{\"params\":{\"_max\":\": New rangeMax\",\"_min\":\": New rangeMin\",\"_padding\":\": New padding\"}},\"setCroupier(address)\":{\"params\":{\"_addr\":\": New croupier\"}},\"setEdge(uint8)\":{\"params\":{\"_e\":\": New edge\"}},\"setMaxPayout(uint256)\":{\"params\":{\"_maxPayout\":\": New maxPayout\"}},\"setProfitTaker(address)\":{\"params\":{\"_profitTaker\":\": New profitTaker\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"confirm(bytes32,uint8,bytes32,bytes32)\":{\"notice\":\"Confirm the game, with seed\"},\"croupier()\":{\"notice\":\"Croupier\"},\"edge()\":{\"notice\":\"Fee factor\"},\"games(bytes32)\":{\"notice\":\"Info of each game\"},\"houseProfit()\":{\"notice\":\"Profit from bets\"},\"listGames(uint256)\":{\"notice\":\"Games seeds\"},\"maxBet()\":{\"notice\":\"Maximal amount for bet\"},\"maxPayout()\":{\"notice\":\"Maximum possible win\"},\"minBet()\":{\"notice\":\"Minimal amount for bet\"},\"multiplier(bool,uint256)\":{\"notice\":\"Calculates the coefficient for choice\"},\"payout(bool,uint256,uint256)\":{\"notice\":\"Calculates the prize when winning\"},\"play(uint256,uint256,bool,bytes32)\":{\"notice\":\"Add new game\"},\"profitTaker()\":{\"notice\":\"Person how will receive houseProfit\"},\"rangeMax()\":{\"notice\":\"Maximal possible choice\"},\"rangeMin()\":{\"notice\":\"Minimal possible choice\"},\"setBetRange(uint256,uint256)\":{\"notice\":\"Set new minBet and maxBet\"},\"setChoiceRange(uint256,uint256,uint256)\":{\"notice\":\"Set new range for choice\"},\"setCroupier(address)\":{\"notice\":\"Set new croupier\"},\"setEdge(uint8)\":{\"notice\":\"Set new edge\"},\"setMaxPayout(uint256)\":{\"notice\":\"Set new maxPayout    \"},\"setProfitTaker(address)\":{\"notice\":\"Set new profitTaker\"},\"totalGamesCount()\":{\"notice\":\"Number of all games\"},\"withdrawAll()\":{\"notice\":\"sends contract's excessive balance to owner\"},\"withdrawProfit()\":{\"notice\":\"sends houseProfit to profitTaker\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"cache/solpp-generated-contracts/DiceRoll.sol\":\"DiceRoll\"},\"evmVersion\":\"istanbul\",\"libraries\":{\":__CACHE_BREAKER__\":\"0x00000000d41867734bbee4c6863d9255b2b06ac1\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\",\"keccak256\":\"0x1cae4f85f114ff17b90414f5da67365b1d00337abb5bce9bf944eb78a2c0673c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xf8e8d118a7a8b2e134181f7da655f6266aa3a0f9134b2605747139fcb0c5d835\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x99f5c21018d796db7833a2100bb0e7411999e248a3c950fb526eee5d2bf47cb7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x069b2631bb5b5193a58ccf7a06266c7361bd2c20095667af4402817605627f45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xf930d2df426bfcfc1f7415be724f04081c96f4fb9ec8d0e3a521c07692dface0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2526b7c6a366fc211bbc176078ab02b83833e7682abcc5b3bed9d700b34e2a3e\",\"license\":\"MIT\"},\"cache/solpp-generated-contracts/ABDKMath64x64.sol\":{\"content\":\"pragma solidity ^0.8.0;\\n\\n// SPDX-License-Identifier: BSD-4-Clause\\n/*\\n * ABDK Math 64.64 Smart Contract Library.  Copyright \\u00a9 2019 by ABDK Consulting.\\n * Author: Mikhail Vladimirov <mikhail.vladimirov@gmail.com>\\n */\\n\\n\\n/**\\n * Smart contract library of mathematical functions operating with signed\\n * 64.64-bit fixed point numbers.  Signed 64.64-bit fixed point number is\\n * basically a simple fraction whose numerator is signed 128-bit integer and\\n * denominator is 2^64.  As long as denominator is always the same, there is no\\n * need to store it, thus in Solidity signed 64.64-bit fixed point numbers are\\n * represented by int128 type holding only the numerator.\\n */\\nlibrary ABDKMath64x64 {\\n  /*\\n   * Minimum value signed 64.64-bit fixed point number may have. \\n   */\\n  int128 private constant MIN_64x64 = -0x80000000000000000000000000000000;\\n\\n  /*\\n   * Maximum value signed 64.64-bit fixed point number may have. \\n   */\\n  int128 private constant MAX_64x64 = 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n\\n  /**\\n   * Convert signed 256-bit integer number into signed 64.64-bit fixed point\\n   * number.  Revert on overflow.\\n   *\\n   * @param x signed 256-bit integer number\\n   * @return signed 64.64-bit fixed point number\\n   */\\n  function fromInt (int256 x) internal pure returns (int128) {\\n    unchecked {\\n      require (x >= -0x8000000000000000 && x <= 0x7FFFFFFFFFFFFFFF);\\n      return int128 (x << 64);\\n    }\\n  }\\n\\n  /**\\n   * Convert signed 64.64 fixed point number into signed 64-bit integer number\\n   * rounding down.\\n   *\\n   * @param x signed 64.64-bit fixed point number\\n   * @return signed 64-bit integer number\\n   */\\n  function toInt (int128 x) internal pure returns (int64) {\\n    unchecked {\\n      return int64 (x >> 64);\\n    }\\n  }\\n\\n  /**\\n   * Convert unsigned 256-bit integer number into signed 64.64-bit fixed point\\n   * number.  Revert on overflow.\\n   *\\n   * @param x unsigned 256-bit integer number\\n   * @return signed 64.64-bit fixed point number\\n   */\\n  function fromUInt (uint256 x) internal pure returns (int128) {\\n    unchecked {\\n      require (x <= 0x7FFFFFFFFFFFFFFF);\\n      return int128 (int256 (x << 64));\\n    }\\n  }\\n\\n  /**\\n   * Convert signed 64.64 fixed point number into unsigned 64-bit integer\\n   * number rounding down.  Revert on underflow.\\n   *\\n   * @param x signed 64.64-bit fixed point number\\n   * @return unsigned 64-bit integer number\\n   */\\n  function toUInt (int128 x) internal pure returns (uint64) {\\n    unchecked {\\n      require (x >= 0);\\n      return uint64 (uint128 (x >> 64));\\n    }\\n  }\\n\\n  /**\\n   * Convert signed 128.128 fixed point number into signed 64.64-bit fixed point\\n   * number rounding down.  Revert on overflow.\\n   *\\n   * @param x signed 128.128-bin fixed point number\\n   * @return signed 64.64-bit fixed point number\\n   */\\n  function from128x128 (int256 x) internal pure returns (int128) {\\n    unchecked {\\n      int256 result = x >> 64;\\n      require (result >= MIN_64x64 && result <= MAX_64x64);\\n      return int128 (result);\\n    }\\n  }\\n\\n  /**\\n   * Convert signed 64.64 fixed point number into signed 128.128 fixed point\\n   * number.\\n   *\\n   * @param x signed 64.64-bit fixed point number\\n   * @return signed 128.128 fixed point number\\n   */\\n  function to128x128 (int128 x) internal pure returns (int256) {\\n    unchecked {\\n      return int256 (x) << 64;\\n    }\\n  }\\n\\n  /**\\n   * Calculate x + y.  Revert on overflow.\\n   *\\n   * @param x signed 64.64-bit fixed point number\\n   * @param y signed 64.64-bit fixed point number\\n   * @return signed 64.64-bit fixed point number\\n   */\\n  function add (int128 x, int128 y) internal pure returns (int128) {\\n    unchecked {\\n      int256 result = int256(x) + y;\\n      require (result >= MIN_64x64 && result <= MAX_64x64);\\n      return int128 (result);\\n    }\\n  }\\n\\n  /**\\n   * Calculate x - y.  Revert on overflow.\\n   *\\n   * @param x signed 64.64-bit fixed point number\\n   * @param y signed 64.64-bit fixed point number\\n   * @return signed 64.64-bit fixed point number\\n   */\\n  function sub (int128 x, int128 y) internal pure returns (int128) {\\n    unchecked {\\n      int256 result = int256(x) - y;\\n      require (result >= MIN_64x64 && result <= MAX_64x64);\\n      return int128 (result);\\n    }\\n  }\\n\\n  /**\\n   * Calculate x * y rounding down.  Revert on overflow.\\n   *\\n   * @param x signed 64.64-bit fixed point number\\n   * @param y signed 64.64-bit fixed point number\\n   * @return signed 64.64-bit fixed point number\\n   */\\n  function mul (int128 x, int128 y) internal pure returns (int128) {\\n    unchecked {\\n      int256 result = int256(x) * y >> 64;\\n      require (result >= MIN_64x64 && result <= MAX_64x64);\\n      return int128 (result);\\n    }\\n  }\\n\\n  /**\\n   * Calculate x * y rounding towards zero, where x is signed 64.64 fixed point\\n   * number and y is signed 256-bit integer number.  Revert on overflow.\\n   *\\n   * @param x signed 64.64 fixed point number\\n   * @param y signed 256-bit integer number\\n   * @return signed 256-bit integer number\\n   */\\n  function muli (int128 x, int256 y) internal pure returns (int256) {\\n    unchecked {\\n      if (x == MIN_64x64) {\\n        require (y >= -0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF &&\\n          y <= 0x1000000000000000000000000000000000000000000000000);\\n        return -y << 63;\\n      } else {\\n        bool negativeResult = false;\\n        if (x < 0) {\\n          x = -x;\\n          negativeResult = true;\\n        }\\n        if (y < 0) {\\n          y = -y; // We rely on overflow behavior here\\n          negativeResult = !negativeResult;\\n        }\\n        uint256 absoluteResult = mulu (x, uint256 (y));\\n        if (negativeResult) {\\n          require (absoluteResult <=\\n            0x8000000000000000000000000000000000000000000000000000000000000000);\\n          return -int256 (absoluteResult); // We rely on overflow behavior here\\n        } else {\\n          require (absoluteResult <=\\n            0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\\n          return int256 (absoluteResult);\\n        }\\n      }\\n    }\\n  }\\n\\n  /**\\n   * Calculate x * y rounding down, where x is signed 64.64 fixed point number\\n   * and y is unsigned 256-bit integer number.  Revert on overflow.\\n   *\\n   * @param x signed 64.64 fixed point number\\n   * @param y unsigned 256-bit integer number\\n   * @return unsigned 256-bit integer number\\n   */\\n  function mulu (int128 x, uint256 y) internal pure returns (uint256) {\\n    unchecked {\\n      if (y == 0) return 0;\\n\\n      require (x >= 0);\\n\\n      uint256 lo = (uint256 (int256 (x)) * (y & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF)) >> 64;\\n      uint256 hi = uint256 (int256 (x)) * (y >> 128);\\n\\n      require (hi <= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\\n      hi <<= 64;\\n\\n      require (hi <=\\n        0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF - lo);\\n      return hi + lo;\\n    }\\n  }\\n\\n  /**\\n   * Calculate x / y rounding towards zero.  Revert on overflow or when y is\\n   * zero.\\n   *\\n   * @param x signed 64.64-bit fixed point number\\n   * @param y signed 64.64-bit fixed point number\\n   * @return signed 64.64-bit fixed point number\\n   */\\n  function div (int128 x, int128 y) internal pure returns (int128) {\\n    unchecked {\\n      require (y != 0);\\n      int256 result = (int256 (x) << 64) / y;\\n      require (result >= MIN_64x64 && result <= MAX_64x64);\\n      return int128 (result);\\n    }\\n  }\\n\\n  /**\\n   * Calculate x / y rounding towards zero, where x and y are signed 256-bit\\n   * integer numbers.  Revert on overflow or when y is zero.\\n   *\\n   * @param x signed 256-bit integer number\\n   * @param y signed 256-bit integer number\\n   * @return signed 64.64-bit fixed point number\\n   */\\n  function divi (int256 x, int256 y) internal pure returns (int128) {\\n    unchecked {\\n      require (y != 0);\\n\\n      bool negativeResult = false;\\n      if (x < 0) {\\n        x = -x; // We rely on overflow behavior here\\n        negativeResult = true;\\n      }\\n      if (y < 0) {\\n        y = -y; // We rely on overflow behavior here\\n        negativeResult = !negativeResult;\\n      }\\n      uint128 absoluteResult = divuu (uint256 (x), uint256 (y));\\n      if (negativeResult) {\\n        require (absoluteResult <= 0x80000000000000000000000000000000);\\n        return -int128 (absoluteResult); // We rely on overflow behavior here\\n      } else {\\n        require (absoluteResult <= 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\\n        return int128 (absoluteResult); // We rely on overflow behavior here\\n      }\\n    }\\n  }\\n\\n  /**\\n   * Calculate x / y rounding towards zero, where x and y are unsigned 256-bit\\n   * integer numbers.  Revert on overflow or when y is zero.\\n   *\\n   * @param x unsigned 256-bit integer number\\n   * @param y unsigned 256-bit integer number\\n   * @return signed 64.64-bit fixed point number\\n   */\\n  function divu (uint256 x, uint256 y) internal pure returns (int128) {\\n    unchecked {\\n      require (y != 0);\\n      uint128 result = divuu (x, y);\\n      require (result <= uint128 (MAX_64x64));\\n      return int128 (result);\\n    }\\n  }\\n\\n  /**\\n   * Calculate -x.  Revert on overflow.\\n   *\\n   * @param x signed 64.64-bit fixed point number\\n   * @return signed 64.64-bit fixed point number\\n   */\\n  function neg (int128 x) internal pure returns (int128) {\\n    unchecked {\\n      require (x != MIN_64x64);\\n      return -x;\\n    }\\n  }\\n\\n  /**\\n   * Calculate |x|.  Revert on overflow.\\n   *\\n   * @param x signed 64.64-bit fixed point number\\n   * @return signed 64.64-bit fixed point number\\n   */\\n  function abs (int128 x) internal pure returns (int128) {\\n    unchecked {\\n      require (x != MIN_64x64);\\n      return x < 0 ? -x : x;\\n    }\\n  }\\n\\n  /**\\n   * Calculate 1 / x rounding towards zero.  Revert on overflow or when x is\\n   * zero.\\n   *\\n   * @param x signed 64.64-bit fixed point number\\n   * @return signed 64.64-bit fixed point number\\n   */\\n  function inv (int128 x) internal pure returns (int128) {\\n    unchecked {\\n      require (x != 0);\\n      int256 result = int256 (0x100000000000000000000000000000000) / x;\\n      require (result >= MIN_64x64 && result <= MAX_64x64);\\n      return int128 (result);\\n    }\\n  }\\n\\n  /**\\n   * Calculate arithmetics average of x and y, i.e. (x + y) / 2 rounding down.\\n   *\\n   * @param x signed 64.64-bit fixed point number\\n   * @param y signed 64.64-bit fixed point number\\n   * @return signed 64.64-bit fixed point number\\n   */\\n  function avg (int128 x, int128 y) internal pure returns (int128) {\\n    unchecked {\\n      return int128 ((int256 (x) + int256 (y)) >> 1);\\n    }\\n  }\\n\\n  /**\\n   * Calculate geometric average of x and y, i.e. sqrt (x * y) rounding down.\\n   * Revert on overflow or in case x * y is negative.\\n   *\\n   * @param x signed 64.64-bit fixed point number\\n   * @param y signed 64.64-bit fixed point number\\n   * @return signed 64.64-bit fixed point number\\n   */\\n  function gavg (int128 x, int128 y) internal pure returns (int128) {\\n    unchecked {\\n      int256 m = int256 (x) * int256 (y);\\n      require (m >= 0);\\n      require (m <\\n          0x4000000000000000000000000000000000000000000000000000000000000000);\\n      return int128 (sqrtu (uint256 (m)));\\n    }\\n  }\\n\\n  /**\\n   * Calculate x^y assuming 0^0 is 1, where x is signed 64.64 fixed point number\\n   * and y is unsigned 256-bit integer number.  Revert on overflow.\\n   *\\n   * @param x signed 64.64-bit fixed point number\\n   * @param y uint256 value\\n   * @return signed 64.64-bit fixed point number\\n   */\\n  function pow (int128 x, uint256 y) internal pure returns (int128) {\\n    unchecked {\\n      bool negative = x < 0 && y & 1 == 1;\\n\\n      uint256 absX = uint128 (x < 0 ? -x : x);\\n      uint256 absResult;\\n      absResult = 0x100000000000000000000000000000000;\\n\\n      if (absX <= 0x10000000000000000) {\\n        absX <<= 63;\\n        while (y != 0) {\\n          if (y & 0x1 != 0) {\\n            absResult = absResult * absX >> 127;\\n          }\\n          absX = absX * absX >> 127;\\n\\n          if (y & 0x2 != 0) {\\n            absResult = absResult * absX >> 127;\\n          }\\n          absX = absX * absX >> 127;\\n\\n          if (y & 0x4 != 0) {\\n            absResult = absResult * absX >> 127;\\n          }\\n          absX = absX * absX >> 127;\\n\\n          if (y & 0x8 != 0) {\\n            absResult = absResult * absX >> 127;\\n          }\\n          absX = absX * absX >> 127;\\n\\n          y >>= 4;\\n        }\\n\\n        absResult >>= 64;\\n      } else {\\n        uint256 absXShift = 63;\\n        if (absX < 0x1000000000000000000000000) { absX <<= 32; absXShift -= 32; }\\n        if (absX < 0x10000000000000000000000000000) { absX <<= 16; absXShift -= 16; }\\n        if (absX < 0x1000000000000000000000000000000) { absX <<= 8; absXShift -= 8; }\\n        if (absX < 0x10000000000000000000000000000000) { absX <<= 4; absXShift -= 4; }\\n        if (absX < 0x40000000000000000000000000000000) { absX <<= 2; absXShift -= 2; }\\n        if (absX < 0x80000000000000000000000000000000) { absX <<= 1; absXShift -= 1; }\\n\\n        uint256 resultShift = 0;\\n        while (y != 0) {\\n          require (absXShift < 64);\\n\\n          if (y & 0x1 != 0) {\\n            absResult = absResult * absX >> 127;\\n            resultShift += absXShift;\\n            if (absResult > 0x100000000000000000000000000000000) {\\n              absResult >>= 1;\\n              resultShift += 1;\\n            }\\n          }\\n          absX = absX * absX >> 127;\\n          absXShift <<= 1;\\n          if (absX >= 0x100000000000000000000000000000000) {\\n              absX >>= 1;\\n              absXShift += 1;\\n          }\\n\\n          y >>= 1;\\n        }\\n\\n        require (resultShift < 64);\\n        absResult >>= 64 - resultShift;\\n      }\\n      int256 result = negative ? -int256 (absResult) : int256 (absResult);\\n      require (result >= MIN_64x64 && result <= MAX_64x64);\\n      return int128 (result);\\n    }\\n  }\\n\\n  /**\\n   * Calculate sqrt (x) rounding down.  Revert if x < 0.\\n   *\\n   * @param x signed 64.64-bit fixed point number\\n   * @return signed 64.64-bit fixed point number\\n   */\\n  function sqrt (int128 x) internal pure returns (int128) {\\n    unchecked {\\n      require (x >= 0);\\n      return int128 (sqrtu (uint256 (int256 (x)) << 64));\\n    }\\n  }\\n\\n  /**\\n   * Calculate binary logarithm of x.  Revert if x <= 0.\\n   *\\n   * @param x signed 64.64-bit fixed point number\\n   * @return signed 64.64-bit fixed point number\\n   */\\n  function log_2 (int128 x) internal pure returns (int128) {\\n    unchecked {\\n      require (x > 0);\\n\\n      int256 msb = 0;\\n      int256 xc = x;\\n      if (xc >= 0x10000000000000000) { xc >>= 64; msb += 64; }\\n      if (xc >= 0x100000000) { xc >>= 32; msb += 32; }\\n      if (xc >= 0x10000) { xc >>= 16; msb += 16; }\\n      if (xc >= 0x100) { xc >>= 8; msb += 8; }\\n      if (xc >= 0x10) { xc >>= 4; msb += 4; }\\n      if (xc >= 0x4) { xc >>= 2; msb += 2; }\\n      if (xc >= 0x2) msb += 1;  // No need to shift xc anymore\\n\\n      int256 result = msb - 64 << 64;\\n      uint256 ux = uint256 (int256 (x)) << uint256 (127 - msb);\\n      for (int256 bit = 0x8000000000000000; bit > 0; bit >>= 1) {\\n        ux *= ux;\\n        uint256 b = ux >> 255;\\n        ux >>= 127 + b;\\n        result += bit * int256 (b);\\n      }\\n\\n      return int128 (result);\\n    }\\n  }\\n\\n  /**\\n   * Calculate natural logarithm of x.  Revert if x <= 0.\\n   *\\n   * @param x signed 64.64-bit fixed point number\\n   * @return signed 64.64-bit fixed point number\\n   */\\n  function ln (int128 x) internal pure returns (int128) {\\n    unchecked {\\n      require (x > 0);\\n\\n      return int128 (int256 (\\n          uint256 (int256 (log_2 (x))) * 0xB17217F7D1CF79ABC9E3B39803F2F6AF >> 128));\\n    }\\n  }\\n\\n  /**\\n   * Calculate binary exponent of x.  Revert on overflow.\\n   *\\n   * @param x signed 64.64-bit fixed point number\\n   * @return signed 64.64-bit fixed point number\\n   */\\n  function exp_2 (int128 x) internal pure returns (int128) {\\n    unchecked {\\n      require (x < 0x400000000000000000); // Overflow\\n\\n      if (x < -0x400000000000000000) return 0; // Underflow\\n\\n      uint256 result = 0x80000000000000000000000000000000;\\n\\n      if (x & 0x8000000000000000 > 0)\\n        result = result * 0x16A09E667F3BCC908B2FB1366EA957D3E >> 128;\\n      if (x & 0x4000000000000000 > 0)\\n        result = result * 0x1306FE0A31B7152DE8D5A46305C85EDEC >> 128;\\n      if (x & 0x2000000000000000 > 0)\\n        result = result * 0x1172B83C7D517ADCDF7C8C50EB14A791F >> 128;\\n      if (x & 0x1000000000000000 > 0)\\n        result = result * 0x10B5586CF9890F6298B92B71842A98363 >> 128;\\n      if (x & 0x800000000000000 > 0)\\n        result = result * 0x1059B0D31585743AE7C548EB68CA417FD >> 128;\\n      if (x & 0x400000000000000 > 0)\\n        result = result * 0x102C9A3E778060EE6F7CACA4F7A29BDE8 >> 128;\\n      if (x & 0x200000000000000 > 0)\\n        result = result * 0x10163DA9FB33356D84A66AE336DCDFA3F >> 128;\\n      if (x & 0x100000000000000 > 0)\\n        result = result * 0x100B1AFA5ABCBED6129AB13EC11DC9543 >> 128;\\n      if (x & 0x80000000000000 > 0)\\n        result = result * 0x10058C86DA1C09EA1FF19D294CF2F679B >> 128;\\n      if (x & 0x40000000000000 > 0)\\n        result = result * 0x1002C605E2E8CEC506D21BFC89A23A00F >> 128;\\n      if (x & 0x20000000000000 > 0)\\n        result = result * 0x100162F3904051FA128BCA9C55C31E5DF >> 128;\\n      if (x & 0x10000000000000 > 0)\\n        result = result * 0x1000B175EFFDC76BA38E31671CA939725 >> 128;\\n      if (x & 0x8000000000000 > 0)\\n        result = result * 0x100058BA01FB9F96D6CACD4B180917C3D >> 128;\\n      if (x & 0x4000000000000 > 0)\\n        result = result * 0x10002C5CC37DA9491D0985C348C68E7B3 >> 128;\\n      if (x & 0x2000000000000 > 0)\\n        result = result * 0x1000162E525EE054754457D5995292026 >> 128;\\n      if (x & 0x1000000000000 > 0)\\n        result = result * 0x10000B17255775C040618BF4A4ADE83FC >> 128;\\n      if (x & 0x800000000000 > 0)\\n        result = result * 0x1000058B91B5BC9AE2EED81E9B7D4CFAB >> 128;\\n      if (x & 0x400000000000 > 0)\\n        result = result * 0x100002C5C89D5EC6CA4D7C8ACC017B7C9 >> 128;\\n      if (x & 0x200000000000 > 0)\\n        result = result * 0x10000162E43F4F831060E02D839A9D16D >> 128;\\n      if (x & 0x100000000000 > 0)\\n        result = result * 0x100000B1721BCFC99D9F890EA06911763 >> 128;\\n      if (x & 0x80000000000 > 0)\\n        result = result * 0x10000058B90CF1E6D97F9CA14DBCC1628 >> 128;\\n      if (x & 0x40000000000 > 0)\\n        result = result * 0x1000002C5C863B73F016468F6BAC5CA2B >> 128;\\n      if (x & 0x20000000000 > 0)\\n        result = result * 0x100000162E430E5A18F6119E3C02282A5 >> 128;\\n      if (x & 0x10000000000 > 0)\\n        result = result * 0x1000000B1721835514B86E6D96EFD1BFE >> 128;\\n      if (x & 0x8000000000 > 0)\\n        result = result * 0x100000058B90C0B48C6BE5DF846C5B2EF >> 128;\\n      if (x & 0x4000000000 > 0)\\n        result = result * 0x10000002C5C8601CC6B9E94213C72737A >> 128;\\n      if (x & 0x2000000000 > 0)\\n        result = result * 0x1000000162E42FFF037DF38AA2B219F06 >> 128;\\n      if (x & 0x1000000000 > 0)\\n        result = result * 0x10000000B17217FBA9C739AA5819F44F9 >> 128;\\n      if (x & 0x800000000 > 0)\\n        result = result * 0x1000000058B90BFCDEE5ACD3C1CEDC823 >> 128;\\n      if (x & 0x400000000 > 0)\\n        result = result * 0x100000002C5C85FE31F35A6A30DA1BE50 >> 128;\\n      if (x & 0x200000000 > 0)\\n        result = result * 0x10000000162E42FF0999CE3541B9FFFCF >> 128;\\n      if (x & 0x100000000 > 0)\\n        result = result * 0x100000000B17217F80F4EF5AADDA45554 >> 128;\\n      if (x & 0x80000000 > 0)\\n        result = result * 0x10000000058B90BFBF8479BD5A81B51AD >> 128;\\n      if (x & 0x40000000 > 0)\\n        result = result * 0x1000000002C5C85FDF84BD62AE30A74CC >> 128;\\n      if (x & 0x20000000 > 0)\\n        result = result * 0x100000000162E42FEFB2FED257559BDAA >> 128;\\n      if (x & 0x10000000 > 0)\\n        result = result * 0x1000000000B17217F7D5A7716BBA4A9AE >> 128;\\n      if (x & 0x8000000 > 0)\\n        result = result * 0x100000000058B90BFBE9DDBAC5E109CCE >> 128;\\n      if (x & 0x4000000 > 0)\\n        result = result * 0x10000000002C5C85FDF4B15DE6F17EB0D >> 128;\\n      if (x & 0x2000000 > 0)\\n        result = result * 0x1000000000162E42FEFA494F1478FDE05 >> 128;\\n      if (x & 0x1000000 > 0)\\n        result = result * 0x10000000000B17217F7D20CF927C8E94C >> 128;\\n      if (x & 0x800000 > 0)\\n        result = result * 0x1000000000058B90BFBE8F71CB4E4B33D >> 128;\\n      if (x & 0x400000 > 0)\\n        result = result * 0x100000000002C5C85FDF477B662B26945 >> 128;\\n      if (x & 0x200000 > 0)\\n        result = result * 0x10000000000162E42FEFA3AE53369388C >> 128;\\n      if (x & 0x100000 > 0)\\n        result = result * 0x100000000000B17217F7D1D351A389D40 >> 128;\\n      if (x & 0x80000 > 0)\\n        result = result * 0x10000000000058B90BFBE8E8B2D3D4EDE >> 128;\\n      if (x & 0x40000 > 0)\\n        result = result * 0x1000000000002C5C85FDF4741BEA6E77E >> 128;\\n      if (x & 0x20000 > 0)\\n        result = result * 0x100000000000162E42FEFA39FE95583C2 >> 128;\\n      if (x & 0x10000 > 0)\\n        result = result * 0x1000000000000B17217F7D1CFB72B45E1 >> 128;\\n      if (x & 0x8000 > 0)\\n        result = result * 0x100000000000058B90BFBE8E7CC35C3F0 >> 128;\\n      if (x & 0x4000 > 0)\\n        result = result * 0x10000000000002C5C85FDF473E242EA38 >> 128;\\n      if (x & 0x2000 > 0)\\n        result = result * 0x1000000000000162E42FEFA39F02B772C >> 128;\\n      if (x & 0x1000 > 0)\\n        result = result * 0x10000000000000B17217F7D1CF7D83C1A >> 128;\\n      if (x & 0x800 > 0)\\n        result = result * 0x1000000000000058B90BFBE8E7BDCBE2E >> 128;\\n      if (x & 0x400 > 0)\\n        result = result * 0x100000000000002C5C85FDF473DEA871F >> 128;\\n      if (x & 0x200 > 0)\\n        result = result * 0x10000000000000162E42FEFA39EF44D91 >> 128;\\n      if (x & 0x100 > 0)\\n        result = result * 0x100000000000000B17217F7D1CF79E949 >> 128;\\n      if (x & 0x80 > 0)\\n        result = result * 0x10000000000000058B90BFBE8E7BCE544 >> 128;\\n      if (x & 0x40 > 0)\\n        result = result * 0x1000000000000002C5C85FDF473DE6ECA >> 128;\\n      if (x & 0x20 > 0)\\n        result = result * 0x100000000000000162E42FEFA39EF366F >> 128;\\n      if (x & 0x10 > 0)\\n        result = result * 0x1000000000000000B17217F7D1CF79AFA >> 128;\\n      if (x & 0x8 > 0)\\n        result = result * 0x100000000000000058B90BFBE8E7BCD6D >> 128;\\n      if (x & 0x4 > 0)\\n        result = result * 0x10000000000000002C5C85FDF473DE6B2 >> 128;\\n      if (x & 0x2 > 0)\\n        result = result * 0x1000000000000000162E42FEFA39EF358 >> 128;\\n      if (x & 0x1 > 0)\\n        result = result * 0x10000000000000000B17217F7D1CF79AB >> 128;\\n\\n      result >>= uint256 (int256 (63 - (x >> 64)));\\n      require (result <= uint256 (int256 (MAX_64x64)));\\n\\n      return int128 (int256 (result));\\n    }\\n  }\\n\\n  /**\\n   * Calculate natural exponent of x.  Revert on overflow.\\n   *\\n   * @param x signed 64.64-bit fixed point number\\n   * @return signed 64.64-bit fixed point number\\n   */\\n  function exp (int128 x) internal pure returns (int128) {\\n    unchecked {\\n      require (x < 0x400000000000000000); // Overflow\\n\\n      if (x < -0x400000000000000000) return 0; // Underflow\\n\\n      return exp_2 (\\n          int128 (int256 (x) * 0x171547652B82FE1777D0FFDA0D23A7D12 >> 128));\\n    }\\n  }\\n\\n  /**\\n   * Calculate x / y rounding towards zero, where x and y are unsigned 256-bit\\n   * integer numbers.  Revert on overflow or when y is zero.\\n   *\\n   * @param x unsigned 256-bit integer number\\n   * @param y unsigned 256-bit integer number\\n   * @return unsigned 64.64-bit fixed point number\\n   */\\n  function divuu (uint256 x, uint256 y) private pure returns (uint128) {\\n    unchecked {\\n      require (y != 0);\\n\\n      uint256 result;\\n\\n      if (x <= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF)\\n        result = (x << 64) / y;\\n      else {\\n        uint256 msb = 192;\\n        uint256 xc = x >> 192;\\n        if (xc >= 0x100000000) { xc >>= 32; msb += 32; }\\n        if (xc >= 0x10000) { xc >>= 16; msb += 16; }\\n        if (xc >= 0x100) { xc >>= 8; msb += 8; }\\n        if (xc >= 0x10) { xc >>= 4; msb += 4; }\\n        if (xc >= 0x4) { xc >>= 2; msb += 2; }\\n        if (xc >= 0x2) msb += 1;  // No need to shift xc anymore\\n\\n        result = (x << 255 - msb) / ((y - 1 >> msb - 191) + 1);\\n        require (result <= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\\n\\n        uint256 hi = result * (y >> 128);\\n        uint256 lo = result * (y & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\\n\\n        uint256 xh = x >> 192;\\n        uint256 xl = x << 64;\\n\\n        if (xl < lo) xh -= 1;\\n        xl -= lo; // We rely on overflow behavior here\\n        lo = hi << 128;\\n        if (xl < lo) xh -= 1;\\n        xl -= lo; // We rely on overflow behavior here\\n\\n        assert (xh == hi >> 128);\\n\\n        result += xl / y;\\n      }\\n\\n      require (result <= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\\n      return uint128 (result);\\n    }\\n  }\\n\\n  /**\\n   * Calculate sqrt (x) rounding down, where x is unsigned 256-bit integer\\n   * number.\\n   *\\n   * @param x unsigned 256-bit integer number\\n   * @return unsigned 128-bit integer number\\n   */\\n  function sqrtu (uint256 x) private pure returns (uint128) {\\n    unchecked {\\n      if (x == 0) return 0;\\n      else {\\n        uint256 xx = x;\\n        uint256 r = 1;\\n        if (xx >= 0x100000000000000000000000000000000) { xx >>= 128; r <<= 64; }\\n        if (xx >= 0x10000000000000000) { xx >>= 64; r <<= 32; }\\n        if (xx >= 0x100000000) { xx >>= 32; r <<= 16; }\\n        if (xx >= 0x10000) { xx >>= 16; r <<= 8; }\\n        if (xx >= 0x100) { xx >>= 8; r <<= 4; }\\n        if (xx >= 0x10) { xx >>= 4; r <<= 2; }\\n        if (xx >= 0x8) { r <<= 1; }\\n        r = (r + x / r) >> 1;\\n        r = (r + x / r) >> 1;\\n        r = (r + x / r) >> 1;\\n        r = (r + x / r) >> 1;\\n        r = (r + x / r) >> 1;\\n        r = (r + x / r) >> 1;\\n        r = (r + x / r) >> 1; // Seven iterations should be enough\\n        uint256 r1 = x / r;\\n        return uint128 (r < r1 ? r : r1);\\n      }\\n    }\\n  }\\n}\",\"keccak256\":\"0xa2a0b3495973d412515344c4064fbf7983acffa549468b6044908b36e52a211c\",\"license\":\"BSD-4-Clause\"},\"cache/solpp-generated-contracts/DiceRoll.sol\":{\"content\":\"pragma solidity 0.8.3;\\n\\n// SPDX-License-Identifier: MIT\\n\\n\\n\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"./ABDKMath64x64.sol\\\";\\nimport \\\"./GamesCore.sol\\\";\\n\\ncontract DiceRoll is GamesCore {\\n    using SafeMath for uint256;\\n    using SafeMath for uint8;\\n    using SafeERC20 for IERC20;\\n    \\n    /// Maximum possible win\\n    uint256 public maxPayout;\\n\\n    /// Minimal possible choice\\n    uint256 public rangeMin;\\n    /// Maximal possible choice\\n    uint256 public rangeMax;\\n    uint256 public padding;\\n\\n    constructor() {\\n        croupier = msg.sender;\\n        profitTaker = msg.sender;\\n\\n        minBet = 1 ether;\\n        maxBet = 5000 ether;\\n        maxPayout = 10000 ether;\\n        rangeMin = 1;\\n        rangeMax = 10000;\\n        padding = 200;\\n        edge = 1;\\n\\n    }\\n\\n    // Check that the ape rate is between min and max bet\\n    modifier choiceInRange(uint256 _choice) {\\n        require(\\n            _choice >= rangeMin + padding,\\n            \\\"DiceRoll: Incorrect value for choice\\\"\\n        );\\n        require(\\n            _choice <= rangeMax + padding,\\n            \\\"DiceRoll: Incorrect value for choice\\\"\\n        );\\n        _;\\n    }\\n\\n    /**\\n        * @notice Calculates the coefficient for choice\\n    */\\n    function multiplier(bool _over, uint256 _choice)\\n        public\\n        view\\n        returns (int128)\\n    {\\n        uint256 winRangeLength = _over ? rangeMax - _choice + 1 : _choice;\\n        uint256 rangeLength = rangeMax - rangeMin + 1;\\n        int128 winChance = ABDKMath64x64.mul(\\n            ABDKMath64x64.div(\\n                ABDKMath64x64.fromUInt(winRangeLength),\\n                ABDKMath64x64.fromUInt(rangeLength)\\n            ),\\n            ABDKMath64x64.fromUInt(uint256(100))\\n        );\\n\\n        return\\n            ABDKMath64x64.div(\\n                ABDKMath64x64.fromUInt(uint256(100).sub(edge)),\\n                winChance\\n            );\\n    }\\n\\n    /**\\n        * @notice Calculates the prize when winning\\n        * @param _bet: Bet amount\\n    */\\n    function payout(\\n        bool _over,\\n        uint256 _choice,\\n        uint256 _bet\\n    ) public view returns (uint256) {\\n        return ABDKMath64x64.mulu(multiplier(_over, _choice), _bet);\\n    }\\n\\n    /**\\n        * @notice Add new game\\n        * @param _choice: Choice\\n        * @param _over: More or less than choice\\n        * @param _seed: Uniqual value for each game\\n    */\\n    function play(\\n        uint256 _choice,\\n        uint256 _betAmount,\\n        bool _over,\\n        bytes32 _seed\\n    ) public betInRange(_betAmount) choiceInRange(_choice) uniqueSeed(_seed) {\\n        uint256 possiblePrize = payout(_over, _choice, _betAmount);\\n        if (possiblePrize > maxPayout) {\\n            possiblePrize = maxPayout;\\n        }\\n        require(\\n            possiblePrize < token.balanceOf(address(this)),\\n            'DiceRoll: Insufficent funds on contract to cover the bet'\\n        );\\n\\n        token.safeTransferFrom(address(msg.sender), address(this), _betAmount);\\n\\n        totalGamesCount++;\\n        Game storage game = games[_seed];\\n\\n        game.id = totalGamesCount;\\n        game.player = msg.sender;\\n        game.bet = _betAmount;\\n        game.state = GameState.PENDING;\\n        game.over = _over;\\n        game.choice = _choice;\\n\\n        houseProfit += int256(game.bet);\\n        listGames.push(_seed);\\n\\n        emit GameCreated(game.player, game.bet, game.choice, _seed, game.over);\\n    }\\n\\n    /**\\n        * @notice Confirm the game, with seed\\n        * @param _seed: Uniqual value for each game\\n    */\\n    function confirm(\\n        bytes32 _seed,\\n        uint8 _v,\\n        bytes32 _r,\\n        bytes32 _s\\n    ) public override onlyCroupier {\\n        Game storage game = games[_seed];\\n\\n        require(game.id != 0, \\\"DiceRoll: Game doesn't exist\\\");\\n        require(\\n            game.state == GameState.PENDING,\\n            \\\"DiceRoll: Game already played\\\"\\n        );\\n\\n        bytes memory prefix = \\\"\\\\x19Ethereum Signed Message:\\\\n32\\\";\\n        bytes32 prefixedHash = keccak256(abi.encodePacked(prefix, _seed));\\n\\n        require(\\n            ecrecover(prefixedHash, _v, _r, _s) == croupier,\\n            \\\"DiceRoll: Invalid signature\\\"\\n        );\\n\\n        game.result = (uint256(_s) % rangeMax) + 1;\\n        int128 _multiplier = multiplier(game.over, game.choice);\\n\\n        if (\\n            (!game.over && (game.choice >= game.result)) ||\\n            (game.over && (game.choice <= game.result))\\n        ) {\\n            game.prize = payout(game.over, game.choice, game.bet);\\n\\n            if (game.prize > maxPayout) {\\n                game.prize = maxPayout;\\n            }\\n            token.safeTransfer(game.player, game.prize);\\n            houseProfit -= int256(game.prize);\\n            game.state = GameState.WON;\\n        } else {\\n            game.prize = 0;\\n            game.state = GameState.LOST;\\n        }\\n\\n        emit GamePlayed(\\n            game.player,\\n            game.id,\\n            ABDKMath64x64.toUInt(_multiplier),\\n            game.bet,\\n            game.prize,\\n            game.choice,\\n            game.result,\\n            _seed,\\n            game.over,\\n            game.state\\n        );\\n    }\\n\\n    /**\\n        * @notice Set new range for choice\\n        * @param _min: New rangeMin\\n        * @param _max: New rangeMax\\n        * @param _padding: New padding\\n    */\\n    function setChoiceRange(\\n        uint256 _min,\\n        uint256 _max,\\n        uint256 _padding\\n    ) public onlyOwner {\\n        rangeMin = _min;\\n        rangeMax = _max;\\n        padding = _padding;\\n    }\\n\\n    /**\\n        * @notice Set new maxPayout    \\n        * @param _maxPayout: New maxPayout\\n    */\\n    function setMaxPayout(uint256 _maxPayout) public onlyOwner {\\n        maxPayout = _maxPayout;\\n    }\\n}\\n\",\"keccak256\":\"0x0db13c5adb8f21110e1ba6eaafaa6a6e71381f86f9b374ceea6eea94ee2cf0b1\",\"license\":\"MIT\"},\"cache/solpp-generated-contracts/GamesCore.sol\":{\"content\":\"pragma solidity 0.8.3;\\n\\n// SPDX-License-Identifier: MIT\\n\\n\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\n\\nabstract contract GamesCore is Ownable {\\n    using SafeERC20 for IERC20;\\n\\n    struct Game {\\n        uint256 id;\\n        address player;\\n        uint256 bet;\\n        uint256 prize;\\n        uint256 choice;\\n        uint256 result;\\n        bool over;\\n        GameState state;\\n    }\\n\\n    enum GameState {\\n        PENDING,\\n        WON,\\n        LOST\\n    }\\n\\n    /// Number of all games\\n    uint256 public totalGamesCount;\\n    /// Minimal amount for bet\\n    uint256 public minBet;\\n    /// Maximal amount for bet\\n    uint256 public maxBet;\\n\\n    /// Profit from bets\\n    int256 public houseProfit;\\n\\n    /// Croupier\\n    address public croupier;\\n    /// Person how will receive houseProfit\\n    address public profitTaker;\\n    IERC20 public token =\\n        IERC20(0x9a946c3Cb16c08334b69aE249690C236Ebd5583E);\\n    /// Fee factor\\n    uint8 public edge;\\n\\n    /// Info of each game\\n    mapping(bytes32 => Game) public games;\\n\\n    /// Games seeds\\n    bytes32[] public listGames;\\n\\n    event GameCreated(\\n        address indexed player,\\n        uint256 bet,\\n        uint256 choice,\\n        bytes32 seed,\\n        bool over\\n    );\\n\\n    event GamePlayed(\\n        address indexed player,\\n        uint256 round,\\n        uint256 multiplier,\\n        uint256 bet,\\n        uint256 prize,\\n        uint256 choice,\\n        uint256 result,\\n        bytes32 indexed seed,\\n        bool over,\\n        GameState state\\n    );\\n\\n    // Modifier for functions that can only be ran by the croupier\\n    modifier onlyCroupier() {\\n        require(\\n            msg.sender == croupier,\\n            \\\"Only the croupier can run this function.\\\"\\n        );\\n        _;\\n    }\\n\\n    // Modifier for functions that can only be ran by the profit taker\\n    modifier onlyProfitTaker() {\\n        require(\\n            msg.sender == profitTaker,\\n            \\\"Only the profit taker can run this function.\\\"\\n        );\\n        _;\\n    }\\n\\n    // Check that the rate is between min and max bet\\n    modifier betInRange(uint256 _betAmount) {\\n        require(\\n            minBet <= _betAmount && _betAmount <= maxBet,\\n            \\\"Incorrect amount to bet\\\"\\n        );\\n        _;\\n    }\\n\\n    /// Check that sedd is unique\\n    modifier uniqueSeed(bytes32 _seed) {\\n        require(games[_seed].id == 0, \\\"Seed already used\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @notice Confirm the game, with seed\\n     * @param _seed: Uniqual value for each game\\n     */\\n    function confirm(\\n        bytes32 _seed,\\n        uint8 _v,\\n        bytes32 _r,\\n        bytes32 _s\\n    ) public virtual;\\n\\n    /**\\n     * @notice Set new minBet and maxBet\\n     * @param _min: New minBet\\n     * @param _max: New maxBet\\n     */\\n    function setBetRange(uint256 _min, uint256 _max) public onlyOwner {\\n        minBet = _min;\\n        maxBet = _max;\\n    }\\n\\n    /**\\n     * @notice Set new croupier\\n     * @param _addr: New croupier\\n     */\\n    function setCroupier(address _addr) public onlyOwner {\\n        croupier = _addr;\\n    }\\n\\n    /**\\n     * @notice Set new profitTaker\\n     * @param _profitTaker: New profitTaker\\n     */\\n    function setProfitTaker(address _profitTaker) public onlyOwner {\\n        profitTaker = _profitTaker;\\n    }\\n\\n    /**\\n     * @notice Set new edge\\n     * @param _e: New edge\\n     */\\n    function setEdge(uint8 _e) public onlyOwner {\\n        edge = _e;\\n    }\\n\\n    function setToken(address _token) external onlyOwner {\\n        require(_token != address(0x0));\\n        token = IERC20(_token);\\n    }\\n\\n    /**\\n     * @notice sends houseProfit to profitTaker\\n     */\\n    function withdrawProfit() public onlyProfitTaker {\\n        if (houseProfit > 0) {\\n            token.safeTransfer(profitTaker, uint256(houseProfit));\\n            houseProfit = 0;\\n        }\\n    }\\n\\n    /**\\n     * @notice sends contract's excessive balance to owner\\n     */\\n    function withdrawAll() public onlyOwner {\\n        if (houseProfit > 0) {\\n            token.safeTransfer(\\n                owner(),\\n                token.balanceOf(address(this)) - uint256(houseProfit)\\n            );\\n\\n            return;\\n        }\\n\\n        token.safeTransfer(owner(), token.balanceOf(address(this)));\\n    }\\n\\n    // Fallback function\\n    fallback() external payable {}\\n\\n    receive() external payable {}\\n}\\n\",\"keccak256\":\"0xa016cc4a237cf253bc72816902eceb275a4212d78596eb89e5d0a59f58fa8d10\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6080604052600780546001600160a01b031916739a946c3cb16c08334b69ae249690c236ebd5583e17905534801561003657600080fd5b50600080546001600160a01b031916339081178255604051909182917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a350600580546001600160a01b031990811633908117909255600680549091169091179055670de0b6b3a764000060025569010f0cf064dd5920000060035569021e19e0c9bab2400000600a556001600b55612710600c5560c8600d556007805460ff60a01b1916600160a01b179055611c51806100f56000396000f3fe6080604052600436106101d15760003560e01c8063853828b6116100f7578063adc2c98a11610095578063f579f88211610064578063f579f88214610502578063f593a38714610584578063f8bb201c1461059a578063fc0c546a146105ba576101d8565b8063adc2c98a14610479578063b00606a5146104ac578063e0176de8146104cc578063f2fde38b146104e2576101d8565b8063959499b6116100d1578063959499b6146104185780639619367d1461042d578063abae505014610443578063abeb11a914610463576101d8565b8063853828b6146103cf57806388fedd04146103e45780638da5cb5b146103fa576101d8565b80635bdbeb1f1161016f578063715018a61161013e578063715018a614610347578063722153731461035c57806372be41121461037c5780637f00e8b71461039c576101d8565b80635bdbeb1f146102af5780635c6c0939146102cf57806365fe09d7146103075780636b5c5f3914610327576101d8565b8063491da6ce116101ab578063491da6ce1461023957806350b89a87146102595780635668972b1461027957806356b4997f1461028f576101d8565b80631374df0b146101da578063144fa6d7146102035780632e5b216814610223576101d8565b366101d857005b005b3480156101e657600080fd5b506101f0600d5481565b6040519081526020015b60405180910390f35b34801561020f57600080fd5b506101d861021e366004611784565b6105da565b34801561022f57600080fd5b506101f060035481565b34801561024557600080fd5b506101d86102543660046118b1565b610642565b34801561026557600080fd5b506101d86102743660046118ef565b610993565b34801561028557600080fd5b506101f0600c5481565b34801561029b57600080fd5b506101d86102aa366004611826565b6109cb565b3480156102bb57600080fd5b506101f06102ca3660046117f2565b6109fa565b3480156102db57600080fd5b506006546102ef906001600160a01b031681565b6040516001600160a01b0390911681526020016101fa565b34801561031357600080fd5b506101f0610322366004611826565b610a19565b34801561033357600080fd5b506005546102ef906001600160a01b031681565b34801561035357600080fd5b506101d8610a3a565b34801561036857600080fd5b506101d8610377366004611784565b610aae565b34801561038857600080fd5b506101d861039736600461191a565b610afa565b3480156103a857600080fd5b506103bc6103b73660046117c7565b610b44565b604051600f9190910b81526020016101fa565b3480156103db57600080fd5b506101d8610bf5565b3480156103f057600080fd5b506101f060045481565b34801561040657600080fd5b506000546001600160a01b03166102ef565b34801561042457600080fd5b506101d8610d76565b34801561043957600080fd5b506101f060025481565b34801561044f57600080fd5b506101d861045e366004611890565b610e18565b34801561046f57600080fd5b506101f0600b5481565b34801561048557600080fd5b5060075461049a90600160a01b900460ff1681565b60405160ff90911681526020016101fa565b3480156104b857600080fd5b506101d86104c736600461183e565b610e4d565b3480156104d857600080fd5b506101f0600a5481565b3480156104ee57600080fd5b506101d86104fd366004611784565b611261565b34801561050e57600080fd5b5061057061051d366004611826565b600860205260009081526040902080546001820154600283015460038401546004850154600586015460069096015494956001600160a01b03909416949293919290919060ff8082169161010090041688565b6040516101fa989796959493929190611a40565b34801561059057600080fd5b506101f060015481565b3480156105a657600080fd5b506101d86105b5366004611784565b61134b565b3480156105c657600080fd5b506007546102ef906001600160a01b031681565b6000546001600160a01b0316331461060d5760405162461bcd60e51b815260040161060490611a0b565b60405180910390fd5b6001600160a01b03811661062057600080fd5b600780546001600160a01b0319166001600160a01b0392909216919091179055565b82806002541115801561065757506003548111155b6106a35760405162461bcd60e51b815260206004820152601760248201527f496e636f727265637420616d6f756e7420746f206265740000000000000000006044820152606401610604565b84600d54600b546106b49190611b1f565b8110156106d35760405162461bcd60e51b8152600401610604906119c7565b600d54600c546106e39190611b1f565b8111156107025760405162461bcd60e51b8152600401610604906119c7565b6000838152600860205260409020548390156107545760405162461bcd60e51b815260206004820152601160248201527014d9595908185b1c9958591e481d5cd959607a1b6044820152606401610604565b60006107618689896109fa565b9050600a548111156107725750600a545b6007546040516370a0823160e01b81523060048201526001600160a01b03909116906370a082319060240160206040518083038186803b1580156107b557600080fd5b505afa1580156107c9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107ed9190611878565b81106108615760405162461bcd60e51b815260206004820152603860248201527f44696365526f6c6c3a20496e737566666963656e742066756e6473206f6e206360448201527f6f6e747261637420746f20636f766572207468652062657400000000000000006064820152608401610604565b600754610879906001600160a01b031633308a611397565b6001805490600061088983611bb9565b90915550506000858152600860205260408120600180548255810180546001600160a01b031916331790556002810189905560068101805461ffff191689151517905560048082018b9055805491928a926108e5908490611ade565b909155505060098054600180820183556000929092527f6e1540171b6c0c960b71a7020d9f60077f6af931a8bbf590da0223dacf75c7af018790558101546002820154600483015460068401546040805193845260208401929092528282018a905260ff1615156060830152516001600160a01b03909216917f5c0023731903eb93130ada523196982a48d902eea3b24cc0b647c08d99007b609181900360800190a2505050505050505050565b6000546001600160a01b031633146109bd5760405162461bcd60e51b815260040161060490611a0b565b600b92909255600c55600d55565b6000546001600160a01b031633146109f55760405162461bcd60e51b815260040161060490611a0b565b600a55565b6000610a0f610a098585610b44565b83611408565b90505b9392505050565b60098181548110610a2957600080fd5b600091825260209091200154905081565b6000546001600160a01b03163314610a645760405162461bcd60e51b815260040161060490611a0b565b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b6000546001600160a01b03163314610ad85760405162461bcd60e51b815260040161060490611a0b565b600680546001600160a01b0319166001600160a01b0392909216919091179055565b6000546001600160a01b03163314610b245760405162461bcd60e51b815260040161060490611a0b565b6007805460ff909216600160a01b0260ff60a01b19909216919091179055565b60008083610b525782610b6b565b82600c54610b609190611b76565b610b6b906001611b1f565b90506000600b54600c54610b7f9190611b76565b610b8a906001611b1f565b90506000610bba610bab610b9d85611479565b610ba685611479565b61149c565b610bb56064611479565b611503565b600754909150610be990610be390610bde90606490600160a01b900460ff16611539565b611479565b8261149c565b93505050505b92915050565b6000546001600160a01b03163314610c1f5760405162461bcd60e51b815260040161060490611a0b565b60006004541315610ce457610cdf610c3f6000546001600160a01b031690565b600480546007546040516370a0823160e01b8152309381019390935290916001600160a01b03909116906370a082319060240160206040518083038186803b158015610c8a57600080fd5b505afa158015610c9e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cc29190611878565b610ccc9190611b76565b6007546001600160a01b03169190611545565b610d74565b610d74610cf96000546001600160a01b031690565b6007546040516370a0823160e01b81523060048201526001600160a01b03909116906370a082319060240160206040518083038186803b158015610d3c57600080fd5b505afa158015610d50573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ccc9190611878565b565b6006546001600160a01b03163314610de55760405162461bcd60e51b815260206004820152602c60248201527f4f6e6c79207468652070726f6669742074616b65722063616e2072756e20746860448201526b34b990333ab731ba34b7b71760a11b6064820152608401610604565b60006004541315610d7457600654600454600754610e11926001600160a01b0391821692911690611545565b6000600455565b6000546001600160a01b03163314610e425760405162461bcd60e51b815260040161060490611a0b565b600291909155600355565b6005546001600160a01b03163314610eb85760405162461bcd60e51b815260206004820152602860248201527f4f6e6c79207468652063726f75706965722063616e2072756e207468697320666044820152673ab731ba34b7b71760c11b6064820152608401610604565b60008481526008602052604090208054610f145760405162461bcd60e51b815260206004820152601c60248201527f44696365526f6c6c3a2047616d6520646f65736e2774206578697374000000006044820152606401610604565b60006006820154610100900460ff166002811115610f4257634e487b7160e01b600052602160045260246000fd5b14610f8f5760405162461bcd60e51b815260206004820152601d60248201527f44696365526f6c6c3a2047616d6520616c726561647920706c617965640000006044820152606401610604565b60006040518060400160405280601c81526020017f19457468657265756d205369676e6564204d6573736167653a0a333200000000815250905060008187604051602001610fde929190611972565b60408051808303601f1901815282825280516020918201206005546000855291840180845281905260ff8a169284019290925260608301889052608083018790529092506001600160a01b03169060019060a0016020604051602081039080840390855afa158015611054573d6000803e3d6000fd5b505050602060405103516001600160a01b0316146110b45760405162461bcd60e51b815260206004820152601b60248201527f44696365526f6c6c3a20496e76616c6964207369676e617475726500000000006044820152606401610604565b600c546110c19085611bd4565b6110cc906001611b1f565b6005840155600683015460048401546000916110ed9160ff90911690610b44565b600685015490915060ff1615801561110d57508360050154846004015410155b8061112f5750600684015460ff16801561112f57508360050154846004015411155b156111c0576006840154600485015460028601546111519260ff1691906109fa565b60038501819055600a54101561116a57600a5460038501555b6001840154600385015460075461118f926001600160a01b0391821692911690611545565b8360030154600460008282546111a59190611b37565b909155505060068401805461ff0019166101001790556111d9565b6000600385015560068401805461ff0019166102001790555b6001840154845489916001600160a01b0316907e867f710c53fead2d43f716b65ca12f0ecbef01e58edb8cd235073f91492431906112168561157a565b600289015460038a015460048b015460058c015460068d015460405161124f9796959493929160ff808216926101009092041690611a95565b60405180910390a35050505050505050565b6000546001600160a01b0316331461128b5760405162461bcd60e51b815260040161060490611a0b565b6001600160a01b0381166112f05760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610604565b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b6000546001600160a01b031633146113755760405162461bcd60e51b815260040161060490611a0b565b600580546001600160a01b0319166001600160a01b0392909216919091179055565b6040516001600160a01b03808516602483015283166044820152606481018290526114029085906323b872dd60e01b906084015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152611596565b50505050565b60008161141757506000610bef565b600083600f0b121561142857600080fd5b600f83900b6fffffffffffffffffffffffffffffffff8316810260401c90608084901c026001600160c01b0381111561146057600080fd5b60401b811981111561147157600080fd5b019392505050565b6000677fffffffffffffff82111561149057600080fd5b50604081901b5b919050565b600081600f0b600014156114af57600080fd5b600082600f0b604085600f0b901b816114d857634e487b7160e01b600052601260045260246000fd5b05905060016001607f1b031981128015906114fa575060016001607f1b038113155b610a1257600080fd5b6000600f83810b9083900b0260401d60016001607f1b031981128015906114fa575060016001607f1b03811315610a1257600080fd5b6000610a128284611b76565b6040516001600160a01b03831660248201526044810182905261157590849063a9059cbb60e01b906064016113cb565b505050565b60008082600f0b121561158c57600080fd5b50600f0b60401d90565b60006115eb826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166116689092919063ffffffff16565b805190915015611575578080602001905181019061160991906117ab565b6115755760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610604565b6060610a0f848460008585843b6116c15760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610604565b600080866001600160a01b031685876040516116dd9190611956565b60006040518083038185875af1925050503d806000811461171a576040519150601f19603f3d011682016040523d82523d6000602084013e61171f565b606091505b509150915061172f82828661173a565b979650505050505050565b60608315611749575081610a12565b8251156117595782518084602001fd5b8160405162461bcd60e51b81526004016106049190611994565b803560ff8116811461149757600080fd5b600060208284031215611795578081fd5b81356001600160a01b0381168114610a12578182fd5b6000602082840312156117bc578081fd5b8151610a1281611c0a565b600080604083850312156117d9578081fd5b82356117e481611c0a565b946020939093013593505050565b600080600060608486031215611806578081fd5b833561181181611c0a565b95602085013595506040909401359392505050565b600060208284031215611837578081fd5b5035919050565b60008060008060808587031215611853578081fd5b8435935061186360208601611773565b93969395505050506040820135916060013590565b600060208284031215611889578081fd5b5051919050565b600080604083850312156118a2578182fd5b50508035926020909101359150565b600080600080608085870312156118c6578384fd5b843593506020850135925060408501356118df81611c0a565b9396929550929360600135925050565b600080600060608486031215611903578283fd5b505081359360208301359350604090920135919050565b60006020828403121561192b578081fd5b610a1282611773565b6003811061195257634e487b7160e01b600052602160045260246000fd5b9052565b60008251611968818460208701611b8d565b9190910192915050565b60008351611984818460208801611b8d565b9190910191825250602001919050565b60006020825282518060208401526119b3816040850160208701611b8d565b601f01601f19169190910160400192915050565b60208082526024908201527f44696365526f6c6c3a20496e636f72726563742076616c756520666f722063686040820152636f69636560e01b606082015260800190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b8881526001600160a01b038816602082015260408101879052606081018690526080810185905260a0810184905282151560c08201526101008101611a8860e0830184611934565b9998505050505050505050565b60006101008201905089825267ffffffffffffffff891660208301528760408301528660608301528560808301528460a083015283151560c0830152611a8860e0830184611934565b600080821280156001600160ff1b0384900385131615611b0057611b00611bf4565b600160ff1b8390038412811615611b1957611b19611bf4565b50500190565b60008219821115611b3257611b32611bf4565b500190565b60008083128015600160ff1b850184121615611b5557611b55611bf4565b6001600160ff1b0384018313811615611b7057611b70611bf4565b50500390565b600082821015611b8857611b88611bf4565b500390565b60005b83811015611ba8578181015183820152602001611b90565b838111156114025750506000910152565b6000600019821415611bcd57611bcd611bf4565b5060010190565b600082611bef57634e487b7160e01b81526012600452602481fd5b500690565b634e487b7160e01b600052601160045260246000fd5b8015158114611c1857600080fd5b5056fea2646970667358221220295a76aa7ec95b610a9dd34be6970d82c4f5f8e85fd24e97b27d38fbdac9a77764736f6c63430008030033",
  "deployedBytecode": "0x6080604052600436106101d15760003560e01c8063853828b6116100f7578063adc2c98a11610095578063f579f88211610064578063f579f88214610502578063f593a38714610584578063f8bb201c1461059a578063fc0c546a146105ba576101d8565b8063adc2c98a14610479578063b00606a5146104ac578063e0176de8146104cc578063f2fde38b146104e2576101d8565b8063959499b6116100d1578063959499b6146104185780639619367d1461042d578063abae505014610443578063abeb11a914610463576101d8565b8063853828b6146103cf57806388fedd04146103e45780638da5cb5b146103fa576101d8565b80635bdbeb1f1161016f578063715018a61161013e578063715018a614610347578063722153731461035c57806372be41121461037c5780637f00e8b71461039c576101d8565b80635bdbeb1f146102af5780635c6c0939146102cf57806365fe09d7146103075780636b5c5f3914610327576101d8565b8063491da6ce116101ab578063491da6ce1461023957806350b89a87146102595780635668972b1461027957806356b4997f1461028f576101d8565b80631374df0b146101da578063144fa6d7146102035780632e5b216814610223576101d8565b366101d857005b005b3480156101e657600080fd5b506101f0600d5481565b6040519081526020015b60405180910390f35b34801561020f57600080fd5b506101d861021e366004611784565b6105da565b34801561022f57600080fd5b506101f060035481565b34801561024557600080fd5b506101d86102543660046118b1565b610642565b34801561026557600080fd5b506101d86102743660046118ef565b610993565b34801561028557600080fd5b506101f0600c5481565b34801561029b57600080fd5b506101d86102aa366004611826565b6109cb565b3480156102bb57600080fd5b506101f06102ca3660046117f2565b6109fa565b3480156102db57600080fd5b506006546102ef906001600160a01b031681565b6040516001600160a01b0390911681526020016101fa565b34801561031357600080fd5b506101f0610322366004611826565b610a19565b34801561033357600080fd5b506005546102ef906001600160a01b031681565b34801561035357600080fd5b506101d8610a3a565b34801561036857600080fd5b506101d8610377366004611784565b610aae565b34801561038857600080fd5b506101d861039736600461191a565b610afa565b3480156103a857600080fd5b506103bc6103b73660046117c7565b610b44565b604051600f9190910b81526020016101fa565b3480156103db57600080fd5b506101d8610bf5565b3480156103f057600080fd5b506101f060045481565b34801561040657600080fd5b506000546001600160a01b03166102ef565b34801561042457600080fd5b506101d8610d76565b34801561043957600080fd5b506101f060025481565b34801561044f57600080fd5b506101d861045e366004611890565b610e18565b34801561046f57600080fd5b506101f0600b5481565b34801561048557600080fd5b5060075461049a90600160a01b900460ff1681565b60405160ff90911681526020016101fa565b3480156104b857600080fd5b506101d86104c736600461183e565b610e4d565b3480156104d857600080fd5b506101f0600a5481565b3480156104ee57600080fd5b506101d86104fd366004611784565b611261565b34801561050e57600080fd5b5061057061051d366004611826565b600860205260009081526040902080546001820154600283015460038401546004850154600586015460069096015494956001600160a01b03909416949293919290919060ff8082169161010090041688565b6040516101fa989796959493929190611a40565b34801561059057600080fd5b506101f060015481565b3480156105a657600080fd5b506101d86105b5366004611784565b61134b565b3480156105c657600080fd5b506007546102ef906001600160a01b031681565b6000546001600160a01b0316331461060d5760405162461bcd60e51b815260040161060490611a0b565b60405180910390fd5b6001600160a01b03811661062057600080fd5b600780546001600160a01b0319166001600160a01b0392909216919091179055565b82806002541115801561065757506003548111155b6106a35760405162461bcd60e51b815260206004820152601760248201527f496e636f727265637420616d6f756e7420746f206265740000000000000000006044820152606401610604565b84600d54600b546106b49190611b1f565b8110156106d35760405162461bcd60e51b8152600401610604906119c7565b600d54600c546106e39190611b1f565b8111156107025760405162461bcd60e51b8152600401610604906119c7565b6000838152600860205260409020548390156107545760405162461bcd60e51b815260206004820152601160248201527014d9595908185b1c9958591e481d5cd959607a1b6044820152606401610604565b60006107618689896109fa565b9050600a548111156107725750600a545b6007546040516370a0823160e01b81523060048201526001600160a01b03909116906370a082319060240160206040518083038186803b1580156107b557600080fd5b505afa1580156107c9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107ed9190611878565b81106108615760405162461bcd60e51b815260206004820152603860248201527f44696365526f6c6c3a20496e737566666963656e742066756e6473206f6e206360448201527f6f6e747261637420746f20636f766572207468652062657400000000000000006064820152608401610604565b600754610879906001600160a01b031633308a611397565b6001805490600061088983611bb9565b90915550506000858152600860205260408120600180548255810180546001600160a01b031916331790556002810189905560068101805461ffff191689151517905560048082018b9055805491928a926108e5908490611ade565b909155505060098054600180820183556000929092527f6e1540171b6c0c960b71a7020d9f60077f6af931a8bbf590da0223dacf75c7af018790558101546002820154600483015460068401546040805193845260208401929092528282018a905260ff1615156060830152516001600160a01b03909216917f5c0023731903eb93130ada523196982a48d902eea3b24cc0b647c08d99007b609181900360800190a2505050505050505050565b6000546001600160a01b031633146109bd5760405162461bcd60e51b815260040161060490611a0b565b600b92909255600c55600d55565b6000546001600160a01b031633146109f55760405162461bcd60e51b815260040161060490611a0b565b600a55565b6000610a0f610a098585610b44565b83611408565b90505b9392505050565b60098181548110610a2957600080fd5b600091825260209091200154905081565b6000546001600160a01b03163314610a645760405162461bcd60e51b815260040161060490611a0b565b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b6000546001600160a01b03163314610ad85760405162461bcd60e51b815260040161060490611a0b565b600680546001600160a01b0319166001600160a01b0392909216919091179055565b6000546001600160a01b03163314610b245760405162461bcd60e51b815260040161060490611a0b565b6007805460ff909216600160a01b0260ff60a01b19909216919091179055565b60008083610b525782610b6b565b82600c54610b609190611b76565b610b6b906001611b1f565b90506000600b54600c54610b7f9190611b76565b610b8a906001611b1f565b90506000610bba610bab610b9d85611479565b610ba685611479565b61149c565b610bb56064611479565b611503565b600754909150610be990610be390610bde90606490600160a01b900460ff16611539565b611479565b8261149c565b93505050505b92915050565b6000546001600160a01b03163314610c1f5760405162461bcd60e51b815260040161060490611a0b565b60006004541315610ce457610cdf610c3f6000546001600160a01b031690565b600480546007546040516370a0823160e01b8152309381019390935290916001600160a01b03909116906370a082319060240160206040518083038186803b158015610c8a57600080fd5b505afa158015610c9e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cc29190611878565b610ccc9190611b76565b6007546001600160a01b03169190611545565b610d74565b610d74610cf96000546001600160a01b031690565b6007546040516370a0823160e01b81523060048201526001600160a01b03909116906370a082319060240160206040518083038186803b158015610d3c57600080fd5b505afa158015610d50573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ccc9190611878565b565b6006546001600160a01b03163314610de55760405162461bcd60e51b815260206004820152602c60248201527f4f6e6c79207468652070726f6669742074616b65722063616e2072756e20746860448201526b34b990333ab731ba34b7b71760a11b6064820152608401610604565b60006004541315610d7457600654600454600754610e11926001600160a01b0391821692911690611545565b6000600455565b6000546001600160a01b03163314610e425760405162461bcd60e51b815260040161060490611a0b565b600291909155600355565b6005546001600160a01b03163314610eb85760405162461bcd60e51b815260206004820152602860248201527f4f6e6c79207468652063726f75706965722063616e2072756e207468697320666044820152673ab731ba34b7b71760c11b6064820152608401610604565b60008481526008602052604090208054610f145760405162461bcd60e51b815260206004820152601c60248201527f44696365526f6c6c3a2047616d6520646f65736e2774206578697374000000006044820152606401610604565b60006006820154610100900460ff166002811115610f4257634e487b7160e01b600052602160045260246000fd5b14610f8f5760405162461bcd60e51b815260206004820152601d60248201527f44696365526f6c6c3a2047616d6520616c726561647920706c617965640000006044820152606401610604565b60006040518060400160405280601c81526020017f19457468657265756d205369676e6564204d6573736167653a0a333200000000815250905060008187604051602001610fde929190611972565b60408051808303601f1901815282825280516020918201206005546000855291840180845281905260ff8a169284019290925260608301889052608083018790529092506001600160a01b03169060019060a0016020604051602081039080840390855afa158015611054573d6000803e3d6000fd5b505050602060405103516001600160a01b0316146110b45760405162461bcd60e51b815260206004820152601b60248201527f44696365526f6c6c3a20496e76616c6964207369676e617475726500000000006044820152606401610604565b600c546110c19085611bd4565b6110cc906001611b1f565b6005840155600683015460048401546000916110ed9160ff90911690610b44565b600685015490915060ff1615801561110d57508360050154846004015410155b8061112f5750600684015460ff16801561112f57508360050154846004015411155b156111c0576006840154600485015460028601546111519260ff1691906109fa565b60038501819055600a54101561116a57600a5460038501555b6001840154600385015460075461118f926001600160a01b0391821692911690611545565b8360030154600460008282546111a59190611b37565b909155505060068401805461ff0019166101001790556111d9565b6000600385015560068401805461ff0019166102001790555b6001840154845489916001600160a01b0316907e867f710c53fead2d43f716b65ca12f0ecbef01e58edb8cd235073f91492431906112168561157a565b600289015460038a015460048b015460058c015460068d015460405161124f9796959493929160ff808216926101009092041690611a95565b60405180910390a35050505050505050565b6000546001600160a01b0316331461128b5760405162461bcd60e51b815260040161060490611a0b565b6001600160a01b0381166112f05760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610604565b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b6000546001600160a01b031633146113755760405162461bcd60e51b815260040161060490611a0b565b600580546001600160a01b0319166001600160a01b0392909216919091179055565b6040516001600160a01b03808516602483015283166044820152606481018290526114029085906323b872dd60e01b906084015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152611596565b50505050565b60008161141757506000610bef565b600083600f0b121561142857600080fd5b600f83900b6fffffffffffffffffffffffffffffffff8316810260401c90608084901c026001600160c01b0381111561146057600080fd5b60401b811981111561147157600080fd5b019392505050565b6000677fffffffffffffff82111561149057600080fd5b50604081901b5b919050565b600081600f0b600014156114af57600080fd5b600082600f0b604085600f0b901b816114d857634e487b7160e01b600052601260045260246000fd5b05905060016001607f1b031981128015906114fa575060016001607f1b038113155b610a1257600080fd5b6000600f83810b9083900b0260401d60016001607f1b031981128015906114fa575060016001607f1b03811315610a1257600080fd5b6000610a128284611b76565b6040516001600160a01b03831660248201526044810182905261157590849063a9059cbb60e01b906064016113cb565b505050565b60008082600f0b121561158c57600080fd5b50600f0b60401d90565b60006115eb826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166116689092919063ffffffff16565b805190915015611575578080602001905181019061160991906117ab565b6115755760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610604565b6060610a0f848460008585843b6116c15760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610604565b600080866001600160a01b031685876040516116dd9190611956565b60006040518083038185875af1925050503d806000811461171a576040519150601f19603f3d011682016040523d82523d6000602084013e61171f565b606091505b509150915061172f82828661173a565b979650505050505050565b60608315611749575081610a12565b8251156117595782518084602001fd5b8160405162461bcd60e51b81526004016106049190611994565b803560ff8116811461149757600080fd5b600060208284031215611795578081fd5b81356001600160a01b0381168114610a12578182fd5b6000602082840312156117bc578081fd5b8151610a1281611c0a565b600080604083850312156117d9578081fd5b82356117e481611c0a565b946020939093013593505050565b600080600060608486031215611806578081fd5b833561181181611c0a565b95602085013595506040909401359392505050565b600060208284031215611837578081fd5b5035919050565b60008060008060808587031215611853578081fd5b8435935061186360208601611773565b93969395505050506040820135916060013590565b600060208284031215611889578081fd5b5051919050565b600080604083850312156118a2578182fd5b50508035926020909101359150565b600080600080608085870312156118c6578384fd5b843593506020850135925060408501356118df81611c0a565b9396929550929360600135925050565b600080600060608486031215611903578283fd5b505081359360208301359350604090920135919050565b60006020828403121561192b578081fd5b610a1282611773565b6003811061195257634e487b7160e01b600052602160045260246000fd5b9052565b60008251611968818460208701611b8d565b9190910192915050565b60008351611984818460208801611b8d565b9190910191825250602001919050565b60006020825282518060208401526119b3816040850160208701611b8d565b601f01601f19169190910160400192915050565b60208082526024908201527f44696365526f6c6c3a20496e636f72726563742076616c756520666f722063686040820152636f69636560e01b606082015260800190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b8881526001600160a01b038816602082015260408101879052606081018690526080810185905260a0810184905282151560c08201526101008101611a8860e0830184611934565b9998505050505050505050565b60006101008201905089825267ffffffffffffffff891660208301528760408301528660608301528560808301528460a083015283151560c0830152611a8860e0830184611934565b600080821280156001600160ff1b0384900385131615611b0057611b00611bf4565b600160ff1b8390038412811615611b1957611b19611bf4565b50500190565b60008219821115611b3257611b32611bf4565b500190565b60008083128015600160ff1b850184121615611b5557611b55611bf4565b6001600160ff1b0384018313811615611b7057611b70611bf4565b50500390565b600082821015611b8857611b88611bf4565b500390565b60005b83811015611ba8578181015183820152602001611b90565b838111156114025750506000910152565b6000600019821415611bcd57611bcd611bf4565b5060010190565b600082611bef57634e487b7160e01b81526012600452602481fd5b500690565b634e487b7160e01b600052601160045260246000fd5b8015158114611c1857600080fd5b5056fea2646970667358221220295a76aa7ec95b610a9dd34be6970d82c4f5f8e85fd24e97b27d38fbdac9a77764736f6c63430008030033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "confirm(bytes32,uint8,bytes32,bytes32)": {
        "params": {
          "_seed": ": Uniqual value for each game"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "payout(bool,uint256,uint256)": {
        "params": {
          "_bet": ": Bet amount"
        }
      },
      "play(uint256,uint256,bool,bytes32)": {
        "params": {
          "_choice": ": Choice",
          "_over": ": More or less than choice",
          "_seed": ": Uniqual value for each game"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "setBetRange(uint256,uint256)": {
        "params": {
          "_max": ": New maxBet",
          "_min": ": New minBet"
        }
      },
      "setChoiceRange(uint256,uint256,uint256)": {
        "params": {
          "_max": ": New rangeMax",
          "_min": ": New rangeMin",
          "_padding": ": New padding"
        }
      },
      "setCroupier(address)": {
        "params": {
          "_addr": ": New croupier"
        }
      },
      "setEdge(uint8)": {
        "params": {
          "_e": ": New edge"
        }
      },
      "setMaxPayout(uint256)": {
        "params": {
          "_maxPayout": ": New maxPayout"
        }
      },
      "setProfitTaker(address)": {
        "params": {
          "_profitTaker": ": New profitTaker"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "confirm(bytes32,uint8,bytes32,bytes32)": {
        "notice": "Confirm the game, with seed"
      },
      "croupier()": {
        "notice": "Croupier"
      },
      "edge()": {
        "notice": "Fee factor"
      },
      "games(bytes32)": {
        "notice": "Info of each game"
      },
      "houseProfit()": {
        "notice": "Profit from bets"
      },
      "listGames(uint256)": {
        "notice": "Games seeds"
      },
      "maxBet()": {
        "notice": "Maximal amount for bet"
      },
      "maxPayout()": {
        "notice": "Maximum possible win"
      },
      "minBet()": {
        "notice": "Minimal amount for bet"
      },
      "multiplier(bool,uint256)": {
        "notice": "Calculates the coefficient for choice"
      },
      "payout(bool,uint256,uint256)": {
        "notice": "Calculates the prize when winning"
      },
      "play(uint256,uint256,bool,bytes32)": {
        "notice": "Add new game"
      },
      "profitTaker()": {
        "notice": "Person how will receive houseProfit"
      },
      "rangeMax()": {
        "notice": "Maximal possible choice"
      },
      "rangeMin()": {
        "notice": "Minimal possible choice"
      },
      "setBetRange(uint256,uint256)": {
        "notice": "Set new minBet and maxBet"
      },
      "setChoiceRange(uint256,uint256,uint256)": {
        "notice": "Set new range for choice"
      },
      "setCroupier(address)": {
        "notice": "Set new croupier"
      },
      "setEdge(uint8)": {
        "notice": "Set new edge"
      },
      "setMaxPayout(uint256)": {
        "notice": "Set new maxPayout    "
      },
      "setProfitTaker(address)": {
        "notice": "Set new profitTaker"
      },
      "totalGamesCount()": {
        "notice": "Number of all games"
      },
      "withdrawAll()": {
        "notice": "sends contract's excessive balance to owner"
      },
      "withdrawProfit()": {
        "notice": "sends houseProfit to profitTaker"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "cache/solpp-generated-contracts/DiceRoll.sol:DiceRoll",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 4782,
        "contract": "cache/solpp-generated-contracts/DiceRoll.sol:DiceRoll",
        "label": "totalGamesCount",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 4785,
        "contract": "cache/solpp-generated-contracts/DiceRoll.sol:DiceRoll",
        "label": "minBet",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 4788,
        "contract": "cache/solpp-generated-contracts/DiceRoll.sol:DiceRoll",
        "label": "maxBet",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 4791,
        "contract": "cache/solpp-generated-contracts/DiceRoll.sol:DiceRoll",
        "label": "houseProfit",
        "offset": 0,
        "slot": "4",
        "type": "t_int256"
      },
      {
        "astId": 4794,
        "contract": "cache/solpp-generated-contracts/DiceRoll.sol:DiceRoll",
        "label": "croupier",
        "offset": 0,
        "slot": "5",
        "type": "t_address"
      },
      {
        "astId": 4797,
        "contract": "cache/solpp-generated-contracts/DiceRoll.sol:DiceRoll",
        "label": "profitTaker",
        "offset": 0,
        "slot": "6",
        "type": "t_address"
      },
      {
        "astId": 4803,
        "contract": "cache/solpp-generated-contracts/DiceRoll.sol:DiceRoll",
        "label": "token",
        "offset": 0,
        "slot": "7",
        "type": "t_contract(IERC20)187"
      },
      {
        "astId": 4806,
        "contract": "cache/solpp-generated-contracts/DiceRoll.sol:DiceRoll",
        "label": "edge",
        "offset": 20,
        "slot": "7",
        "type": "t_uint8"
      },
      {
        "astId": 4812,
        "contract": "cache/solpp-generated-contracts/DiceRoll.sol:DiceRoll",
        "label": "games",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_bytes32,t_struct(Game)4775_storage)"
      },
      {
        "astId": 4816,
        "contract": "cache/solpp-generated-contracts/DiceRoll.sol:DiceRoll",
        "label": "listGames",
        "offset": 0,
        "slot": "9",
        "type": "t_array(t_bytes32)dyn_storage"
      },
      {
        "astId": 4201,
        "contract": "cache/solpp-generated-contracts/DiceRoll.sol:DiceRoll",
        "label": "maxPayout",
        "offset": 0,
        "slot": "10",
        "type": "t_uint256"
      },
      {
        "astId": 4204,
        "contract": "cache/solpp-generated-contracts/DiceRoll.sol:DiceRoll",
        "label": "rangeMin",
        "offset": 0,
        "slot": "11",
        "type": "t_uint256"
      },
      {
        "astId": 4207,
        "contract": "cache/solpp-generated-contracts/DiceRoll.sol:DiceRoll",
        "label": "rangeMax",
        "offset": 0,
        "slot": "12",
        "type": "t_uint256"
      },
      {
        "astId": 4209,
        "contract": "cache/solpp-generated-contracts/DiceRoll.sol:DiceRoll",
        "label": "padding",
        "offset": 0,
        "slot": "13",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IERC20)187": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_enum(GameState)4779": {
        "encoding": "inplace",
        "label": "enum GamesCore.GameState",
        "numberOfBytes": "1"
      },
      "t_int256": {
        "encoding": "inplace",
        "label": "int256",
        "numberOfBytes": "32"
      },
      "t_mapping(t_bytes32,t_struct(Game)4775_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct GamesCore.Game)",
        "numberOfBytes": "32",
        "value": "t_struct(Game)4775_storage"
      },
      "t_struct(Game)4775_storage": {
        "encoding": "inplace",
        "label": "struct GamesCore.Game",
        "members": [
          {
            "astId": 4759,
            "contract": "cache/solpp-generated-contracts/DiceRoll.sol:DiceRoll",
            "label": "id",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 4761,
            "contract": "cache/solpp-generated-contracts/DiceRoll.sol:DiceRoll",
            "label": "player",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 4763,
            "contract": "cache/solpp-generated-contracts/DiceRoll.sol:DiceRoll",
            "label": "bet",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 4765,
            "contract": "cache/solpp-generated-contracts/DiceRoll.sol:DiceRoll",
            "label": "prize",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 4767,
            "contract": "cache/solpp-generated-contracts/DiceRoll.sol:DiceRoll",
            "label": "choice",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 4769,
            "contract": "cache/solpp-generated-contracts/DiceRoll.sol:DiceRoll",
            "label": "result",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 4771,
            "contract": "cache/solpp-generated-contracts/DiceRoll.sol:DiceRoll",
            "label": "over",
            "offset": 0,
            "slot": "6",
            "type": "t_bool"
          },
          {
            "astId": 4774,
            "contract": "cache/solpp-generated-contracts/DiceRoll.sol:DiceRoll",
            "label": "state",
            "offset": 1,
            "slot": "6",
            "type": "t_enum(GameState)4779"
          }
        ],
        "numberOfBytes": "224"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}