{
  "address": "0xD14514373c59Cb3F51B6321fd4689611f883D2f0",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "player",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "bet",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "choice",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "seed",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "over",
          "type": "bool"
        }
      ],
      "name": "GameCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "player",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "round",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "multiplier",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "bet",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "prize",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "choice",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "result",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "seed",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "over",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "enum GamesCore.GameState",
          "name": "state",
          "type": "uint8"
        }
      ],
      "name": "GamePlayed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_seed",
          "type": "bytes32"
        },
        {
          "internalType": "uint8",
          "name": "_v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "_r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "_s",
          "type": "bytes32"
        }
      ],
      "name": "confirm",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "croupier",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "edge",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "games",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "address payable",
          "name": "player",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "bet",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "prize",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "choice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "result",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "over",
          "type": "bool"
        },
        {
          "internalType": "enum GamesCore.GameState",
          "name": "state",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "houseProfitEther",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "listGames",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxBet",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minBet",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_choice",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "_seed",
          "type": "bytes32"
        }
      ],
      "name": "play",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "profitTaker",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_min",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_max",
          "type": "uint256"
        }
      ],
      "name": "setBetRange",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_addr",
          "type": "address"
        }
      ],
      "name": "setCroupier",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "_e",
          "type": "uint8"
        }
      ],
      "name": "setEdge",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_profitTaker",
          "type": "address"
        }
      ],
      "name": "setProfitTaker",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "takeProfit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalGamesCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xd2375c210d2d2e911e7d202c7bbaf28df0dac64f1f4ea97bf988e097cb25a321",
  "receipt": {
    "to": null,
    "from": "0x5f2cFa351B7d4b973d341fdB2cB154794c0a899c",
    "contractAddress": "0xD14514373c59Cb3F51B6321fd4689611f883D2f0",
    "transactionIndex": 0,
    "gasUsed": "1149451",
    "logsBloom": "0x
    "blockHash": "0x48c19a1e85e43aae6bc9498e8b9099c64c2070569dfc37fb309e3ac020ff1f54",
    "transactionHash": "0xd2375c210d2d2e911e7d202c7bbaf28df0dac64f1f4ea97bf988e097cb25a321",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 9164134,
        "transactionHash": "0xd2375c210d2d2e911e7d202c7bbaf28df0dac64f1f4ea97bf988e097cb25a321",
        "address": "0xD14514373c59Cb3F51B6321fd4689611f883D2f0",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000005f2cfa351b7d4b973d341fdb2cb154794c0a899c"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x48c19a1e85e43aae6bc9498e8b9099c64c2070569dfc37fb309e3ac020ff1f54"
      }
    ],
    "blockNumber": 9164134,
    "cumulativeGasUsed": "1149451",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "340be554b77746b815aac72f9eb99717",
  "metadata": "{\"compiler\":{\"version\":\"0.8.3+commit.8d00100c\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bet\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"choice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"seed\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"over\",\"type\":\"bool\"}],\"name\":\"GameCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"round\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"multiplier\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bet\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"prize\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"choice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"result\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"seed\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"over\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"enum GamesCore.GameState\",\"name\":\"state\",\"type\":\"uint8\"}],\"name\":\"GamePlayed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_seed\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"_v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"_r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_s\",\"type\":\"bytes32\"}],\"name\":\"confirm\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"croupier\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"edge\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"games\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"player\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"bet\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"prize\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"choice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"result\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"over\",\"type\":\"bool\"},{\"internalType\":\"enum GamesCore.GameState\",\"name\":\"state\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"houseProfitEther\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"listGames\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxBet\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minBet\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_choice\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_seed\",\"type\":\"bytes32\"}],\"name\":\"play\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"profitTaker\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_min\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_max\",\"type\":\"uint256\"}],\"name\":\"setBetRange\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"setCroupier\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_e\",\"type\":\"uint8\"}],\"name\":\"setEdge\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_profitTaker\",\"type\":\"address\"}],\"name\":\"setProfitTaker\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"takeProfit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalGamesCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"confirm(bytes32,uint8,bytes32,bytes32)\":{\"params\":{\"_seed\":\": Uniqual value for each game\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"play(uint256,bytes32)\":{\"params\":{\"_seed\":\": Uniqual value for each game\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"setBetRange(uint256,uint256)\":{\"params\":{\"_max\":\": New maxBet\",\"_min\":\": New minBet\"}},\"setCroupier(address)\":{\"params\":{\"_addr\":\": New croupier\"}},\"setEdge(uint8)\":{\"params\":{\"_e\":\": New edge\"}},\"setProfitTaker(address)\":{\"params\":{\"_profitTaker\":\": New profitTaker\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"confirm(bytes32,uint8,bytes32,bytes32)\":{\"notice\":\"Confirm the game, with seed\"},\"croupier()\":{\"notice\":\"Croupier\"},\"edge()\":{\"notice\":\"Fee factor\"},\"games(bytes32)\":{\"notice\":\"Info of each game\"},\"houseProfitEther()\":{\"notice\":\"Profit from bets\"},\"listGames(uint256)\":{\"notice\":\"Games seeds\"},\"maxBet()\":{\"notice\":\"Maximal amount for bet\"},\"minBet()\":{\"notice\":\"Minimal amount for bet\"},\"play(uint256,bytes32)\":{\"notice\":\"Add new game\"},\"profitTaker()\":{\"notice\":\"Person how will receive houseProfitEther\"},\"setBetRange(uint256,uint256)\":{\"notice\":\"Set new minBet and maxBet\"},\"setCroupier(address)\":{\"notice\":\"Set new croupier\"},\"setEdge(uint8)\":{\"notice\":\"Set new edge    \"},\"setProfitTaker(address)\":{\"notice\":\"Set new profitTaker\"},\"takeProfit()\":{\"notice\":\"sends houseProfitEther to profitTaker\"},\"totalGamesCount()\":{\"notice\":\"Number of all games\"},\"withdraw()\":{\"notice\":\"sends contract's excessive balance to owner\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"cache/solpp-generated-contracts/CoinFlip.sol\":\"CoinFlip\"},\"evmVersion\":\"istanbul\",\"libraries\":{\":__CACHE_BREAKER__\":\"0x00000000d41867734bbee4c6863d9255b2b06ac1\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\",\"keccak256\":\"0x1cae4f85f114ff17b90414f5da67365b1d00337abb5bce9bf944eb78a2c0673c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xf930d2df426bfcfc1f7415be724f04081c96f4fb9ec8d0e3a521c07692dface0\",\"license\":\"MIT\"},\"cache/solpp-generated-contracts/CoinFlip.sol\":{\"content\":\"pragma solidity 0.8.3;\\n\\n// SPDX-License-Identifier: MIT\\n\\n\\n\\nimport \\\"./GamesCore.sol\\\";\\n\\ncontract CoinFlip is GamesCore {\\n    constructor() {\\n        croupier = msg.sender;\\n        profitTaker = msg.sender;\\n\\n        edge = 5;\\n        minBet = 0.1 ether;\\n        maxBet = 10 ether;\\n    }\\n\\n    /**\\n        * @notice Add new game\\n        * @param _seed: Uniqual value for each game\\n    */\\n    function play(uint256 _choice, bytes32 _seed) public payable betInRange uniqueSeed(_seed) {\\n        require(_choice == 0 || _choice == 1, 'Choice should be 0 or 1');\\n\\n        uint256 possiblePrize = msg.value * (200 - edge) / 100;\\n        require(\\n            possiblePrize < address(this).balance,\\n            'Insufficent funds on contract to cover the bet'\\n        );\\n\\n        Game storage game = games[_seed];\\n\\n        totalGamesCount++;\\n\\n        game.id = totalGamesCount;\\n        game.player = payable(msg.sender);\\n        game.bet = msg.value;\\n        game.state = GameState.PENDING;\\n\\n        game.choice = _choice;\\n\\n        houseProfitEther += int256(game.bet);\\n        listGames.push(_seed);\\n\\n        emit GameCreated(\\n            game.player,\\n            game.bet,\\n            game.choice,\\n            _seed,\\n            true\\n        );\\n    }\\n\\n    /**\\n        * @notice Confirm the game, with seed\\n        * @param _seed: Uniqual value for each game\\n    */\\n    function confirm(\\n        bytes32 _seed,\\n        uint8 _v,\\n        bytes32 _r,\\n        bytes32 _s\\n    ) public override onlyCroupier {\\n        Game storage game = games[_seed];\\n\\n        require(game.state == GameState.PENDING, 'Game already played');\\n\\n        bytes memory prefix = \\\"\\\\x19Ethereum Signed Message:\\\\n32\\\";\\n        bytes32 prefixedHash = keccak256(abi.encodePacked(prefix, _seed));\\n\\n        require(ecrecover(prefixedHash, _v, _r, _s) == croupier, 'Invalid signature');\\n\\n        game.result = uint256(_s) % 2;\\n        \\n        if (game.choice == game.result) {\\n            game.prize = game.bet * (200 - edge) / 100;\\n            game.state = GameState.WON;\\n            \\n            houseProfitEther -= int256(game.prize);\\n            \\n            game.player.transfer(game.prize);\\n        } else {\\n            game.prize = 0;\\n            game.state = GameState.LOST;\\n        }\\n\\n        emit GamePlayed(\\n            game.player,\\n            game.id,\\n            (200 - edge),\\n            game.bet,\\n            game.prize,\\n            game.choice,\\n            game.result,\\n            _seed,\\n            true,\\n            game.state\\n        );\\n    }\\n}\",\"keccak256\":\"0x3d62f8fcddaa552e7afd8515056694864e6333ae3ee9095145ee1c9bf36095ef\",\"license\":\"MIT\"},\"cache/solpp-generated-contracts/GamesCore.sol\":{\"content\":\"pragma solidity 0.8.3;\\n\\n// SPDX-License-Identifier: MIT\\n\\n\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\nabstract contract GamesCore is Ownable {\\n    struct Game {\\n        uint256 id;\\n        address payable player;\\n        uint256 bet;\\n        uint256 prize;\\n        uint256 choice;\\n        uint256 result;\\n        bool over;\\n        GameState state;\\n    }\\n\\n    enum GameState {\\n        PENDING,\\n        WON,\\n        LOST\\n    }\\n\\n    /// Number of all games\\n    uint256 public totalGamesCount;\\n    /// Minimal amount for bet\\n    uint256 public minBet;\\n    /// Maximal amount for bet\\n    uint256 public maxBet;\\n\\n    /// Profit from bets\\n    int256 public houseProfitEther;\\n\\n    /// Croupier\\n    address public croupier;\\n    /// Person how will receive houseProfitEther\\n    address public profitTaker;\\n    /// Fee factor\\n    uint8 public edge;\\n\\n    /// Info of each game\\n    mapping(bytes32 => Game) public games;\\n\\n    /// Games seeds\\n    bytes32[] public listGames;\\n\\n    event GameCreated(\\n        address indexed player,\\n        uint256 bet,\\n        uint256 choice,\\n        bytes32 seed,\\n        bool over\\n    );\\n\\n    event GamePlayed(\\n        address indexed player,\\n        uint256 round,\\n        uint256 multiplier,\\n        uint256 bet,\\n        uint256 prize,\\n        uint256 choice,\\n        uint256 result,\\n        bytes32 indexed seed,\\n        bool over,\\n        GameState state\\n    );\\n\\n    // Modifier for functions that can only be ran by the croupier\\n    modifier onlyCroupier() {\\n        require(\\n            msg.sender == croupier,\\n            \\\"Only the croupier can run this function.\\\"\\n        );\\n        _;\\n    }\\n\\n    // Modifier for functions that can only be ran by the profit taker\\n    modifier onlyProfitTaker() {\\n        require(\\n            msg.sender == profitTaker,\\n            \\\"Only the profit taker can run this function.\\\"\\n        );\\n        _;\\n    }\\n\\n    // Check that the rate is between min and max bet\\n    modifier betInRange() {\\n        require(\\n            minBet <= msg.value && msg.value <= maxBet,\\n            \\\"Incorrect amount to bet\\\"\\n        );\\n        _;\\n    }\\n\\n    /// Check that sedd is unique\\n    modifier uniqueSeed(bytes32 _seed) {\\n        require(games[_seed].id == 0, \\\"Seed already used\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @notice Confirm the game, with seed\\n     * @param _seed: Uniqual value for each game\\n     */\\n    function confirm(\\n        bytes32 _seed,\\n        uint8 _v,\\n        bytes32 _r,\\n        bytes32 _s\\n    ) public virtual;\\n\\n    /**\\n     * @notice Set new minBet and maxBet\\n     * @param _min: New minBet\\n     * @param _max: New maxBet\\n     */\\n    function setBetRange(uint256 _min, uint256 _max) public onlyOwner {\\n        minBet = _min;\\n        maxBet = _max;\\n    }\\n\\n    /**\\n     * @notice Set new croupier\\n     * @param _addr: New croupier\\n     */\\n    function setCroupier(address _addr) public onlyOwner {\\n        croupier = _addr;\\n    }\\n\\n    /**\\n     * @notice Set new profitTaker\\n     * @param _profitTaker: New profitTaker\\n     */\\n    function setProfitTaker(address _profitTaker) public onlyOwner {\\n        profitTaker = _profitTaker;\\n    }\\n\\n    /**\\n        * @notice Set new edge    \\n        * @param _e: New edge\\n    */\\n    function setEdge(uint8 _e) public onlyOwner {\\n        edge = _e;\\n    }\\n\\n    /**\\n     * @notice sends houseProfitEther to profitTaker\\n     */\\n    function takeProfit() public onlyProfitTaker {\\n        if (houseProfitEther > 0) {\\n            payable(profitTaker).transfer(uint256(houseProfitEther));\\n            houseProfitEther = 0;\\n        }\\n    }\\n\\n    /**\\n     * @notice sends contract's excessive balance to owner\\n     */\\n    function withdraw() public onlyOwner {\\n        if (houseProfitEther > 0) {\\n            payable(owner()).transfer(\\n                address(this).balance - uint256(houseProfitEther)\\n            );\\n            return;\\n        }\\n\\n        payable(owner()).transfer(address(this).balance);\\n    }\\n\\n    // Fallback function\\n    fallback() external payable {}\\n\\n    receive() external payable {}\\n}\\n\",\"keccak256\":\"0x82bd14a3447a97c5c117e37b5498afde7691dbf5295957adb9415f8a8a172428\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50600080546001600160a01b031916339081178255604051909182917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a35060058054336001600160a01b03199091168117909155600680546001600160a81b03191660ff60a01b1990921691909117600560a01b17905567016345785d8a0000600255678ac7230489e800006003556111c3806100b26000396000f3fe6080604052600436106101235760003560e01c80638bc4aab2116100a0578063bf4bd00211610064578063bf4bd00214610309578063f2fde38b1461031c578063f579f8821461033c578063f593a387146103be578063f8bb201c146103d45761012a565b80638bc4aab2146102625780638da5cb5b14610278578063abae505014610296578063adc2c98a146102b6578063b00606a5146102e95761012a565b80636b5c5f39116100e75780636b5c5f39146101d857806370c10578146101f8578063715018a61461020d578063722153731461022257806372be4112146102425761012a565b806322728b111461012c5780633ccfd60b146101555780635b49637e1461016a5780635c6c09391461018057806365fe09d7146101b85761012a565b3661012a57005b005b34801561013857600080fd5b5061014260025481565b6040519081526020015b60405180910390f35b34801561016157600080fd5b5061012a6103f4565b34801561017657600080fd5b5061014260035481565b34801561018c57600080fd5b506006546101a0906001600160a01b031681565b6040516001600160a01b03909116815260200161014c565b3480156101c457600080fd5b506101426101d3366004610e8b565b6104c4565b3480156101e457600080fd5b506005546101a0906001600160a01b031681565b34801561020457600080fd5b5061012a6104e5565b34801561021957600080fd5b5061012a6105a3565b34801561022e57600080fd5b5061012a61023d366004610e5d565b610617565b34801561024e57600080fd5b5061012a61025d366004610efe565b610663565b34801561026e57600080fd5b5061014260045481565b34801561028457600080fd5b506000546001600160a01b03166101a0565b3480156102a257600080fd5b5061012a6102b1366004610edd565b6106ad565b3480156102c257600080fd5b506006546102d790600160a01b900460ff1681565b60405160ff909116815260200161014c565b3480156102f557600080fd5b5061012a610304366004610ea3565b6106e2565b61012a610317366004610edd565b610a5f565b34801561032857600080fd5b5061012a610337366004610e5d565b610d11565b34801561034857600080fd5b506103aa610357366004610e8b565b600760205260009081526040902080546001820154600283015460038401546004850154600586015460069096015494956001600160a01b03909416949293919290919060ff8082169161010090041688565b60405161014c989796959493929190610fae565b3480156103ca57600080fd5b5061014260015481565b3480156103e057600080fd5b5061012a6103ef366004610e5d565b610dfb565b6000546001600160a01b031633146104275760405162461bcd60e51b815260040161041e90610f79565b60405180910390fd5b60006004541315610486576000546001600160a01b03166001600160a01b03166108fc6004544761045891906110f8565b6040518115909202916000818181858888f19350505050158015610480573d6000803e3d6000fd5b506104c2565b600080546040516001600160a01b03909116914780156108fc02929091818181858888f193505050501580156104c0573d6000803e3d6000fd5b505b565b600881815481106104d457600080fd5b600091825260209091200154905081565b6006546001600160a01b031633146105545760405162461bcd60e51b815260206004820152602c60248201527f4f6e6c79207468652070726f6669742074616b65722063616e2072756e20746860448201526b34b990333ab731ba34b7b71760a11b606482015260840161041e565b600060045413156104c2576006546004546040516001600160a01b039092169181156108fc0291906000818181858888f1935050505015801561059b573d6000803e3d6000fd5b506000600455565b6000546001600160a01b031633146105cd5760405162461bcd60e51b815260040161041e90610f79565b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b6000546001600160a01b031633146106415760405162461bcd60e51b815260040161041e90610f79565b600680546001600160a01b0319166001600160a01b0392909216919091179055565b6000546001600160a01b0316331461068d5760405162461bcd60e51b815260040161041e90610f79565b6006805460ff909216600160a01b0260ff60a01b19909216919091179055565b6000546001600160a01b031633146106d75760405162461bcd60e51b815260040161041e90610f79565b600291909155600355565b6005546001600160a01b0316331461074d5760405162461bcd60e51b815260206004820152602860248201527f4f6e6c79207468652063726f75706965722063616e2072756e207468697320666044820152673ab731ba34b7b71760c11b606482015260840161041e565b6000848152600760205260408120906006820154610100900460ff16600281111561078857634e487b7160e01b600052602160045260246000fd5b146107cb5760405162461bcd60e51b815260206004820152601360248201527211d85b5948185b1c9958591e481c1b185e5959606a1b604482015260640161041e565b60006040518060400160405280601c81526020017f19457468657265756d205369676e6564204d6573736167653a0a33320000000081525090506000818760405160200161081a929190610f3a565b60408051808303601f1901815282825280516020918201206005546000855291840180845281905260ff8a169284019290925260608301889052608083018790529092506001600160a01b03169060019060a0016020604051602081039080840390855afa158015610890573d6000803e3d6000fd5b505050602060405103516001600160a01b0316146108e45760405162461bcd60e51b8152602060048201526011602482015270496e76616c6964207369676e617475726560781b604482015260640161041e565b6108ef60028561114d565b60058401819055600484015414156109ad5760065460649061091c90600160a01b900460ff1660c861110f565b60ff16846002015461092e919061109a565b6109389190611086565b6003840181905560068401805461ff001916610100179055600480546000906109629084906110b9565b9091555050600183015460038401546040516001600160a01b039092169181156108fc0291906000818181858888f193505050501580156109a7573d6000803e3d6000fd5b506109c6565b6000600384015560068301805461ff0019166102001790555b6001830154835460065489926001600160a01b0316917e867f710c53fead2d43f716b65ca12f0ecbef01e58edb8cd235073f9149243191610a1290600160a01b900460ff1660c861110f565b8760020154886003015489600401548a6005015460018c60060160019054906101000a900460ff16604051610a4e989796959493929190611003565b60405180910390a350505050505050565b3460025411158015610a7357506003543411155b610abf5760405162461bcd60e51b815260206004820152601760248201527f496e636f727265637420616d6f756e7420746f20626574000000000000000000604482015260640161041e565b600081815260076020526040902054819015610b115760405162461bcd60e51b815260206004820152601160248201527014d9595908185b1c9958591e481d5cd959607a1b604482015260640161041e565b821580610b1e5750826001145b610b6a5760405162461bcd60e51b815260206004820152601760248201527f43686f6963652073686f756c642062652030206f722031000000000000000000604482015260640161041e565b600654600090606490610b8890600160a01b900460ff1660c861110f565b610b959060ff163461109a565b610b9f9190611086565b9050478110610c075760405162461bcd60e51b815260206004820152602e60248201527f496e737566666963656e742066756e6473206f6e20636f6e747261637420746f60448201526d0818dbdd995c881d1a194818995d60921b606482015260840161041e565b6000838152600760205260408120600180549192610c2483611132565b9091555050600180548255810180546001600160a01b03191633179055346002820181905560068201805461ff001916905560048083018790558054600090610c6e908490611045565b909155505060088054600180820183556000929092527ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee3018590558181015460028301546004840154604080519283526020830191909152810187905260608101929092526001600160a01b0316907f5c0023731903eb93130ada523196982a48d902eea3b24cc0b647c08d99007b609060800160405180910390a25050505050565b6000546001600160a01b03163314610d3b5760405162461bcd60e51b815260040161041e90610f79565b6001600160a01b038116610da05760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161041e565b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b6000546001600160a01b03163314610e255760405162461bcd60e51b815260040161041e90610f79565b600580546001600160a01b0319166001600160a01b0392909216919091179055565b803560ff81168114610e5857600080fd5b919050565b600060208284031215610e6e578081fd5b81356001600160a01b0381168114610e84578182fd5b9392505050565b600060208284031215610e9c578081fd5b5035919050565b60008060008060808587031215610eb8578283fd5b84359350610ec860208601610e47565b93969395505050506040820135916060013590565b60008060408385031215610eef578182fd5b50508035926020909101359150565b600060208284031215610f0f578081fd5b610e8482610e47565b60038110610f3657634e487b7160e01b600052602160045260246000fd5b9052565b60008351815b81811015610f5a5760208187018101518583015201610f40565b81811115610f685782828501525b509190910191825250602001919050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b8881526001600160a01b038816602082015260408101879052606081018690526080810185905260a0810184905282151560c08201526101008101610ff660e0830184610f18565b9998505050505050505050565b60006101008201905089825260ff891660208301528760408301528660608301528560808301528460a083015283151560c0830152610ff660e0830184610f18565b600080821280156001600160ff1b038490038513161561106757611067611161565b600160ff1b839003841281161561108057611080611161565b50500190565b60008261109557611095611177565b500490565b60008160001904831182151516156110b4576110b4611161565b500290565b60008083128015600160ff1b8501841216156110d7576110d7611161565b6001600160ff1b03840183138116156110f2576110f2611161565b50500390565b60008282101561110a5761110a611161565b500390565b600060ff821660ff84168082101561112957611129611161565b90039392505050565b600060001982141561114657611146611161565b5060010190565b60008261115c5761115c611177565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fdfea26469706673582212200f795621a4b805ba9ec4d7d7cd28c83e5cdc3d522c551c404f6fb7c2bfac2fa564736f6c63430008030033",
  "deployedBytecode": "0x6080604052600436106101235760003560e01c80638bc4aab2116100a0578063bf4bd00211610064578063bf4bd00214610309578063f2fde38b1461031c578063f579f8821461033c578063f593a387146103be578063f8bb201c146103d45761012a565b80638bc4aab2146102625780638da5cb5b14610278578063abae505014610296578063adc2c98a146102b6578063b00606a5146102e95761012a565b80636b5c5f39116100e75780636b5c5f39146101d857806370c10578146101f8578063715018a61461020d578063722153731461022257806372be4112146102425761012a565b806322728b111461012c5780633ccfd60b146101555780635b49637e1461016a5780635c6c09391461018057806365fe09d7146101b85761012a565b3661012a57005b005b34801561013857600080fd5b5061014260025481565b6040519081526020015b60405180910390f35b34801561016157600080fd5b5061012a6103f4565b34801561017657600080fd5b5061014260035481565b34801561018c57600080fd5b506006546101a0906001600160a01b031681565b6040516001600160a01b03909116815260200161014c565b3480156101c457600080fd5b506101426101d3366004610e8b565b6104c4565b3480156101e457600080fd5b506005546101a0906001600160a01b031681565b34801561020457600080fd5b5061012a6104e5565b34801561021957600080fd5b5061012a6105a3565b34801561022e57600080fd5b5061012a61023d366004610e5d565b610617565b34801561024e57600080fd5b5061012a61025d366004610efe565b610663565b34801561026e57600080fd5b5061014260045481565b34801561028457600080fd5b506000546001600160a01b03166101a0565b3480156102a257600080fd5b5061012a6102b1366004610edd565b6106ad565b3480156102c257600080fd5b506006546102d790600160a01b900460ff1681565b60405160ff909116815260200161014c565b3480156102f557600080fd5b5061012a610304366004610ea3565b6106e2565b61012a610317366004610edd565b610a5f565b34801561032857600080fd5b5061012a610337366004610e5d565b610d11565b34801561034857600080fd5b506103aa610357366004610e8b565b600760205260009081526040902080546001820154600283015460038401546004850154600586015460069096015494956001600160a01b03909416949293919290919060ff8082169161010090041688565b60405161014c989796959493929190610fae565b3480156103ca57600080fd5b5061014260015481565b3480156103e057600080fd5b5061012a6103ef366004610e5d565b610dfb565b6000546001600160a01b031633146104275760405162461bcd60e51b815260040161041e90610f79565b60405180910390fd5b60006004541315610486576000546001600160a01b03166001600160a01b03166108fc6004544761045891906110f8565b6040518115909202916000818181858888f19350505050158015610480573d6000803e3d6000fd5b506104c2565b600080546040516001600160a01b03909116914780156108fc02929091818181858888f193505050501580156104c0573d6000803e3d6000fd5b505b565b600881815481106104d457600080fd5b600091825260209091200154905081565b6006546001600160a01b031633146105545760405162461bcd60e51b815260206004820152602c60248201527f4f6e6c79207468652070726f6669742074616b65722063616e2072756e20746860448201526b34b990333ab731ba34b7b71760a11b606482015260840161041e565b600060045413156104c2576006546004546040516001600160a01b039092169181156108fc0291906000818181858888f1935050505015801561059b573d6000803e3d6000fd5b506000600455565b6000546001600160a01b031633146105cd5760405162461bcd60e51b815260040161041e90610f79565b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b6000546001600160a01b031633146106415760405162461bcd60e51b815260040161041e90610f79565b600680546001600160a01b0319166001600160a01b0392909216919091179055565b6000546001600160a01b0316331461068d5760405162461bcd60e51b815260040161041e90610f79565b6006805460ff909216600160a01b0260ff60a01b19909216919091179055565b6000546001600160a01b031633146106d75760405162461bcd60e51b815260040161041e90610f79565b600291909155600355565b6005546001600160a01b0316331461074d5760405162461bcd60e51b815260206004820152602860248201527f4f6e6c79207468652063726f75706965722063616e2072756e207468697320666044820152673ab731ba34b7b71760c11b606482015260840161041e565b6000848152600760205260408120906006820154610100900460ff16600281111561078857634e487b7160e01b600052602160045260246000fd5b146107cb5760405162461bcd60e51b815260206004820152601360248201527211d85b5948185b1c9958591e481c1b185e5959606a1b604482015260640161041e565b60006040518060400160405280601c81526020017f19457468657265756d205369676e6564204d6573736167653a0a33320000000081525090506000818760405160200161081a929190610f3a565b60408051808303601f1901815282825280516020918201206005546000855291840180845281905260ff8a169284019290925260608301889052608083018790529092506001600160a01b03169060019060a0016020604051602081039080840390855afa158015610890573d6000803e3d6000fd5b505050602060405103516001600160a01b0316146108e45760405162461bcd60e51b8152602060048201526011602482015270496e76616c6964207369676e617475726560781b604482015260640161041e565b6108ef60028561114d565b60058401819055600484015414156109ad5760065460649061091c90600160a01b900460ff1660c861110f565b60ff16846002015461092e919061109a565b6109389190611086565b6003840181905560068401805461ff001916610100179055600480546000906109629084906110b9565b9091555050600183015460038401546040516001600160a01b039092169181156108fc0291906000818181858888f193505050501580156109a7573d6000803e3d6000fd5b506109c6565b6000600384015560068301805461ff0019166102001790555b6001830154835460065489926001600160a01b0316917e867f710c53fead2d43f716b65ca12f0ecbef01e58edb8cd235073f9149243191610a1290600160a01b900460ff1660c861110f565b8760020154886003015489600401548a6005015460018c60060160019054906101000a900460ff16604051610a4e989796959493929190611003565b60405180910390a350505050505050565b3460025411158015610a7357506003543411155b610abf5760405162461bcd60e51b815260206004820152601760248201527f496e636f727265637420616d6f756e7420746f20626574000000000000000000604482015260640161041e565b600081815260076020526040902054819015610b115760405162461bcd60e51b815260206004820152601160248201527014d9595908185b1c9958591e481d5cd959607a1b604482015260640161041e565b821580610b1e5750826001145b610b6a5760405162461bcd60e51b815260206004820152601760248201527f43686f6963652073686f756c642062652030206f722031000000000000000000604482015260640161041e565b600654600090606490610b8890600160a01b900460ff1660c861110f565b610b959060ff163461109a565b610b9f9190611086565b9050478110610c075760405162461bcd60e51b815260206004820152602e60248201527f496e737566666963656e742066756e6473206f6e20636f6e747261637420746f60448201526d0818dbdd995c881d1a194818995d60921b606482015260840161041e565b6000838152600760205260408120600180549192610c2483611132565b9091555050600180548255810180546001600160a01b03191633179055346002820181905560068201805461ff001916905560048083018790558054600090610c6e908490611045565b909155505060088054600180820183556000929092527ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee3018590558181015460028301546004840154604080519283526020830191909152810187905260608101929092526001600160a01b0316907f5c0023731903eb93130ada523196982a48d902eea3b24cc0b647c08d99007b609060800160405180910390a25050505050565b6000546001600160a01b03163314610d3b5760405162461bcd60e51b815260040161041e90610f79565b6001600160a01b038116610da05760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161041e565b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b6000546001600160a01b03163314610e255760405162461bcd60e51b815260040161041e90610f79565b600580546001600160a01b0319166001600160a01b0392909216919091179055565b803560ff81168114610e5857600080fd5b919050565b600060208284031215610e6e578081fd5b81356001600160a01b0381168114610e84578182fd5b9392505050565b600060208284031215610e9c578081fd5b5035919050565b60008060008060808587031215610eb8578283fd5b84359350610ec860208601610e47565b93969395505050506040820135916060013590565b60008060408385031215610eef578182fd5b50508035926020909101359150565b600060208284031215610f0f578081fd5b610e8482610e47565b60038110610f3657634e487b7160e01b600052602160045260246000fd5b9052565b60008351815b81811015610f5a5760208187018101518583015201610f40565b81811115610f685782828501525b509190910191825250602001919050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b8881526001600160a01b038816602082015260408101879052606081018690526080810185905260a0810184905282151560c08201526101008101610ff660e0830184610f18565b9998505050505050505050565b60006101008201905089825260ff891660208301528760408301528660608301528560808301528460a083015283151560c0830152610ff660e0830184610f18565b600080821280156001600160ff1b038490038513161561106757611067611161565b600160ff1b839003841281161561108057611080611161565b50500190565b60008261109557611095611177565b500490565b60008160001904831182151516156110b4576110b4611161565b500290565b60008083128015600160ff1b8501841216156110d7576110d7611161565b6001600160ff1b03840183138116156110f2576110f2611161565b50500390565b60008282101561110a5761110a611161565b500390565b600060ff821660ff84168082101561112957611129611161565b90039392505050565b600060001982141561114657611146611161565b5060010190565b60008261115c5761115c611177565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fdfea26469706673582212200f795621a4b805ba9ec4d7d7cd28c83e5cdc3d522c551c404f6fb7c2bfac2fa564736f6c63430008030033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "confirm(bytes32,uint8,bytes32,bytes32)": {
        "params": {
          "_seed": ": Uniqual value for each game"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "play(uint256,bytes32)": {
        "params": {
          "_seed": ": Uniqual value for each game"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "setBetRange(uint256,uint256)": {
        "params": {
          "_max": ": New maxBet",
          "_min": ": New minBet"
        }
      },
      "setCroupier(address)": {
        "params": {
          "_addr": ": New croupier"
        }
      },
      "setEdge(uint8)": {
        "params": {
          "_e": ": New edge"
        }
      },
      "setProfitTaker(address)": {
        "params": {
          "_profitTaker": ": New profitTaker"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "confirm(bytes32,uint8,bytes32,bytes32)": {
        "notice": "Confirm the game, with seed"
      },
      "croupier()": {
        "notice": "Croupier"
      },
      "edge()": {
        "notice": "Fee factor"
      },
      "games(bytes32)": {
        "notice": "Info of each game"
      },
      "houseProfitEther()": {
        "notice": "Profit from bets"
      },
      "listGames(uint256)": {
        "notice": "Games seeds"
      },
      "maxBet()": {
        "notice": "Maximal amount for bet"
      },
      "minBet()": {
        "notice": "Minimal amount for bet"
      },
      "play(uint256,bytes32)": {
        "notice": "Add new game"
      },
      "profitTaker()": {
        "notice": "Person how will receive houseProfitEther"
      },
      "setBetRange(uint256,uint256)": {
        "notice": "Set new minBet and maxBet"
      },
      "setCroupier(address)": {
        "notice": "Set new croupier"
      },
      "setEdge(uint8)": {
        "notice": "Set new edge    "
      },
      "setProfitTaker(address)": {
        "notice": "Set new profitTaker"
      },
      "takeProfit()": {
        "notice": "sends houseProfitEther to profitTaker"
      },
      "totalGamesCount()": {
        "notice": "Number of all games"
      },
      "withdraw()": {
        "notice": "sends contract's excessive balance to owner"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "cache/solpp-generated-contracts/CoinFlip.sol:CoinFlip",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 4215,
        "contract": "cache/solpp-generated-contracts/CoinFlip.sol:CoinFlip",
        "label": "totalGamesCount",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 4218,
        "contract": "cache/solpp-generated-contracts/CoinFlip.sol:CoinFlip",
        "label": "minBet",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 4221,
        "contract": "cache/solpp-generated-contracts/CoinFlip.sol:CoinFlip",
        "label": "maxBet",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 4224,
        "contract": "cache/solpp-generated-contracts/CoinFlip.sol:CoinFlip",
        "label": "houseProfitEther",
        "offset": 0,
        "slot": "4",
        "type": "t_int256"
      },
      {
        "astId": 4227,
        "contract": "cache/solpp-generated-contracts/CoinFlip.sol:CoinFlip",
        "label": "croupier",
        "offset": 0,
        "slot": "5",
        "type": "t_address"
      },
      {
        "astId": 4230,
        "contract": "cache/solpp-generated-contracts/CoinFlip.sol:CoinFlip",
        "label": "profitTaker",
        "offset": 0,
        "slot": "6",
        "type": "t_address"
      },
      {
        "astId": 4233,
        "contract": "cache/solpp-generated-contracts/CoinFlip.sol:CoinFlip",
        "label": "edge",
        "offset": 20,
        "slot": "6",
        "type": "t_uint8"
      },
      {
        "astId": 4239,
        "contract": "cache/solpp-generated-contracts/CoinFlip.sol:CoinFlip",
        "label": "games",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_bytes32,t_struct(Game)4208_storage)"
      },
      {
        "astId": 4243,
        "contract": "cache/solpp-generated-contracts/CoinFlip.sol:CoinFlip",
        "label": "listGames",
        "offset": 0,
        "slot": "8",
        "type": "t_array(t_bytes32)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_address_payable": {
        "encoding": "inplace",
        "label": "address payable",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_enum(GameState)4212": {
        "encoding": "inplace",
        "label": "enum GamesCore.GameState",
        "numberOfBytes": "1"
      },
      "t_int256": {
        "encoding": "inplace",
        "label": "int256",
        "numberOfBytes": "32"
      },
      "t_mapping(t_bytes32,t_struct(Game)4208_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct GamesCore.Game)",
        "numberOfBytes": "32",
        "value": "t_struct(Game)4208_storage"
      },
      "t_struct(Game)4208_storage": {
        "encoding": "inplace",
        "label": "struct GamesCore.Game",
        "members": [
          {
            "astId": 4192,
            "contract": "cache/solpp-generated-contracts/CoinFlip.sol:CoinFlip",
            "label": "id",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 4194,
            "contract": "cache/solpp-generated-contracts/CoinFlip.sol:CoinFlip",
            "label": "player",
            "offset": 0,
            "slot": "1",
            "type": "t_address_payable"
          },
          {
            "astId": 4196,
            "contract": "cache/solpp-generated-contracts/CoinFlip.sol:CoinFlip",
            "label": "bet",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 4198,
            "contract": "cache/solpp-generated-contracts/CoinFlip.sol:CoinFlip",
            "label": "prize",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 4200,
            "contract": "cache/solpp-generated-contracts/CoinFlip.sol:CoinFlip",
            "label": "choice",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 4202,
            "contract": "cache/solpp-generated-contracts/CoinFlip.sol:CoinFlip",
            "label": "result",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 4204,
            "contract": "cache/solpp-generated-contracts/CoinFlip.sol:CoinFlip",
            "label": "over",
            "offset": 0,
            "slot": "6",
            "type": "t_bool"
          },
          {
            "astId": 4207,
            "contract": "cache/solpp-generated-contracts/CoinFlip.sol:CoinFlip",
            "label": "state",
            "offset": 1,
            "slot": "6",
            "type": "t_enum(GameState)4212"
          }
        ],
        "numberOfBytes": "224"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}