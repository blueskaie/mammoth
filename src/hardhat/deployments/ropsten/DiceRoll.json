{
  "address": "0x5c9d0f3E9e95D077C916CCFC46c8a746e96767F6",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "payable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "player",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "bet",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "choice",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "seed",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "over",
          "type": "bool"
        }
      ],
      "name": "GameCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "player",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "round",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "multiplier",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "bet",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "prize",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "choice",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "result",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "seed",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "over",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "enum GamesCore.GameState",
          "name": "state",
          "type": "uint8"
        }
      ],
      "name": "GamePlayed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_seed",
          "type": "bytes32"
        },
        {
          "internalType": "uint8",
          "name": "_v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "_r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "_s",
          "type": "bytes32"
        }
      ],
      "name": "confirm",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "croupier",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "edge",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "games",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "address payable",
          "name": "player",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "bet",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "prize",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "choice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "result",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "over",
          "type": "bool"
        },
        {
          "internalType": "enum GamesCore.GameState",
          "name": "state",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "houseProfitEther",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "listGames",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxBet",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxPayout",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minBet",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_over",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "_choice",
          "type": "uint256"
        }
      ],
      "name": "multiplier",
      "outputs": [
        {
          "internalType": "int128",
          "name": "",
          "type": "int128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "padding",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_over",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "_choice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_bet",
          "type": "uint256"
        }
      ],
      "name": "payout",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_choice",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_over",
          "type": "bool"
        },
        {
          "internalType": "bytes32",
          "name": "_seed",
          "type": "bytes32"
        }
      ],
      "name": "play",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "profitTaker",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rangeMax",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rangeMin",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_min",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_max",
          "type": "uint256"
        }
      ],
      "name": "setBetRange",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_min",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_max",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_padding",
          "type": "uint256"
        }
      ],
      "name": "setChoiceRange",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_addr",
          "type": "address"
        }
      ],
      "name": "setCroupier",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "_e",
          "type": "uint8"
        }
      ],
      "name": "setEdge",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_ether",
          "type": "uint256"
        }
      ],
      "name": "setmaxPayout",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_profitTaker",
          "type": "address"
        }
      ],
      "name": "setProfitTaker",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "takeProfit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalGamesCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xc90cd970661a265fa90f6af61677cf079ac7c51067c0cf95967b9a9468c65b38",
  "receipt": {
    "to": null,
    "from": "0x5f2cFa351B7d4b973d341fdB2cB154794c0a899c",
    "contractAddress": "0x5c9d0f3E9e95D077C916CCFC46c8a746e96767F6",
    "transactionIndex": 5,
    "gasUsed": "1547355",
    "logsBloom": "0x
    "blockHash": "0x92091f251cb1d2129365a53abd5091c9eaf7867290afa26ae17b0494f5264941",
    "transactionHash": "0xc90cd970661a265fa90f6af61677cf079ac7c51067c0cf95967b9a9468c65b38",
    "logs": [
      {
        "transactionIndex": 5,
        "blockNumber": 10890769,
        "transactionHash": "0xc90cd970661a265fa90f6af61677cf079ac7c51067c0cf95967b9a9468c65b38",
        "address": "0x5c9d0f3E9e95D077C916CCFC46c8a746e96767F6",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000005f2cfa351b7d4b973d341fdb2cb154794c0a899c"
        ],
        "data": "0x",
        "logIndex": 8,
        "blockHash": "0x92091f251cb1d2129365a53abd5091c9eaf7867290afa26ae17b0494f5264941"
      }
    ],
    "blockNumber": 10890769,
    "cumulativeGasUsed": "1862823",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "340be554b77746b815aac72f9eb99717",
  "metadata": "{\"compiler\":{\"version\":\"0.8.3+commit.8d00100c\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bet\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"choice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"seed\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"over\",\"type\":\"bool\"}],\"name\":\"GameCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"round\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"multiplier\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bet\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"prize\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"choice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"result\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"seed\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"over\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"enum GamesCore.GameState\",\"name\":\"state\",\"type\":\"uint8\"}],\"name\":\"GamePlayed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_seed\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"_v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"_r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_s\",\"type\":\"bytes32\"}],\"name\":\"confirm\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"croupier\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"edge\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"games\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"player\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"bet\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"prize\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"choice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"result\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"over\",\"type\":\"bool\"},{\"internalType\":\"enum GamesCore.GameState\",\"name\":\"state\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"houseProfitEther\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"listGames\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxBet\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxPayout\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minBet\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_over\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_choice\",\"type\":\"uint256\"}],\"name\":\"multiplier\",\"outputs\":[{\"internalType\":\"int128\",\"name\":\"\",\"type\":\"int128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"padding\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_over\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_choice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_bet\",\"type\":\"uint256\"}],\"name\":\"payout\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_choice\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_over\",\"type\":\"bool\"},{\"internalType\":\"bytes32\",\"name\":\"_seed\",\"type\":\"bytes32\"}],\"name\":\"play\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"profitTaker\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rangeMax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rangeMin\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_min\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_max\",\"type\":\"uint256\"}],\"name\":\"setBetRange\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_min\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_max\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_padding\",\"type\":\"uint256\"}],\"name\":\"setChoiceRange\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"setCroupier\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_e\",\"type\":\"uint8\"}],\"name\":\"setEdge\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_ether\",\"type\":\"uint256\"}],\"name\":\"setmaxPayout\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_profitTaker\",\"type\":\"address\"}],\"name\":\"setProfitTaker\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"takeProfit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalGamesCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"confirm(bytes32,uint8,bytes32,bytes32)\":{\"params\":{\"_seed\":\": Uniqual value for each game\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"payout(bool,uint256,uint256)\":{\"params\":{\"_bet\":\": Bet amount\"}},\"play(uint256,bool,bytes32)\":{\"params\":{\"_choice\":\": Choice\",\"_over\":\": More or less than choice\",\"_seed\":\": Uniqual value for each game\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"setBetRange(uint256,uint256)\":{\"params\":{\"_max\":\": New maxBet\",\"_min\":\": New minBet\"}},\"setChoiceRange(uint256,uint256,uint256)\":{\"params\":{\"_max\":\": New rangeMax\",\"_min\":\": New rangeMin\",\"_padding\":\": New padding\"}},\"setCroupier(address)\":{\"params\":{\"_addr\":\": New croupier\"}},\"setEdge(uint8)\":{\"params\":{\"_e\":\": New edge\"}},\"setmaxPayout(uint256)\":{\"params\":{\"_ether\":\": New maxPayout\"}},\"setProfitTaker(address)\":{\"params\":{\"_profitTaker\":\": New profitTaker\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"confirm(bytes32,uint8,bytes32,bytes32)\":{\"notice\":\"Confirm the game, with seed\"},\"croupier()\":{\"notice\":\"Croupier\"},\"edge()\":{\"notice\":\"Fee factor\"},\"games(bytes32)\":{\"notice\":\"Info of each game\"},\"houseProfitEther()\":{\"notice\":\"Profit from bets\"},\"listGames(uint256)\":{\"notice\":\"Games seeds\"},\"maxBet()\":{\"notice\":\"Maximal amount for bet\"},\"maxPayout()\":{\"notice\":\"Maximum possible win\"},\"minBet()\":{\"notice\":\"Minimal amount for bet\"},\"multiplier(bool,uint256)\":{\"notice\":\"Calculates the coefficient for choice\"},\"payout(bool,uint256,uint256)\":{\"notice\":\"Calculates the prize when winning\"},\"play(uint256,bool,bytes32)\":{\"notice\":\"Add new game\"},\"profitTaker()\":{\"notice\":\"Person how will receive houseProfitEther\"},\"rangeMax()\":{\"notice\":\"Maximal possible choice\"},\"rangeMin()\":{\"notice\":\"Minimal possible choice\"},\"setBetRange(uint256,uint256)\":{\"notice\":\"Set new minBet and maxBet\"},\"setChoiceRange(uint256,uint256,uint256)\":{\"notice\":\"Set new range for choice\"},\"setCroupier(address)\":{\"notice\":\"Set new croupier\"},\"setEdge(uint8)\":{\"notice\":\"Set new edge    \"},\"setmaxPayout(uint256)\":{\"notice\":\"Set new maxPayout    \"},\"setProfitTaker(address)\":{\"notice\":\"Set new profitTaker\"},\"takeProfit()\":{\"notice\":\"sends houseProfitEther to profitTaker\"},\"totalGamesCount()\":{\"notice\":\"Number of all games\"},\"withdraw()\":{\"notice\":\"sends contract's excessive balance to owner\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"cache/solpp-generated-contracts/DiceRoll.sol\":\"DiceRoll\"},\"evmVersion\":\"istanbul\",\"libraries\":{\":__CACHE_BREAKER__\":\"0x00000000d41867734bbee4c6863d9255b2b06ac1\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\",\"keccak256\":\"0x1cae4f85f114ff17b90414f5da67365b1d00337abb5bce9bf944eb78a2c0673c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xf8e8d118a7a8b2e134181f7da655f6266aa3a0f9134b2605747139fcb0c5d835\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xf930d2df426bfcfc1f7415be724f04081c96f4fb9ec8d0e3a521c07692dface0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2526b7c6a366fc211bbc176078ab02b83833e7682abcc5b3bed9d700b34e2a3e\",\"license\":\"MIT\"},\"cache/solpp-generated-contracts/ABDKMath64x64.sol\":{\"content\":\"pragma solidity ^0.8.0;\\n\\n// SPDX-License-Identifier: BSD-4-Clause\\n/*\\n * ABDK Math 64.64 Smart Contract Library.  Copyright \\u00a9 2019 by ABDK Consulting.\\n * Author: Mikhail Vladimirov <mikhail.vladimirov@gmail.com>\\n */\\n\\n\\n/**\\n * Smart contract library of mathematical functions operating with signed\\n * 64.64-bit fixed point numbers.  Signed 64.64-bit fixed point number is\\n * basically a simple fraction whose numerator is signed 128-bit integer and\\n * denominator is 2^64.  As long as denominator is always the same, there is no\\n * need to store it, thus in Solidity signed 64.64-bit fixed point numbers are\\n * represented by int128 type holding only the numerator.\\n */\\nlibrary ABDKMath64x64 {\\n  /*\\n   * Minimum value signed 64.64-bit fixed point number may have. \\n   */\\n  int128 private constant MIN_64x64 = -0x80000000000000000000000000000000;\\n\\n  /*\\n   * Maximum value signed 64.64-bit fixed point number may have. \\n   */\\n  int128 private constant MAX_64x64 = 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n\\n  /**\\n   * Convert signed 256-bit integer number into signed 64.64-bit fixed point\\n   * number.  Revert on overflow.\\n   *\\n   * @param x signed 256-bit integer number\\n   * @return signed 64.64-bit fixed point number\\n   */\\n  function fromInt (int256 x) internal pure returns (int128) {\\n    unchecked {\\n      require (x >= -0x8000000000000000 && x <= 0x7FFFFFFFFFFFFFFF);\\n      return int128 (x << 64);\\n    }\\n  }\\n\\n  /**\\n   * Convert signed 64.64 fixed point number into signed 64-bit integer number\\n   * rounding down.\\n   *\\n   * @param x signed 64.64-bit fixed point number\\n   * @return signed 64-bit integer number\\n   */\\n  function toInt (int128 x) internal pure returns (int64) {\\n    unchecked {\\n      return int64 (x >> 64);\\n    }\\n  }\\n\\n  /**\\n   * Convert unsigned 256-bit integer number into signed 64.64-bit fixed point\\n   * number.  Revert on overflow.\\n   *\\n   * @param x unsigned 256-bit integer number\\n   * @return signed 64.64-bit fixed point number\\n   */\\n  function fromUInt (uint256 x) internal pure returns (int128) {\\n    unchecked {\\n      require (x <= 0x7FFFFFFFFFFFFFFF);\\n      return int128 (int256 (x << 64));\\n    }\\n  }\\n\\n  /**\\n   * Convert signed 64.64 fixed point number into unsigned 64-bit integer\\n   * number rounding down.  Revert on underflow.\\n   *\\n   * @param x signed 64.64-bit fixed point number\\n   * @return unsigned 64-bit integer number\\n   */\\n  function toUInt (int128 x) internal pure returns (uint64) {\\n    unchecked {\\n      require (x >= 0);\\n      return uint64 (uint128 (x >> 64));\\n    }\\n  }\\n\\n  /**\\n   * Convert signed 128.128 fixed point number into signed 64.64-bit fixed point\\n   * number rounding down.  Revert on overflow.\\n   *\\n   * @param x signed 128.128-bin fixed point number\\n   * @return signed 64.64-bit fixed point number\\n   */\\n  function from128x128 (int256 x) internal pure returns (int128) {\\n    unchecked {\\n      int256 result = x >> 64;\\n      require (result >= MIN_64x64 && result <= MAX_64x64);\\n      return int128 (result);\\n    }\\n  }\\n\\n  /**\\n   * Convert signed 64.64 fixed point number into signed 128.128 fixed point\\n   * number.\\n   *\\n   * @param x signed 64.64-bit fixed point number\\n   * @return signed 128.128 fixed point number\\n   */\\n  function to128x128 (int128 x) internal pure returns (int256) {\\n    unchecked {\\n      return int256 (x) << 64;\\n    }\\n  }\\n\\n  /**\\n   * Calculate x + y.  Revert on overflow.\\n   *\\n   * @param x signed 64.64-bit fixed point number\\n   * @param y signed 64.64-bit fixed point number\\n   * @return signed 64.64-bit fixed point number\\n   */\\n  function add (int128 x, int128 y) internal pure returns (int128) {\\n    unchecked {\\n      int256 result = int256(x) + y;\\n      require (result >= MIN_64x64 && result <= MAX_64x64);\\n      return int128 (result);\\n    }\\n  }\\n\\n  /**\\n   * Calculate x - y.  Revert on overflow.\\n   *\\n   * @param x signed 64.64-bit fixed point number\\n   * @param y signed 64.64-bit fixed point number\\n   * @return signed 64.64-bit fixed point number\\n   */\\n  function sub (int128 x, int128 y) internal pure returns (int128) {\\n    unchecked {\\n      int256 result = int256(x) - y;\\n      require (result >= MIN_64x64 && result <= MAX_64x64);\\n      return int128 (result);\\n    }\\n  }\\n\\n  /**\\n   * Calculate x * y rounding down.  Revert on overflow.\\n   *\\n   * @param x signed 64.64-bit fixed point number\\n   * @param y signed 64.64-bit fixed point number\\n   * @return signed 64.64-bit fixed point number\\n   */\\n  function mul (int128 x, int128 y) internal pure returns (int128) {\\n    unchecked {\\n      int256 result = int256(x) * y >> 64;\\n      require (result >= MIN_64x64 && result <= MAX_64x64);\\n      return int128 (result);\\n    }\\n  }\\n\\n  /**\\n   * Calculate x * y rounding towards zero, where x is signed 64.64 fixed point\\n   * number and y is signed 256-bit integer number.  Revert on overflow.\\n   *\\n   * @param x signed 64.64 fixed point number\\n   * @param y signed 256-bit integer number\\n   * @return signed 256-bit integer number\\n   */\\n  function muli (int128 x, int256 y) internal pure returns (int256) {\\n    unchecked {\\n      if (x == MIN_64x64) {\\n        require (y >= -0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF &&\\n          y <= 0x1000000000000000000000000000000000000000000000000);\\n        return -y << 63;\\n      } else {\\n        bool negativeResult = false;\\n        if (x < 0) {\\n          x = -x;\\n          negativeResult = true;\\n        }\\n        if (y < 0) {\\n          y = -y; // We rely on overflow behavior here\\n          negativeResult = !negativeResult;\\n        }\\n        uint256 absoluteResult = mulu (x, uint256 (y));\\n        if (negativeResult) {\\n          require (absoluteResult <=\\n            0x8000000000000000000000000000000000000000000000000000000000000000);\\n          return -int256 (absoluteResult); // We rely on overflow behavior here\\n        } else {\\n          require (absoluteResult <=\\n            0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\\n          return int256 (absoluteResult);\\n        }\\n      }\\n    }\\n  }\\n\\n  /**\\n   * Calculate x * y rounding down, where x is signed 64.64 fixed point number\\n   * and y is unsigned 256-bit integer number.  Revert on overflow.\\n   *\\n   * @param x signed 64.64 fixed point number\\n   * @param y unsigned 256-bit integer number\\n   * @return unsigned 256-bit integer number\\n   */\\n  function mulu (int128 x, uint256 y) internal pure returns (uint256) {\\n    unchecked {\\n      if (y == 0) return 0;\\n\\n      require (x >= 0);\\n\\n      uint256 lo = (uint256 (int256 (x)) * (y & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF)) >> 64;\\n      uint256 hi = uint256 (int256 (x)) * (y >> 128);\\n\\n      require (hi <= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\\n      hi <<= 64;\\n\\n      require (hi <=\\n        0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF - lo);\\n      return hi + lo;\\n    }\\n  }\\n\\n  /**\\n   * Calculate x / y rounding towards zero.  Revert on overflow or when y is\\n   * zero.\\n   *\\n   * @param x signed 64.64-bit fixed point number\\n   * @param y signed 64.64-bit fixed point number\\n   * @return signed 64.64-bit fixed point number\\n   */\\n  function div (int128 x, int128 y) internal pure returns (int128) {\\n    unchecked {\\n      require (y != 0);\\n      int256 result = (int256 (x) << 64) / y;\\n      require (result >= MIN_64x64 && result <= MAX_64x64);\\n      return int128 (result);\\n    }\\n  }\\n\\n  /**\\n   * Calculate x / y rounding towards zero, where x and y are signed 256-bit\\n   * integer numbers.  Revert on overflow or when y is zero.\\n   *\\n   * @param x signed 256-bit integer number\\n   * @param y signed 256-bit integer number\\n   * @return signed 64.64-bit fixed point number\\n   */\\n  function divi (int256 x, int256 y) internal pure returns (int128) {\\n    unchecked {\\n      require (y != 0);\\n\\n      bool negativeResult = false;\\n      if (x < 0) {\\n        x = -x; // We rely on overflow behavior here\\n        negativeResult = true;\\n      }\\n      if (y < 0) {\\n        y = -y; // We rely on overflow behavior here\\n        negativeResult = !negativeResult;\\n      }\\n      uint128 absoluteResult = divuu (uint256 (x), uint256 (y));\\n      if (negativeResult) {\\n        require (absoluteResult <= 0x80000000000000000000000000000000);\\n        return -int128 (absoluteResult); // We rely on overflow behavior here\\n      } else {\\n        require (absoluteResult <= 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\\n        return int128 (absoluteResult); // We rely on overflow behavior here\\n      }\\n    }\\n  }\\n\\n  /**\\n   * Calculate x / y rounding towards zero, where x and y are unsigned 256-bit\\n   * integer numbers.  Revert on overflow or when y is zero.\\n   *\\n   * @param x unsigned 256-bit integer number\\n   * @param y unsigned 256-bit integer number\\n   * @return signed 64.64-bit fixed point number\\n   */\\n  function divu (uint256 x, uint256 y) internal pure returns (int128) {\\n    unchecked {\\n      require (y != 0);\\n      uint128 result = divuu (x, y);\\n      require (result <= uint128 (MAX_64x64));\\n      return int128 (result);\\n    }\\n  }\\n\\n  /**\\n   * Calculate -x.  Revert on overflow.\\n   *\\n   * @param x signed 64.64-bit fixed point number\\n   * @return signed 64.64-bit fixed point number\\n   */\\n  function neg (int128 x) internal pure returns (int128) {\\n    unchecked {\\n      require (x != MIN_64x64);\\n      return -x;\\n    }\\n  }\\n\\n  /**\\n   * Calculate |x|.  Revert on overflow.\\n   *\\n   * @param x signed 64.64-bit fixed point number\\n   * @return signed 64.64-bit fixed point number\\n   */\\n  function abs (int128 x) internal pure returns (int128) {\\n    unchecked {\\n      require (x != MIN_64x64);\\n      return x < 0 ? -x : x;\\n    }\\n  }\\n\\n  /**\\n   * Calculate 1 / x rounding towards zero.  Revert on overflow or when x is\\n   * zero.\\n   *\\n   * @param x signed 64.64-bit fixed point number\\n   * @return signed 64.64-bit fixed point number\\n   */\\n  function inv (int128 x) internal pure returns (int128) {\\n    unchecked {\\n      require (x != 0);\\n      int256 result = int256 (0x100000000000000000000000000000000) / x;\\n      require (result >= MIN_64x64 && result <= MAX_64x64);\\n      return int128 (result);\\n    }\\n  }\\n\\n  /**\\n   * Calculate arithmetics average of x and y, i.e. (x + y) / 2 rounding down.\\n   *\\n   * @param x signed 64.64-bit fixed point number\\n   * @param y signed 64.64-bit fixed point number\\n   * @return signed 64.64-bit fixed point number\\n   */\\n  function avg (int128 x, int128 y) internal pure returns (int128) {\\n    unchecked {\\n      return int128 ((int256 (x) + int256 (y)) >> 1);\\n    }\\n  }\\n\\n  /**\\n   * Calculate geometric average of x and y, i.e. sqrt (x * y) rounding down.\\n   * Revert on overflow or in case x * y is negative.\\n   *\\n   * @param x signed 64.64-bit fixed point number\\n   * @param y signed 64.64-bit fixed point number\\n   * @return signed 64.64-bit fixed point number\\n   */\\n  function gavg (int128 x, int128 y) internal pure returns (int128) {\\n    unchecked {\\n      int256 m = int256 (x) * int256 (y);\\n      require (m >= 0);\\n      require (m <\\n          0x4000000000000000000000000000000000000000000000000000000000000000);\\n      return int128 (sqrtu (uint256 (m)));\\n    }\\n  }\\n\\n  /**\\n   * Calculate x^y assuming 0^0 is 1, where x is signed 64.64 fixed point number\\n   * and y is unsigned 256-bit integer number.  Revert on overflow.\\n   *\\n   * @param x signed 64.64-bit fixed point number\\n   * @param y uint256 value\\n   * @return signed 64.64-bit fixed point number\\n   */\\n  function pow (int128 x, uint256 y) internal pure returns (int128) {\\n    unchecked {\\n      bool negative = x < 0 && y & 1 == 1;\\n\\n      uint256 absX = uint128 (x < 0 ? -x : x);\\n      uint256 absResult;\\n      absResult = 0x100000000000000000000000000000000;\\n\\n      if (absX <= 0x10000000000000000) {\\n        absX <<= 63;\\n        while (y != 0) {\\n          if (y & 0x1 != 0) {\\n            absResult = absResult * absX >> 127;\\n          }\\n          absX = absX * absX >> 127;\\n\\n          if (y & 0x2 != 0) {\\n            absResult = absResult * absX >> 127;\\n          }\\n          absX = absX * absX >> 127;\\n\\n          if (y & 0x4 != 0) {\\n            absResult = absResult * absX >> 127;\\n          }\\n          absX = absX * absX >> 127;\\n\\n          if (y & 0x8 != 0) {\\n            absResult = absResult * absX >> 127;\\n          }\\n          absX = absX * absX >> 127;\\n\\n          y >>= 4;\\n        }\\n\\n        absResult >>= 64;\\n      } else {\\n        uint256 absXShift = 63;\\n        if (absX < 0x1000000000000000000000000) { absX <<= 32; absXShift -= 32; }\\n        if (absX < 0x10000000000000000000000000000) { absX <<= 16; absXShift -= 16; }\\n        if (absX < 0x1000000000000000000000000000000) { absX <<= 8; absXShift -= 8; }\\n        if (absX < 0x10000000000000000000000000000000) { absX <<= 4; absXShift -= 4; }\\n        if (absX < 0x40000000000000000000000000000000) { absX <<= 2; absXShift -= 2; }\\n        if (absX < 0x80000000000000000000000000000000) { absX <<= 1; absXShift -= 1; }\\n\\n        uint256 resultShift = 0;\\n        while (y != 0) {\\n          require (absXShift < 64);\\n\\n          if (y & 0x1 != 0) {\\n            absResult = absResult * absX >> 127;\\n            resultShift += absXShift;\\n            if (absResult > 0x100000000000000000000000000000000) {\\n              absResult >>= 1;\\n              resultShift += 1;\\n            }\\n          }\\n          absX = absX * absX >> 127;\\n          absXShift <<= 1;\\n          if (absX >= 0x100000000000000000000000000000000) {\\n              absX >>= 1;\\n              absXShift += 1;\\n          }\\n\\n          y >>= 1;\\n        }\\n\\n        require (resultShift < 64);\\n        absResult >>= 64 - resultShift;\\n      }\\n      int256 result = negative ? -int256 (absResult) : int256 (absResult);\\n      require (result >= MIN_64x64 && result <= MAX_64x64);\\n      return int128 (result);\\n    }\\n  }\\n\\n  /**\\n   * Calculate sqrt (x) rounding down.  Revert if x < 0.\\n   *\\n   * @param x signed 64.64-bit fixed point number\\n   * @return signed 64.64-bit fixed point number\\n   */\\n  function sqrt (int128 x) internal pure returns (int128) {\\n    unchecked {\\n      require (x >= 0);\\n      return int128 (sqrtu (uint256 (int256 (x)) << 64));\\n    }\\n  }\\n\\n  /**\\n   * Calculate binary logarithm of x.  Revert if x <= 0.\\n   *\\n   * @param x signed 64.64-bit fixed point number\\n   * @return signed 64.64-bit fixed point number\\n   */\\n  function log_2 (int128 x) internal pure returns (int128) {\\n    unchecked {\\n      require (x > 0);\\n\\n      int256 msb = 0;\\n      int256 xc = x;\\n      if (xc >= 0x10000000000000000) { xc >>= 64; msb += 64; }\\n      if (xc >= 0x100000000) { xc >>= 32; msb += 32; }\\n      if (xc >= 0x10000) { xc >>= 16; msb += 16; }\\n      if (xc >= 0x100) { xc >>= 8; msb += 8; }\\n      if (xc >= 0x10) { xc >>= 4; msb += 4; }\\n      if (xc >= 0x4) { xc >>= 2; msb += 2; }\\n      if (xc >= 0x2) msb += 1;  // No need to shift xc anymore\\n\\n      int256 result = msb - 64 << 64;\\n      uint256 ux = uint256 (int256 (x)) << uint256 (127 - msb);\\n      for (int256 bit = 0x8000000000000000; bit > 0; bit >>= 1) {\\n        ux *= ux;\\n        uint256 b = ux >> 255;\\n        ux >>= 127 + b;\\n        result += bit * int256 (b);\\n      }\\n\\n      return int128 (result);\\n    }\\n  }\\n\\n  /**\\n   * Calculate natural logarithm of x.  Revert if x <= 0.\\n   *\\n   * @param x signed 64.64-bit fixed point number\\n   * @return signed 64.64-bit fixed point number\\n   */\\n  function ln (int128 x) internal pure returns (int128) {\\n    unchecked {\\n      require (x > 0);\\n\\n      return int128 (int256 (\\n          uint256 (int256 (log_2 (x))) * 0xB17217F7D1CF79ABC9E3B39803F2F6AF >> 128));\\n    }\\n  }\\n\\n  /**\\n   * Calculate binary exponent of x.  Revert on overflow.\\n   *\\n   * @param x signed 64.64-bit fixed point number\\n   * @return signed 64.64-bit fixed point number\\n   */\\n  function exp_2 (int128 x) internal pure returns (int128) {\\n    unchecked {\\n      require (x < 0x400000000000000000); // Overflow\\n\\n      if (x < -0x400000000000000000) return 0; // Underflow\\n\\n      uint256 result = 0x80000000000000000000000000000000;\\n\\n      if (x & 0x8000000000000000 > 0)\\n        result = result * 0x16A09E667F3BCC908B2FB1366EA957D3E >> 128;\\n      if (x & 0x4000000000000000 > 0)\\n        result = result * 0x1306FE0A31B7152DE8D5A46305C85EDEC >> 128;\\n      if (x & 0x2000000000000000 > 0)\\n        result = result * 0x1172B83C7D517ADCDF7C8C50EB14A791F >> 128;\\n      if (x & 0x1000000000000000 > 0)\\n        result = result * 0x10B5586CF9890F6298B92B71842A98363 >> 128;\\n      if (x & 0x800000000000000 > 0)\\n        result = result * 0x1059B0D31585743AE7C548EB68CA417FD >> 128;\\n      if (x & 0x400000000000000 > 0)\\n        result = result * 0x102C9A3E778060EE6F7CACA4F7A29BDE8 >> 128;\\n      if (x & 0x200000000000000 > 0)\\n        result = result * 0x10163DA9FB33356D84A66AE336DCDFA3F >> 128;\\n      if (x & 0x100000000000000 > 0)\\n        result = result * 0x100B1AFA5ABCBED6129AB13EC11DC9543 >> 128;\\n      if (x & 0x80000000000000 > 0)\\n        result = result * 0x10058C86DA1C09EA1FF19D294CF2F679B >> 128;\\n      if (x & 0x40000000000000 > 0)\\n        result = result * 0x1002C605E2E8CEC506D21BFC89A23A00F >> 128;\\n      if (x & 0x20000000000000 > 0)\\n        result = result * 0x100162F3904051FA128BCA9C55C31E5DF >> 128;\\n      if (x & 0x10000000000000 > 0)\\n        result = result * 0x1000B175EFFDC76BA38E31671CA939725 >> 128;\\n      if (x & 0x8000000000000 > 0)\\n        result = result * 0x100058BA01FB9F96D6CACD4B180917C3D >> 128;\\n      if (x & 0x4000000000000 > 0)\\n        result = result * 0x10002C5CC37DA9491D0985C348C68E7B3 >> 128;\\n      if (x & 0x2000000000000 > 0)\\n        result = result * 0x1000162E525EE054754457D5995292026 >> 128;\\n      if (x & 0x1000000000000 > 0)\\n        result = result * 0x10000B17255775C040618BF4A4ADE83FC >> 128;\\n      if (x & 0x800000000000 > 0)\\n        result = result * 0x1000058B91B5BC9AE2EED81E9B7D4CFAB >> 128;\\n      if (x & 0x400000000000 > 0)\\n        result = result * 0x100002C5C89D5EC6CA4D7C8ACC017B7C9 >> 128;\\n      if (x & 0x200000000000 > 0)\\n        result = result * 0x10000162E43F4F831060E02D839A9D16D >> 128;\\n      if (x & 0x100000000000 > 0)\\n        result = result * 0x100000B1721BCFC99D9F890EA06911763 >> 128;\\n      if (x & 0x80000000000 > 0)\\n        result = result * 0x10000058B90CF1E6D97F9CA14DBCC1628 >> 128;\\n      if (x & 0x40000000000 > 0)\\n        result = result * 0x1000002C5C863B73F016468F6BAC5CA2B >> 128;\\n      if (x & 0x20000000000 > 0)\\n        result = result * 0x100000162E430E5A18F6119E3C02282A5 >> 128;\\n      if (x & 0x10000000000 > 0)\\n        result = result * 0x1000000B1721835514B86E6D96EFD1BFE >> 128;\\n      if (x & 0x8000000000 > 0)\\n        result = result * 0x100000058B90C0B48C6BE5DF846C5B2EF >> 128;\\n      if (x & 0x4000000000 > 0)\\n        result = result * 0x10000002C5C8601CC6B9E94213C72737A >> 128;\\n      if (x & 0x2000000000 > 0)\\n        result = result * 0x1000000162E42FFF037DF38AA2B219F06 >> 128;\\n      if (x & 0x1000000000 > 0)\\n        result = result * 0x10000000B17217FBA9C739AA5819F44F9 >> 128;\\n      if (x & 0x800000000 > 0)\\n        result = result * 0x1000000058B90BFCDEE5ACD3C1CEDC823 >> 128;\\n      if (x & 0x400000000 > 0)\\n        result = result * 0x100000002C5C85FE31F35A6A30DA1BE50 >> 128;\\n      if (x & 0x200000000 > 0)\\n        result = result * 0x10000000162E42FF0999CE3541B9FFFCF >> 128;\\n      if (x & 0x100000000 > 0)\\n        result = result * 0x100000000B17217F80F4EF5AADDA45554 >> 128;\\n      if (x & 0x80000000 > 0)\\n        result = result * 0x10000000058B90BFBF8479BD5A81B51AD >> 128;\\n      if (x & 0x40000000 > 0)\\n        result = result * 0x1000000002C5C85FDF84BD62AE30A74CC >> 128;\\n      if (x & 0x20000000 > 0)\\n        result = result * 0x100000000162E42FEFB2FED257559BDAA >> 128;\\n      if (x & 0x10000000 > 0)\\n        result = result * 0x1000000000B17217F7D5A7716BBA4A9AE >> 128;\\n      if (x & 0x8000000 > 0)\\n        result = result * 0x100000000058B90BFBE9DDBAC5E109CCE >> 128;\\n      if (x & 0x4000000 > 0)\\n        result = result * 0x10000000002C5C85FDF4B15DE6F17EB0D >> 128;\\n      if (x & 0x2000000 > 0)\\n        result = result * 0x1000000000162E42FEFA494F1478FDE05 >> 128;\\n      if (x & 0x1000000 > 0)\\n        result = result * 0x10000000000B17217F7D20CF927C8E94C >> 128;\\n      if (x & 0x800000 > 0)\\n        result = result * 0x1000000000058B90BFBE8F71CB4E4B33D >> 128;\\n      if (x & 0x400000 > 0)\\n        result = result * 0x100000000002C5C85FDF477B662B26945 >> 128;\\n      if (x & 0x200000 > 0)\\n        result = result * 0x10000000000162E42FEFA3AE53369388C >> 128;\\n      if (x & 0x100000 > 0)\\n        result = result * 0x100000000000B17217F7D1D351A389D40 >> 128;\\n      if (x & 0x80000 > 0)\\n        result = result * 0x10000000000058B90BFBE8E8B2D3D4EDE >> 128;\\n      if (x & 0x40000 > 0)\\n        result = result * 0x1000000000002C5C85FDF4741BEA6E77E >> 128;\\n      if (x & 0x20000 > 0)\\n        result = result * 0x100000000000162E42FEFA39FE95583C2 >> 128;\\n      if (x & 0x10000 > 0)\\n        result = result * 0x1000000000000B17217F7D1CFB72B45E1 >> 128;\\n      if (x & 0x8000 > 0)\\n        result = result * 0x100000000000058B90BFBE8E7CC35C3F0 >> 128;\\n      if (x & 0x4000 > 0)\\n        result = result * 0x10000000000002C5C85FDF473E242EA38 >> 128;\\n      if (x & 0x2000 > 0)\\n        result = result * 0x1000000000000162E42FEFA39F02B772C >> 128;\\n      if (x & 0x1000 > 0)\\n        result = result * 0x10000000000000B17217F7D1CF7D83C1A >> 128;\\n      if (x & 0x800 > 0)\\n        result = result * 0x1000000000000058B90BFBE8E7BDCBE2E >> 128;\\n      if (x & 0x400 > 0)\\n        result = result * 0x100000000000002C5C85FDF473DEA871F >> 128;\\n      if (x & 0x200 > 0)\\n        result = result * 0x10000000000000162E42FEFA39EF44D91 >> 128;\\n      if (x & 0x100 > 0)\\n        result = result * 0x100000000000000B17217F7D1CF79E949 >> 128;\\n      if (x & 0x80 > 0)\\n        result = result * 0x10000000000000058B90BFBE8E7BCE544 >> 128;\\n      if (x & 0x40 > 0)\\n        result = result * 0x1000000000000002C5C85FDF473DE6ECA >> 128;\\n      if (x & 0x20 > 0)\\n        result = result * 0x100000000000000162E42FEFA39EF366F >> 128;\\n      if (x & 0x10 > 0)\\n        result = result * 0x1000000000000000B17217F7D1CF79AFA >> 128;\\n      if (x & 0x8 > 0)\\n        result = result * 0x100000000000000058B90BFBE8E7BCD6D >> 128;\\n      if (x & 0x4 > 0)\\n        result = result * 0x10000000000000002C5C85FDF473DE6B2 >> 128;\\n      if (x & 0x2 > 0)\\n        result = result * 0x1000000000000000162E42FEFA39EF358 >> 128;\\n      if (x & 0x1 > 0)\\n        result = result * 0x10000000000000000B17217F7D1CF79AB >> 128;\\n\\n      result >>= uint256 (int256 (63 - (x >> 64)));\\n      require (result <= uint256 (int256 (MAX_64x64)));\\n\\n      return int128 (int256 (result));\\n    }\\n  }\\n\\n  /**\\n   * Calculate natural exponent of x.  Revert on overflow.\\n   *\\n   * @param x signed 64.64-bit fixed point number\\n   * @return signed 64.64-bit fixed point number\\n   */\\n  function exp (int128 x) internal pure returns (int128) {\\n    unchecked {\\n      require (x < 0x400000000000000000); // Overflow\\n\\n      if (x < -0x400000000000000000) return 0; // Underflow\\n\\n      return exp_2 (\\n          int128 (int256 (x) * 0x171547652B82FE1777D0FFDA0D23A7D12 >> 128));\\n    }\\n  }\\n\\n  /**\\n   * Calculate x / y rounding towards zero, where x and y are unsigned 256-bit\\n   * integer numbers.  Revert on overflow or when y is zero.\\n   *\\n   * @param x unsigned 256-bit integer number\\n   * @param y unsigned 256-bit integer number\\n   * @return unsigned 64.64-bit fixed point number\\n   */\\n  function divuu (uint256 x, uint256 y) private pure returns (uint128) {\\n    unchecked {\\n      require (y != 0);\\n\\n      uint256 result;\\n\\n      if (x <= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF)\\n        result = (x << 64) / y;\\n      else {\\n        uint256 msb = 192;\\n        uint256 xc = x >> 192;\\n        if (xc >= 0x100000000) { xc >>= 32; msb += 32; }\\n        if (xc >= 0x10000) { xc >>= 16; msb += 16; }\\n        if (xc >= 0x100) { xc >>= 8; msb += 8; }\\n        if (xc >= 0x10) { xc >>= 4; msb += 4; }\\n        if (xc >= 0x4) { xc >>= 2; msb += 2; }\\n        if (xc >= 0x2) msb += 1;  // No need to shift xc anymore\\n\\n        result = (x << 255 - msb) / ((y - 1 >> msb - 191) + 1);\\n        require (result <= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\\n\\n        uint256 hi = result * (y >> 128);\\n        uint256 lo = result * (y & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\\n\\n        uint256 xh = x >> 192;\\n        uint256 xl = x << 64;\\n\\n        if (xl < lo) xh -= 1;\\n        xl -= lo; // We rely on overflow behavior here\\n        lo = hi << 128;\\n        if (xl < lo) xh -= 1;\\n        xl -= lo; // We rely on overflow behavior here\\n\\n        assert (xh == hi >> 128);\\n\\n        result += xl / y;\\n      }\\n\\n      require (result <= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\\n      return uint128 (result);\\n    }\\n  }\\n\\n  /**\\n   * Calculate sqrt (x) rounding down, where x is unsigned 256-bit integer\\n   * number.\\n   *\\n   * @param x unsigned 256-bit integer number\\n   * @return unsigned 128-bit integer number\\n   */\\n  function sqrtu (uint256 x) private pure returns (uint128) {\\n    unchecked {\\n      if (x == 0) return 0;\\n      else {\\n        uint256 xx = x;\\n        uint256 r = 1;\\n        if (xx >= 0x100000000000000000000000000000000) { xx >>= 128; r <<= 64; }\\n        if (xx >= 0x10000000000000000) { xx >>= 64; r <<= 32; }\\n        if (xx >= 0x100000000) { xx >>= 32; r <<= 16; }\\n        if (xx >= 0x10000) { xx >>= 16; r <<= 8; }\\n        if (xx >= 0x100) { xx >>= 8; r <<= 4; }\\n        if (xx >= 0x10) { xx >>= 4; r <<= 2; }\\n        if (xx >= 0x8) { r <<= 1; }\\n        r = (r + x / r) >> 1;\\n        r = (r + x / r) >> 1;\\n        r = (r + x / r) >> 1;\\n        r = (r + x / r) >> 1;\\n        r = (r + x / r) >> 1;\\n        r = (r + x / r) >> 1;\\n        r = (r + x / r) >> 1; // Seven iterations should be enough\\n        uint256 r1 = x / r;\\n        return uint128 (r < r1 ? r : r1);\\n      }\\n    }\\n  }\\n}\",\"keccak256\":\"0xa2a0b3495973d412515344c4064fbf7983acffa549468b6044908b36e52a211c\",\"license\":\"BSD-4-Clause\"},\"cache/solpp-generated-contracts/DiceRoll.sol\":{\"content\":\"pragma solidity 0.8.3;\\n\\n// SPDX-License-Identifier: MIT\\n\\n\\n\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"./ABDKMath64x64.sol\\\";\\nimport \\\"./GamesCore.sol\\\";\\n\\ncontract DiceRoll is GamesCore {\\n    using SafeMath for uint256;\\n    using SafeMath for uint8;\\n    \\n    /// Maximum possible win\\n    uint256 public maxPayout;\\n\\n    /// Minimal possible choice\\n    uint256 public rangeMin;\\n    /// Maximal possible choice\\n    uint256 public rangeMax;\\n    uint256 public padding;\\n\\n    constructor() payable {\\n        croupier = msg.sender;\\n        profitTaker = msg.sender;\\n\\n        minBet = 1 ether;\\n        maxBet = 5000 ether;\\n        maxPayout = 10000 ether;\\n        rangeMin = 1;\\n        rangeMax = 10000;\\n        padding = 200;\\n        edge = 1;\\n\\n    }\\n\\n    // Check that the ape rate is between min and max bet\\n    modifier choiceInRange(uint256 _choice) {\\n        require(\\n            _choice >= rangeMin + padding,\\n            \\\"DiceRoll: Incorrect value for choice\\\"\\n        );\\n        require(\\n            _choice <= rangeMax + padding,\\n            \\\"DiceRoll: Incorrect value for choice\\\"\\n        );\\n        _;\\n    }\\n\\n    /**\\n        * @notice Calculates the coefficient for choice\\n    */\\n    function multiplier(bool _over, uint256 _choice)\\n        public\\n        view\\n        returns (int128)\\n    {\\n        uint256 winRangeLength = _over ? rangeMax - _choice + 1 : _choice;\\n        uint256 rangeLength = rangeMax - rangeMin + 1;\\n        int128 winChance = ABDKMath64x64.mul(\\n            ABDKMath64x64.div(\\n                ABDKMath64x64.fromUInt(winRangeLength),\\n                ABDKMath64x64.fromUInt(rangeLength)\\n            ),\\n            ABDKMath64x64.fromUInt(uint256(100))\\n        );\\n\\n        return\\n            ABDKMath64x64.div(\\n                ABDKMath64x64.fromUInt(uint256(100).sub(edge)),\\n                winChance\\n            );\\n    }\\n\\n    /**\\n        * @notice Calculates the prize when winning\\n        * @param _bet: Bet amount\\n    */\\n    function payout(\\n        bool _over,\\n        uint256 _choice,\\n        uint256 _bet\\n    ) public view returns (uint256) {\\n        return ABDKMath64x64.mulu(multiplier(_over, _choice), _bet);\\n    }\\n\\n    /**\\n        * @notice Add new game\\n        * @param _choice: Choice\\n        * @param _over: More or less than choice\\n        * @param _seed: Uniqual value for each game\\n    */\\n    function play(\\n        uint256 _choice,\\n        bool _over,\\n        bytes32 _seed\\n    ) public payable betInRange choiceInRange(_choice) uniqueSeed(_seed) {\\n        uint256 possiblePrize = payout(_over, _choice, msg.value);\\n        if (possiblePrize > maxPayout) {\\n            possiblePrize = maxPayout;\\n        }\\n\\n        require(\\n            possiblePrize < address(this).balance,\\n            \\\"DiceRoll: Insufficent funds on contract to cover the bet\\\"\\n        );\\n\\n        totalGamesCount++;\\n        Game storage game = games[_seed];\\n\\n        game.id = totalGamesCount;\\n        game.player = payable(msg.sender);\\n        game.bet = msg.value;\\n        game.state = GameState.PENDING;\\n        game.over = _over;\\n        game.choice = _choice;\\n\\n        houseProfitEther += int256(game.bet);\\n        listGames.push(_seed);\\n\\n        emit GameCreated(game.player, game.bet, game.choice, _seed, game.over);\\n    }\\n\\n    /**\\n        * @notice Confirm the game, with seed\\n        * @param _seed: Uniqual value for each game\\n    */\\n    function confirm(\\n        bytes32 _seed,\\n        uint8 _v,\\n        bytes32 _r,\\n        bytes32 _s\\n    ) public override onlyCroupier {\\n        Game storage game = games[_seed];\\n\\n        require(game.id != 0, \\\"DiceRoll: Game doesn't exist\\\");\\n        require(\\n            game.state == GameState.PENDING,\\n            \\\"DiceRoll: Game already played\\\"\\n        );\\n\\n        bytes memory prefix = \\\"\\\\x19Ethereum Signed Message:\\\\n32\\\";\\n        bytes32 prefixedHash = keccak256(abi.encodePacked(prefix, _seed));\\n\\n        require(\\n            ecrecover(prefixedHash, _v, _r, _s) == croupier,\\n            \\\"DiceRoll: Invalid signature\\\"\\n        );\\n\\n        game.result = (uint256(_s) % 10000) + 1;\\n        int128 _multiplier = multiplier(game.over, game.choice);\\n\\n        if (\\n            (!game.over && (game.choice >= game.result)) ||\\n            (game.over && (game.choice <= game.result))\\n        ) {\\n            game.prize = payout(game.over, game.choice, game.bet);\\n\\n            if (game.prize > maxPayout) {\\n                game.prize = maxPayout;\\n            }\\n            game.player.transfer(game.prize);\\n            houseProfitEther -= int256(game.prize);\\n            game.state = GameState.WON;\\n        } else {\\n            game.prize = 0;\\n            game.state = GameState.LOST;\\n        }\\n\\n        emit GamePlayed(\\n            game.player,\\n            game.id,\\n            ABDKMath64x64.toUInt(_multiplier),\\n            game.bet,\\n            game.prize,\\n            game.choice,\\n            game.result,\\n            _seed,\\n            game.over,\\n            game.state\\n        );\\n    }\\n\\n    /**\\n        * @notice Set new range for choice\\n        * @param _min: New rangeMin\\n        * @param _max: New rangeMax\\n        * @param _padding: New padding\\n    */\\n    function setChoiceRange(\\n        uint256 _min,\\n        uint256 _max,\\n        uint256 _padding\\n    ) public onlyOwner {\\n        rangeMin = _min;\\n        rangeMax = _max;\\n        padding = _padding;\\n    }\\n\\n    /**\\n        * @notice Set new maxPayout    \\n        * @param _ether: New maxPayout\\n    */\\n    function setmaxPayout(uint256 _ether) public onlyOwner {\\n        maxPayout = _ether;\\n    }\\n}\\n\",\"keccak256\":\"0x5d5596780b8b14112af8a50823da3d23070aa4a7171215bb8d4446c62f5e8a59\",\"license\":\"MIT\"},\"cache/solpp-generated-contracts/GamesCore.sol\":{\"content\":\"pragma solidity 0.8.3;\\n\\n// SPDX-License-Identifier: MIT\\n\\n\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\nabstract contract GamesCore is Ownable {\\n    struct Game {\\n        uint256 id;\\n        address payable player;\\n        uint256 bet;\\n        uint256 prize;\\n        uint256 choice;\\n        uint256 result;\\n        bool over;\\n        GameState state;\\n    }\\n\\n    enum GameState {\\n        PENDING,\\n        WON,\\n        LOST\\n    }\\n\\n    /// Number of all games\\n    uint256 public totalGamesCount;\\n    /// Minimal amount for bet\\n    uint256 public minBet;\\n    /// Maximal amount for bet\\n    uint256 public maxBet;\\n\\n    /// Profit from bets\\n    int256 public houseProfitEther;\\n\\n    /// Croupier\\n    address public croupier;\\n    /// Person how will receive houseProfitEther\\n    address public profitTaker;\\n    /// Fee factor\\n    uint8 public edge;\\n\\n    /// Info of each game\\n    mapping(bytes32 => Game) public games;\\n\\n    /// Games seeds\\n    bytes32[] public listGames;\\n\\n    event GameCreated(\\n        address indexed player,\\n        uint256 bet,\\n        uint256 choice,\\n        bytes32 seed,\\n        bool over\\n    );\\n\\n    event GamePlayed(\\n        address indexed player,\\n        uint256 round,\\n        uint256 multiplier,\\n        uint256 bet,\\n        uint256 prize,\\n        uint256 choice,\\n        uint256 result,\\n        bytes32 indexed seed,\\n        bool over,\\n        GameState state\\n    );\\n\\n    // Modifier for functions that can only be ran by the croupier\\n    modifier onlyCroupier() {\\n        require(\\n            msg.sender == croupier,\\n            \\\"Only the croupier can run this function.\\\"\\n        );\\n        _;\\n    }\\n\\n    // Modifier for functions that can only be ran by the profit taker\\n    modifier onlyProfitTaker() {\\n        require(\\n            msg.sender == profitTaker,\\n            \\\"Only the profit taker can run this function.\\\"\\n        );\\n        _;\\n    }\\n\\n    // Check that the rate is between min and max bet\\n    modifier betInRange() {\\n        require(\\n            minBet <= msg.value && msg.value <= maxBet,\\n            \\\"Incorrect amount to bet\\\"\\n        );\\n        _;\\n    }\\n\\n    /// Check that sedd is unique\\n    modifier uniqueSeed(bytes32 _seed) {\\n        require(games[_seed].id == 0, \\\"Seed already used\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @notice Confirm the game, with seed\\n     * @param _seed: Uniqual value for each game\\n     */\\n    function confirm(\\n        bytes32 _seed,\\n        uint8 _v,\\n        bytes32 _r,\\n        bytes32 _s\\n    ) public virtual;\\n\\n    /**\\n     * @notice Set new minBet and maxBet\\n     * @param _min: New minBet\\n     * @param _max: New maxBet\\n     */\\n    function setBetRange(uint256 _min, uint256 _max) public onlyOwner {\\n        minBet = _min;\\n        maxBet = _max;\\n    }\\n\\n    /**\\n     * @notice Set new croupier\\n     * @param _addr: New croupier\\n     */\\n    function setCroupier(address _addr) public onlyOwner {\\n        croupier = _addr;\\n    }\\n\\n    /**\\n     * @notice Set new profitTaker\\n     * @param _profitTaker: New profitTaker\\n     */\\n    function setProfitTaker(address _profitTaker) public onlyOwner {\\n        profitTaker = _profitTaker;\\n    }\\n\\n    /**\\n        * @notice Set new edge    \\n        * @param _e: New edge\\n    */\\n    function setEdge(uint8 _e) public onlyOwner {\\n        edge = _e;\\n    }\\n\\n    /**\\n     * @notice sends houseProfitEther to profitTaker\\n     */\\n    function takeProfit() public onlyProfitTaker {\\n        if (houseProfitEther > 0) {\\n            payable(profitTaker).transfer(uint256(houseProfitEther));\\n            houseProfitEther = 0;\\n        }\\n    }\\n\\n    /**\\n     * @notice sends contract's excessive balance to owner\\n     */\\n    function withdraw() public onlyOwner {\\n        if (houseProfitEther > 0) {\\n            payable(owner()).transfer(\\n                address(this).balance - uint256(houseProfitEther)\\n            );\\n            return;\\n        }\\n\\n        payable(owner()).transfer(address(this).balance);\\n    }\\n\\n    // Fallback function\\n    fallback() external payable {}\\n\\n    receive() external payable {}\\n}\\n\",\"keccak256\":\"0x82bd14a3447a97c5c117e37b5498afde7691dbf5295957adb9415f8a8a172428\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040819052600080546001600160a01b031916339081178255918291907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a350600580546001600160a01b0319163390811790915560068054670de0b6b3a764000060025569010f0cf064dd5920000060035569021e19e0c9bab24000006009556001600a55612710600b5560c8600c5560ff60a01b199092166001600160a81b031990921691909117600160a01b17905561175c806100c56000396000f3fe6080604052600436106101bb5760003560e01c80637f00e8b7116100ec578063b00606a51161008a578063f2fde38b11610064578063f2fde38b1461049f578063f579f882146104bf578063f593a38714610541578063f8bb201c14610557576101c2565b8063b00606a51461044c578063b5185ca41461046c578063e3f35c8f1461047f576101c2565b80638e27362d116100c65780638e27362d146103cd578063abae5050146103e3578063abeb11a914610403578063adc2c98a14610419576101c2565b80637f00e8b7146103665780638bc4aab2146103995780638da5cb5b146103af576101c2565b80635c6c09391161015957806370c105781161013357806370c10578146102fc578063715018a614610311578063722153731461032657806372be411214610346576101c2565b80635c6c09391461028457806365fe09d7146102bc5780636b5c5f39146102dc576101c2565b806350b89a871161019557806350b89a87146102185780635668972b146102385780635b49637e1461024e5780635bdbeb1f14610264576101c2565b80631374df0b146101c457806322728b11146101ed5780633ccfd60b14610203576101c2565b366101c257005b005b3480156101d057600080fd5b506101da600c5481565b6040519081526020015b60405180910390f35b3480156101f957600080fd5b506101da60025481565b34801561020f57600080fd5b506101c2610577565b34801561022457600080fd5b506101c2610233366004611469565b610647565b34801561024457600080fd5b506101da600b5481565b34801561025a57600080fd5b506101da60035481565b34801561027057600080fd5b506101da61027f366004611390565b61067f565b34801561029057600080fd5b506006546102a4906001600160a01b031681565b6040516001600160a01b0390911681526020016101e4565b3480156102c857600080fd5b506101da6102d73660046113c2565b61069c565b3480156102e857600080fd5b506005546102a4906001600160a01b031681565b34801561030857600080fd5b506101c26106bd565b34801561031d57600080fd5b506101c261077b565b34801561033257600080fd5b506101c2610341366004611340565b6107ef565b34801561035257600080fd5b506101c2610361366004611494565b61083b565b34801561037257600080fd5b50610386610381366004611367565b610885565b604051600f9190910b81526020016101e4565b3480156103a557600080fd5b506101da60045481565b3480156103bb57600080fd5b506000546001600160a01b03166102a4565b3480156103d957600080fd5b506101da60095481565b3480156103ef57600080fd5b506101c26103fe366004611448565b610936565b34801561040f57600080fd5b506101da600a5481565b34801561042557600080fd5b5060065461043a90600160a01b900460ff1681565b60405160ff90911681526020016101e4565b34801561045857600080fd5b506101c26104673660046113da565b61096b565b6101c261047a366004611414565b610d9a565b34801561048b57600080fd5b506101c261049a3660046113c2565b61105a565b3480156104ab57600080fd5b506101c26104ba366004611340565b611089565b3480156104cb57600080fd5b5061052d6104da3660046113c2565b600760205260009081526040902080546001820154600283015460038401546004850154600586015460069096015494956001600160a01b03909416949293919290919060ff8082169161010090041688565b6040516101e4989796959493929190611588565b34801561054d57600080fd5b506101da60015481565b34801561056357600080fd5b506101c2610572366004611340565b611173565b6000546001600160a01b031633146105aa5760405162461bcd60e51b81526004016105a190611553565b60405180910390fd5b60006004541315610609576000546001600160a01b03166001600160a01b03166108fc600454476105db91906116be565b6040518115909202916000818181858888f19350505050158015610603573d6000803e3d6000fd5b50610645565b600080546040516001600160a01b03909116914780156108fc02929091818181858888f19350505050158015610643573d6000803e3d6000fd5b505b565b6000546001600160a01b031633146106715760405162461bcd60e51b81526004016105a190611553565b600a92909255600b55600c55565b600061069461068e8585610885565b836111bf565b949350505050565b600881815481106106ac57600080fd5b600091825260209091200154905081565b6006546001600160a01b0316331461072c5760405162461bcd60e51b815260206004820152602c60248201527f4f6e6c79207468652070726f6669742074616b65722063616e2072756e20746860448201526b34b990333ab731ba34b7b71760a11b60648201526084016105a1565b60006004541315610645576006546004546040516001600160a01b039092169181156108fc0291906000818181858888f19350505050158015610773573d6000803e3d6000fd5b506000600455565b6000546001600160a01b031633146107a55760405162461bcd60e51b81526004016105a190611553565b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b6000546001600160a01b031633146108195760405162461bcd60e51b81526004016105a190611553565b600680546001600160a01b0319166001600160a01b0392909216919091179055565b6000546001600160a01b031633146108655760405162461bcd60e51b81526004016105a190611553565b6006805460ff909216600160a01b0260ff60a01b19909216919091179055565b6000808361089357826108ac565b82600b546108a191906116be565b6108ac906001611667565b90506000600a54600b546108c091906116be565b6108cb906001611667565b905060006108fb6108ec6108de85611230565b6108e785611230565b611253565b6108f66064611230565b6112c1565b60065490915061092a906109249061091f90606490600160a01b900460ff166112f7565b611230565b82611253565b93505050505b92915050565b6000546001600160a01b031633146109605760405162461bcd60e51b81526004016105a190611553565b600291909155600355565b6005546001600160a01b031633146109d65760405162461bcd60e51b815260206004820152602860248201527f4f6e6c79207468652063726f75706965722063616e2072756e207468697320666044820152673ab731ba34b7b71760c11b60648201526084016105a1565b60008481526007602052604090208054610a325760405162461bcd60e51b815260206004820152601c60248201527f44696365526f6c6c3a2047616d6520646f65736e27742065786973740000000060448201526064016105a1565b60006006820154610100900460ff166002811115610a6057634e487b7160e01b600052602160045260246000fd5b14610aad5760405162461bcd60e51b815260206004820152601d60248201527f44696365526f6c6c3a2047616d6520616c726561647920706c6179656400000060448201526064016105a1565b60006040518060400160405280601c81526020017f19457468657265756d205369676e6564204d6573736167653a0a333200000000815250905060008187604051602001610afc9291906114d0565b60408051808303601f1901815282825280516020918201206005546000855291840180845281905260ff8a169284019290925260608301889052608083018790529092506001600160a01b03169060019060a0016020604051602081039080840390855afa158015610b72573d6000803e3d6000fd5b505050602060405103516001600160a01b031614610bd25760405162461bcd60e51b815260206004820152601b60248201527f44696365526f6c6c3a20496e76616c6964207369676e6174757265000000000060448201526064016105a1565b610bde612710856116f0565b610be9906001611667565b600584015560068301546004840154600091610c0a9160ff90911690610885565b600685015490915060ff16158015610c2a57508360050154846004015410155b80610c4c5750600684015460ff168015610c4c57508360050154846004015411155b15610cf957600684015460048501546002860154610c6e9260ff16919061067f565b600385018190556009541015610c875760095460038501555b600184015460038501546040516001600160a01b039092169181156108fc0291906000818181858888f19350505050158015610cc7573d6000803e3d6000fd5b50836003015460046000828254610cde919061167f565b909155505060068401805461ff001916610100179055610d12565b6000600385015560068401805461ff0019166102001790555b6001840154845489916001600160a01b0316907e867f710c53fead2d43f716b65ca12f0ecbef01e58edb8cd235073f9149243190610d4f85611303565b600289015460038a015460048b015460058c015460068d0154604051610d889796959493929160ff8082169261010090920416906115dd565b60405180910390a35050505050505050565b3460025411158015610dae57506003543411155b610dfa5760405162461bcd60e51b815260206004820152601760248201527f496e636f727265637420616d6f756e7420746f2062657400000000000000000060448201526064016105a1565b82600c54600a54610e0b9190611667565b811015610e2a5760405162461bcd60e51b81526004016105a19061150f565b600c54600b54610e3a9190611667565b811115610e595760405162461bcd60e51b81526004016105a19061150f565b600082815260076020526040902054829015610eab5760405162461bcd60e51b815260206004820152601160248201527014d9595908185b1c9958591e481d5cd959607a1b60448201526064016105a1565b6000610eb885873461067f565b9050600954811115610ec957506009545b478110610f3e5760405162461bcd60e51b815260206004820152603860248201527f44696365526f6c6c3a20496e737566666963656e742066756e6473206f6e206360448201527f6f6e747261637420746f20636f7665722074686520626574000000000000000060648201526084016105a1565b60018054906000610f4e836116d5565b90915550506000848152600760205260408120600180548255810180546001600160a01b03191633179055346002820181905560068201805461ffff191689151517905560048083018a9055805492939192909190610fae908490611626565b909155505060088054600180820183556000929092527ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee30186905581015460028201546004830154600684015460408051938452602084019290925282820189905260ff1615156060830152516001600160a01b03909216917f5c0023731903eb93130ada523196982a48d902eea3b24cc0b647c08d99007b609181900360800190a250505050505050565b6000546001600160a01b031633146110845760405162461bcd60e51b81526004016105a190611553565b600955565b6000546001600160a01b031633146110b35760405162461bcd60e51b81526004016105a190611553565b6001600160a01b0381166111185760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016105a1565b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b6000546001600160a01b0316331461119d5760405162461bcd60e51b81526004016105a190611553565b600580546001600160a01b0319166001600160a01b0392909216919091179055565b6000816111ce57506000610930565b600083600f0b12156111df57600080fd5b600f83900b6fffffffffffffffffffffffffffffffff8316810260401c90608084901c026001600160c01b0381111561121757600080fd5b60401b811981111561122857600080fd5b019392505050565b6000677fffffffffffffff82111561124757600080fd5b50604081901b5b919050565b600081600f0b6000141561126657600080fd5b600082600f0b604085600f0b901b8161128f57634e487b7160e01b600052601260045260246000fd5b05905060016001607f1b031981128015906112b1575060016001607f1b038113155b6112ba57600080fd5b9392505050565b6000600f83810b9083900b0260401d60016001607f1b031981128015906112b1575060016001607f1b038113156112ba57600080fd5b60006112ba82846116be565b60008082600f0b121561131557600080fd5b50600f0b60401d90565b8035801515811461124e57600080fd5b803560ff8116811461124e57600080fd5b600060208284031215611351578081fd5b81356001600160a01b03811681146112ba578182fd5b60008060408385031215611379578081fd5b6113828361131f565b946020939093013593505050565b6000806000606084860312156113a4578081fd5b6113ad8461131f565b95602085013595506040909401359392505050565b6000602082840312156113d3578081fd5b5035919050565b600080600080608085870312156113ef578081fd5b843593506113ff6020860161132f565b93969395505050506040820135916060013590565b600080600060608486031215611428578283fd5b833592506114386020850161131f565b9150604084013590509250925092565b6000806040838503121561145a578182fd5b50508035926020909101359150565b60008060006060848603121561147d578283fd5b505081359360208301359350604090920135919050565b6000602082840312156114a5578081fd5b6112ba8261132f565b600381106114cc57634e487b7160e01b600052602160045260246000fd5b9052565b60008351815b818110156114f057602081870181015185830152016114d6565b818111156114fe5782828501525b509190910191825250602001919050565b60208082526024908201527f44696365526f6c6c3a20496e636f72726563742076616c756520666f722063686040820152636f69636560e01b606082015260800190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b8881526001600160a01b038816602082015260408101879052606081018690526080810185905260a0810184905282151560c082015261010081016115d060e08301846114ae565b9998505050505050505050565b60006101008201905089825267ffffffffffffffff891660208301528760408301528660608301528560808301528460a083015283151560c08301526115d060e08301846114ae565b600080821280156001600160ff1b038490038513161561164857611648611710565b600160ff1b839003841281161561166157611661611710565b50500190565b6000821982111561167a5761167a611710565b500190565b60008083128015600160ff1b85018412161561169d5761169d611710565b6001600160ff1b03840183138116156116b8576116b8611710565b50500390565b6000828210156116d0576116d0611710565b500390565b60006000198214156116e9576116e9611710565b5060010190565b60008261170b57634e487b7160e01b81526012600452602481fd5b500690565b634e487b7160e01b600052601160045260246000fdfea2646970667358221220baaaab3a2a3e86dd8d0801830f43ff438234779cee2df1ef84fbf04ddbbcf6d864736f6c63430008030033",
  "deployedBytecode": "0x6080604052600436106101bb5760003560e01c80637f00e8b7116100ec578063b00606a51161008a578063f2fde38b11610064578063f2fde38b1461049f578063f579f882146104bf578063f593a38714610541578063f8bb201c14610557576101c2565b8063b00606a51461044c578063b5185ca41461046c578063e3f35c8f1461047f576101c2565b80638e27362d116100c65780638e27362d146103cd578063abae5050146103e3578063abeb11a914610403578063adc2c98a14610419576101c2565b80637f00e8b7146103665780638bc4aab2146103995780638da5cb5b146103af576101c2565b80635c6c09391161015957806370c105781161013357806370c10578146102fc578063715018a614610311578063722153731461032657806372be411214610346576101c2565b80635c6c09391461028457806365fe09d7146102bc5780636b5c5f39146102dc576101c2565b806350b89a871161019557806350b89a87146102185780635668972b146102385780635b49637e1461024e5780635bdbeb1f14610264576101c2565b80631374df0b146101c457806322728b11146101ed5780633ccfd60b14610203576101c2565b366101c257005b005b3480156101d057600080fd5b506101da600c5481565b6040519081526020015b60405180910390f35b3480156101f957600080fd5b506101da60025481565b34801561020f57600080fd5b506101c2610577565b34801561022457600080fd5b506101c2610233366004611469565b610647565b34801561024457600080fd5b506101da600b5481565b34801561025a57600080fd5b506101da60035481565b34801561027057600080fd5b506101da61027f366004611390565b61067f565b34801561029057600080fd5b506006546102a4906001600160a01b031681565b6040516001600160a01b0390911681526020016101e4565b3480156102c857600080fd5b506101da6102d73660046113c2565b61069c565b3480156102e857600080fd5b506005546102a4906001600160a01b031681565b34801561030857600080fd5b506101c26106bd565b34801561031d57600080fd5b506101c261077b565b34801561033257600080fd5b506101c2610341366004611340565b6107ef565b34801561035257600080fd5b506101c2610361366004611494565b61083b565b34801561037257600080fd5b50610386610381366004611367565b610885565b604051600f9190910b81526020016101e4565b3480156103a557600080fd5b506101da60045481565b3480156103bb57600080fd5b506000546001600160a01b03166102a4565b3480156103d957600080fd5b506101da60095481565b3480156103ef57600080fd5b506101c26103fe366004611448565b610936565b34801561040f57600080fd5b506101da600a5481565b34801561042557600080fd5b5060065461043a90600160a01b900460ff1681565b60405160ff90911681526020016101e4565b34801561045857600080fd5b506101c26104673660046113da565b61096b565b6101c261047a366004611414565b610d9a565b34801561048b57600080fd5b506101c261049a3660046113c2565b61105a565b3480156104ab57600080fd5b506101c26104ba366004611340565b611089565b3480156104cb57600080fd5b5061052d6104da3660046113c2565b600760205260009081526040902080546001820154600283015460038401546004850154600586015460069096015494956001600160a01b03909416949293919290919060ff8082169161010090041688565b6040516101e4989796959493929190611588565b34801561054d57600080fd5b506101da60015481565b34801561056357600080fd5b506101c2610572366004611340565b611173565b6000546001600160a01b031633146105aa5760405162461bcd60e51b81526004016105a190611553565b60405180910390fd5b60006004541315610609576000546001600160a01b03166001600160a01b03166108fc600454476105db91906116be565b6040518115909202916000818181858888f19350505050158015610603573d6000803e3d6000fd5b50610645565b600080546040516001600160a01b03909116914780156108fc02929091818181858888f19350505050158015610643573d6000803e3d6000fd5b505b565b6000546001600160a01b031633146106715760405162461bcd60e51b81526004016105a190611553565b600a92909255600b55600c55565b600061069461068e8585610885565b836111bf565b949350505050565b600881815481106106ac57600080fd5b600091825260209091200154905081565b6006546001600160a01b0316331461072c5760405162461bcd60e51b815260206004820152602c60248201527f4f6e6c79207468652070726f6669742074616b65722063616e2072756e20746860448201526b34b990333ab731ba34b7b71760a11b60648201526084016105a1565b60006004541315610645576006546004546040516001600160a01b039092169181156108fc0291906000818181858888f19350505050158015610773573d6000803e3d6000fd5b506000600455565b6000546001600160a01b031633146107a55760405162461bcd60e51b81526004016105a190611553565b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b6000546001600160a01b031633146108195760405162461bcd60e51b81526004016105a190611553565b600680546001600160a01b0319166001600160a01b0392909216919091179055565b6000546001600160a01b031633146108655760405162461bcd60e51b81526004016105a190611553565b6006805460ff909216600160a01b0260ff60a01b19909216919091179055565b6000808361089357826108ac565b82600b546108a191906116be565b6108ac906001611667565b90506000600a54600b546108c091906116be565b6108cb906001611667565b905060006108fb6108ec6108de85611230565b6108e785611230565b611253565b6108f66064611230565b6112c1565b60065490915061092a906109249061091f90606490600160a01b900460ff166112f7565b611230565b82611253565b93505050505b92915050565b6000546001600160a01b031633146109605760405162461bcd60e51b81526004016105a190611553565b600291909155600355565b6005546001600160a01b031633146109d65760405162461bcd60e51b815260206004820152602860248201527f4f6e6c79207468652063726f75706965722063616e2072756e207468697320666044820152673ab731ba34b7b71760c11b60648201526084016105a1565b60008481526007602052604090208054610a325760405162461bcd60e51b815260206004820152601c60248201527f44696365526f6c6c3a2047616d6520646f65736e27742065786973740000000060448201526064016105a1565b60006006820154610100900460ff166002811115610a6057634e487b7160e01b600052602160045260246000fd5b14610aad5760405162461bcd60e51b815260206004820152601d60248201527f44696365526f6c6c3a2047616d6520616c726561647920706c6179656400000060448201526064016105a1565b60006040518060400160405280601c81526020017f19457468657265756d205369676e6564204d6573736167653a0a333200000000815250905060008187604051602001610afc9291906114d0565b60408051808303601f1901815282825280516020918201206005546000855291840180845281905260ff8a169284019290925260608301889052608083018790529092506001600160a01b03169060019060a0016020604051602081039080840390855afa158015610b72573d6000803e3d6000fd5b505050602060405103516001600160a01b031614610bd25760405162461bcd60e51b815260206004820152601b60248201527f44696365526f6c6c3a20496e76616c6964207369676e6174757265000000000060448201526064016105a1565b610bde612710856116f0565b610be9906001611667565b600584015560068301546004840154600091610c0a9160ff90911690610885565b600685015490915060ff16158015610c2a57508360050154846004015410155b80610c4c5750600684015460ff168015610c4c57508360050154846004015411155b15610cf957600684015460048501546002860154610c6e9260ff16919061067f565b600385018190556009541015610c875760095460038501555b600184015460038501546040516001600160a01b039092169181156108fc0291906000818181858888f19350505050158015610cc7573d6000803e3d6000fd5b50836003015460046000828254610cde919061167f565b909155505060068401805461ff001916610100179055610d12565b6000600385015560068401805461ff0019166102001790555b6001840154845489916001600160a01b0316907e867f710c53fead2d43f716b65ca12f0ecbef01e58edb8cd235073f9149243190610d4f85611303565b600289015460038a015460048b015460058c015460068d0154604051610d889796959493929160ff8082169261010090920416906115dd565b60405180910390a35050505050505050565b3460025411158015610dae57506003543411155b610dfa5760405162461bcd60e51b815260206004820152601760248201527f496e636f727265637420616d6f756e7420746f2062657400000000000000000060448201526064016105a1565b82600c54600a54610e0b9190611667565b811015610e2a5760405162461bcd60e51b81526004016105a19061150f565b600c54600b54610e3a9190611667565b811115610e595760405162461bcd60e51b81526004016105a19061150f565b600082815260076020526040902054829015610eab5760405162461bcd60e51b815260206004820152601160248201527014d9595908185b1c9958591e481d5cd959607a1b60448201526064016105a1565b6000610eb885873461067f565b9050600954811115610ec957506009545b478110610f3e5760405162461bcd60e51b815260206004820152603860248201527f44696365526f6c6c3a20496e737566666963656e742066756e6473206f6e206360448201527f6f6e747261637420746f20636f7665722074686520626574000000000000000060648201526084016105a1565b60018054906000610f4e836116d5565b90915550506000848152600760205260408120600180548255810180546001600160a01b03191633179055346002820181905560068201805461ffff191689151517905560048083018a9055805492939192909190610fae908490611626565b909155505060088054600180820183556000929092527ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee30186905581015460028201546004830154600684015460408051938452602084019290925282820189905260ff1615156060830152516001600160a01b03909216917f5c0023731903eb93130ada523196982a48d902eea3b24cc0b647c08d99007b609181900360800190a250505050505050565b6000546001600160a01b031633146110845760405162461bcd60e51b81526004016105a190611553565b600955565b6000546001600160a01b031633146110b35760405162461bcd60e51b81526004016105a190611553565b6001600160a01b0381166111185760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016105a1565b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b6000546001600160a01b0316331461119d5760405162461bcd60e51b81526004016105a190611553565b600580546001600160a01b0319166001600160a01b0392909216919091179055565b6000816111ce57506000610930565b600083600f0b12156111df57600080fd5b600f83900b6fffffffffffffffffffffffffffffffff8316810260401c90608084901c026001600160c01b0381111561121757600080fd5b60401b811981111561122857600080fd5b019392505050565b6000677fffffffffffffff82111561124757600080fd5b50604081901b5b919050565b600081600f0b6000141561126657600080fd5b600082600f0b604085600f0b901b8161128f57634e487b7160e01b600052601260045260246000fd5b05905060016001607f1b031981128015906112b1575060016001607f1b038113155b6112ba57600080fd5b9392505050565b6000600f83810b9083900b0260401d60016001607f1b031981128015906112b1575060016001607f1b038113156112ba57600080fd5b60006112ba82846116be565b60008082600f0b121561131557600080fd5b50600f0b60401d90565b8035801515811461124e57600080fd5b803560ff8116811461124e57600080fd5b600060208284031215611351578081fd5b81356001600160a01b03811681146112ba578182fd5b60008060408385031215611379578081fd5b6113828361131f565b946020939093013593505050565b6000806000606084860312156113a4578081fd5b6113ad8461131f565b95602085013595506040909401359392505050565b6000602082840312156113d3578081fd5b5035919050565b600080600080608085870312156113ef578081fd5b843593506113ff6020860161132f565b93969395505050506040820135916060013590565b600080600060608486031215611428578283fd5b833592506114386020850161131f565b9150604084013590509250925092565b6000806040838503121561145a578182fd5b50508035926020909101359150565b60008060006060848603121561147d578283fd5b505081359360208301359350604090920135919050565b6000602082840312156114a5578081fd5b6112ba8261132f565b600381106114cc57634e487b7160e01b600052602160045260246000fd5b9052565b60008351815b818110156114f057602081870181015185830152016114d6565b818111156114fe5782828501525b509190910191825250602001919050565b60208082526024908201527f44696365526f6c6c3a20496e636f72726563742076616c756520666f722063686040820152636f69636560e01b606082015260800190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b8881526001600160a01b038816602082015260408101879052606081018690526080810185905260a0810184905282151560c082015261010081016115d060e08301846114ae565b9998505050505050505050565b60006101008201905089825267ffffffffffffffff891660208301528760408301528660608301528560808301528460a083015283151560c08301526115d060e08301846114ae565b600080821280156001600160ff1b038490038513161561164857611648611710565b600160ff1b839003841281161561166157611661611710565b50500190565b6000821982111561167a5761167a611710565b500190565b60008083128015600160ff1b85018412161561169d5761169d611710565b6001600160ff1b03840183138116156116b8576116b8611710565b50500390565b6000828210156116d0576116d0611710565b500390565b60006000198214156116e9576116e9611710565b5060010190565b60008261170b57634e487b7160e01b81526012600452602481fd5b500690565b634e487b7160e01b600052601160045260246000fdfea2646970667358221220baaaab3a2a3e86dd8d0801830f43ff438234779cee2df1ef84fbf04ddbbcf6d864736f6c63430008030033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "confirm(bytes32,uint8,bytes32,bytes32)": {
        "params": {
          "_seed": ": Uniqual value for each game"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "payout(bool,uint256,uint256)": {
        "params": {
          "_bet": ": Bet amount"
        }
      },
      "play(uint256,bool,bytes32)": {
        "params": {
          "_choice": ": Choice",
          "_over": ": More or less than choice",
          "_seed": ": Uniqual value for each game"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "setBetRange(uint256,uint256)": {
        "params": {
          "_max": ": New maxBet",
          "_min": ": New minBet"
        }
      },
      "setChoiceRange(uint256,uint256,uint256)": {
        "params": {
          "_max": ": New rangeMax",
          "_min": ": New rangeMin",
          "_padding": ": New padding"
        }
      },
      "setCroupier(address)": {
        "params": {
          "_addr": ": New croupier"
        }
      },
      "setEdge(uint8)": {
        "params": {
          "_e": ": New edge"
        }
      },
      "setmaxPayout(uint256)": {
        "params": {
          "_ether": ": New maxPayout"
        }
      },
      "setProfitTaker(address)": {
        "params": {
          "_profitTaker": ": New profitTaker"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "confirm(bytes32,uint8,bytes32,bytes32)": {
        "notice": "Confirm the game, with seed"
      },
      "croupier()": {
        "notice": "Croupier"
      },
      "edge()": {
        "notice": "Fee factor"
      },
      "games(bytes32)": {
        "notice": "Info of each game"
      },
      "houseProfitEther()": {
        "notice": "Profit from bets"
      },
      "listGames(uint256)": {
        "notice": "Games seeds"
      },
      "maxBet()": {
        "notice": "Maximal amount for bet"
      },
      "maxPayout()": {
        "notice": "Maximum possible win"
      },
      "minBet()": {
        "notice": "Minimal amount for bet"
      },
      "multiplier(bool,uint256)": {
        "notice": "Calculates the coefficient for choice"
      },
      "payout(bool,uint256,uint256)": {
        "notice": "Calculates the prize when winning"
      },
      "play(uint256,bool,bytes32)": {
        "notice": "Add new game"
      },
      "profitTaker()": {
        "notice": "Person how will receive houseProfitEther"
      },
      "rangeMax()": {
        "notice": "Maximal possible choice"
      },
      "rangeMin()": {
        "notice": "Minimal possible choice"
      },
      "setBetRange(uint256,uint256)": {
        "notice": "Set new minBet and maxBet"
      },
      "setChoiceRange(uint256,uint256,uint256)": {
        "notice": "Set new range for choice"
      },
      "setCroupier(address)": {
        "notice": "Set new croupier"
      },
      "setEdge(uint8)": {
        "notice": "Set new edge    "
      },
      "setmaxPayout(uint256)": {
        "notice": "Set new maxPayout    "
      },
      "setProfitTaker(address)": {
        "notice": "Set new profitTaker"
      },
      "takeProfit()": {
        "notice": "sends houseProfitEther to profitTaker"
      },
      "totalGamesCount()": {
        "notice": "Number of all games"
      },
      "withdraw()": {
        "notice": "sends contract's excessive balance to owner"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "cache/solpp-generated-contracts/DiceRoll.sol:DiceRoll",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 4215,
        "contract": "cache/solpp-generated-contracts/DiceRoll.sol:DiceRoll",
        "label": "totalGamesCount",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 4218,
        "contract": "cache/solpp-generated-contracts/DiceRoll.sol:DiceRoll",
        "label": "minBet",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 4221,
        "contract": "cache/solpp-generated-contracts/DiceRoll.sol:DiceRoll",
        "label": "maxBet",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 4224,
        "contract": "cache/solpp-generated-contracts/DiceRoll.sol:DiceRoll",
        "label": "houseProfitEther",
        "offset": 0,
        "slot": "4",
        "type": "t_int256"
      },
      {
        "astId": 4227,
        "contract": "cache/solpp-generated-contracts/DiceRoll.sol:DiceRoll",
        "label": "croupier",
        "offset": 0,
        "slot": "5",
        "type": "t_address"
      },
      {
        "astId": 4230,
        "contract": "cache/solpp-generated-contracts/DiceRoll.sol:DiceRoll",
        "label": "profitTaker",
        "offset": 0,
        "slot": "6",
        "type": "t_address"
      },
      {
        "astId": 4233,
        "contract": "cache/solpp-generated-contracts/DiceRoll.sol:DiceRoll",
        "label": "edge",
        "offset": 20,
        "slot": "6",
        "type": "t_uint8"
      },
      {
        "astId": 4239,
        "contract": "cache/solpp-generated-contracts/DiceRoll.sol:DiceRoll",
        "label": "games",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_bytes32,t_struct(Game)4208_storage)"
      },
      {
        "astId": 4243,
        "contract": "cache/solpp-generated-contracts/DiceRoll.sol:DiceRoll",
        "label": "listGames",
        "offset": 0,
        "slot": "8",
        "type": "t_array(t_bytes32)dyn_storage"
      },
      {
        "astId": 3655,
        "contract": "cache/solpp-generated-contracts/DiceRoll.sol:DiceRoll",
        "label": "maxPayout",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      },
      {
        "astId": 3658,
        "contract": "cache/solpp-generated-contracts/DiceRoll.sol:DiceRoll",
        "label": "rangeMin",
        "offset": 0,
        "slot": "10",
        "type": "t_uint256"
      },
      {
        "astId": 3661,
        "contract": "cache/solpp-generated-contracts/DiceRoll.sol:DiceRoll",
        "label": "rangeMax",
        "offset": 0,
        "slot": "11",
        "type": "t_uint256"
      },
      {
        "astId": 3663,
        "contract": "cache/solpp-generated-contracts/DiceRoll.sol:DiceRoll",
        "label": "padding",
        "offset": 0,
        "slot": "12",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_address_payable": {
        "encoding": "inplace",
        "label": "address payable",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_enum(GameState)4212": {
        "encoding": "inplace",
        "label": "enum GamesCore.GameState",
        "numberOfBytes": "1"
      },
      "t_int256": {
        "encoding": "inplace",
        "label": "int256",
        "numberOfBytes": "32"
      },
      "t_mapping(t_bytes32,t_struct(Game)4208_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct GamesCore.Game)",
        "numberOfBytes": "32",
        "value": "t_struct(Game)4208_storage"
      },
      "t_struct(Game)4208_storage": {
        "encoding": "inplace",
        "label": "struct GamesCore.Game",
        "members": [
          {
            "astId": 4192,
            "contract": "cache/solpp-generated-contracts/DiceRoll.sol:DiceRoll",
            "label": "id",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 4194,
            "contract": "cache/solpp-generated-contracts/DiceRoll.sol:DiceRoll",
            "label": "player",
            "offset": 0,
            "slot": "1",
            "type": "t_address_payable"
          },
          {
            "astId": 4196,
            "contract": "cache/solpp-generated-contracts/DiceRoll.sol:DiceRoll",
            "label": "bet",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 4198,
            "contract": "cache/solpp-generated-contracts/DiceRoll.sol:DiceRoll",
            "label": "prize",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 4200,
            "contract": "cache/solpp-generated-contracts/DiceRoll.sol:DiceRoll",
            "label": "choice",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 4202,
            "contract": "cache/solpp-generated-contracts/DiceRoll.sol:DiceRoll",
            "label": "result",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 4204,
            "contract": "cache/solpp-generated-contracts/DiceRoll.sol:DiceRoll",
            "label": "over",
            "offset": 0,
            "slot": "6",
            "type": "t_bool"
          },
          {
            "astId": 4207,
            "contract": "cache/solpp-generated-contracts/DiceRoll.sol:DiceRoll",
            "label": "state",
            "offset": 1,
            "slot": "6",
            "type": "t_enum(GameState)4212"
          }
        ],
        "numberOfBytes": "224"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}