/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface FightBettingInterface extends ethers.utils.Interface {
  functions: {
    "BNBBet(uint8)": FunctionFragment;
    "XBLZDBet(uint8,uint256)": FunctionFragment;
    "cancelFight()": FunctionFragment;
    "desc()": FunctionFragment;
    "earned(address)": FunctionFragment;
    "endTime()": FunctionFragment;
    "finalizeFight(uint8)": FunctionFragment;
    "getFees()": FunctionFragment;
    "getRewards()": FunctionFragment;
    "isCanceled()": FunctionFragment;
    "isFeesClaimed()": FunctionFragment;
    "isFinal()": FunctionFragment;
    "isOwner()": FunctionFragment;
    "isPaused()": FunctionFragment;
    "lastClaimTime()": FunctionFragment;
    "loomdartBNBBet(address)": FunctionFragment;
    "loomdartBNBPot()": FunctionFragment;
    "loomdartXBLZDBet(address)": FunctionFragment;
    "loomdartXBLZDPot()": FunctionFragment;
    "notifyRewardAmount(uint256,uint256)": FunctionFragment;
    "owner()": FunctionFragment;
    "pauseBetting()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "rescueFunds(address)": FunctionFragment;
    "rewardDistribution()": FunctionFragment;
    "rookieBNBBet(address)": FunctionFragment;
    "rookieBNBPot()": FunctionFragment;
    "rookieXBLZDBet(address)": FunctionFragment;
    "rookieXBLZDPot()": FunctionFragment;
    "setRewardDistribution(address)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "unpauseBetting()": FunctionFragment;
    "winner()": FunctionFragment;
    "xblzd()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "BNBBet",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "XBLZDBet",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelFight",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "desc", values?: undefined): string;
  encodeFunctionData(functionFragment: "earned", values: [string]): string;
  encodeFunctionData(functionFragment: "endTime", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "finalizeFight",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "getFees", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getRewards",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isCanceled",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isFeesClaimed",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "isFinal", values?: undefined): string;
  encodeFunctionData(functionFragment: "isOwner", values?: undefined): string;
  encodeFunctionData(functionFragment: "isPaused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "lastClaimTime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "loomdartBNBBet",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "loomdartBNBPot",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "loomdartXBLZDBet",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "loomdartXBLZDPot",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "notifyRewardAmount",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pauseBetting",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "rescueFunds", values: [string]): string;
  encodeFunctionData(
    functionFragment: "rewardDistribution",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rookieBNBBet",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "rookieBNBPot",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rookieXBLZDBet",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "rookieXBLZDPot",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setRewardDistribution",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "unpauseBetting",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "winner", values?: undefined): string;
  encodeFunctionData(functionFragment: "xblzd", values?: undefined): string;

  decodeFunctionResult(functionFragment: "BNBBet", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "XBLZDBet", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "cancelFight",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "desc", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "earned", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "endTime", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "finalizeFight",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getFees", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getRewards", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isCanceled", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isFeesClaimed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isFinal", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isOwner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isPaused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "lastClaimTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "loomdartBNBBet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "loomdartBNBPot",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "loomdartXBLZDBet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "loomdartXBLZDPot",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "notifyRewardAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pauseBetting",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rescueFunds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardDistribution",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rookieBNBBet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rookieBNBPot",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rookieXBLZDBet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rookieXBLZDPot",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRewardDistribution",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unpauseBetting",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "winner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "xblzd", data: BytesLike): Result;

  events: {
    "EarningsPaid(address,uint256,uint256)": EventFragment;
    "LoomdartBNBBet(address,uint256)": EventFragment;
    "LoomdartXBLZDBet(address,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "RookieBNBBet(address,uint256)": EventFragment;
    "RookieXBLZDBet(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "EarningsPaid"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LoomdartBNBBet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LoomdartXBLZDBet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RookieBNBBet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RookieXBLZDBet"): EventFragment;
}

export class FightBetting extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: FightBettingInterface;

  functions: {
    BNBBet(
      fighter: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    "BNBBet(uint8)"(
      fighter: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    XBLZDBet(
      fighter: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "XBLZDBet(uint8,uint256)"(
      fighter: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    cancelFight(overrides?: Overrides): Promise<ContractTransaction>;

    "cancelFight()"(overrides?: Overrides): Promise<ContractTransaction>;

    desc(overrides?: CallOverrides): Promise<[string]>;

    "desc()"(overrides?: CallOverrides): Promise<[string]>;

    earned(
      account: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        bnbEarnings: BigNumber;
        xblzdEarnings: BigNumber;
      }
    >;

    "earned(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        bnbEarnings: BigNumber;
        xblzdEarnings: BigNumber;
      }
    >;

    endTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    "endTime()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    finalizeFight(
      fighter: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "finalizeFight(uint8)"(
      fighter: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    getFees(overrides?: Overrides): Promise<ContractTransaction>;

    "getFees()"(overrides?: Overrides): Promise<ContractTransaction>;

    getRewards(overrides?: Overrides): Promise<ContractTransaction>;

    "getRewards()"(overrides?: Overrides): Promise<ContractTransaction>;

    isCanceled(overrides?: CallOverrides): Promise<[boolean]>;

    "isCanceled()"(overrides?: CallOverrides): Promise<[boolean]>;

    isFeesClaimed(overrides?: CallOverrides): Promise<[boolean]>;

    "isFeesClaimed()"(overrides?: CallOverrides): Promise<[boolean]>;

    isFinal(overrides?: CallOverrides): Promise<[boolean]>;

    "isFinal()"(overrides?: CallOverrides): Promise<[boolean]>;

    isOwner(overrides?: CallOverrides): Promise<[boolean]>;

    "isOwner()"(overrides?: CallOverrides): Promise<[boolean]>;

    isPaused(overrides?: CallOverrides): Promise<[boolean]>;

    "isPaused()"(overrides?: CallOverrides): Promise<[boolean]>;

    lastClaimTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    "lastClaimTime()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    loomdartBNBBet(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "loomdartBNBBet(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    loomdartBNBPot(overrides?: CallOverrides): Promise<[BigNumber]>;

    "loomdartBNBPot()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    loomdartXBLZDBet(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "loomdartXBLZDBet(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    loomdartXBLZDPot(overrides?: CallOverrides): Promise<[BigNumber]>;

    "loomdartXBLZDPot()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    notifyRewardAmount(
      reward: BigNumberish,
      _duration: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "notifyRewardAmount(uint256,uint256)"(
      reward: BigNumberish,
      _duration: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    "owner()"(overrides?: CallOverrides): Promise<[string]>;

    pauseBetting(overrides?: Overrides): Promise<ContractTransaction>;

    "pauseBetting()"(overrides?: Overrides): Promise<ContractTransaction>;

    renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

    "renounceOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

    rescueFunds(
      token: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "rescueFunds(address)"(
      token: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    rewardDistribution(overrides?: CallOverrides): Promise<[string]>;

    "rewardDistribution()"(overrides?: CallOverrides): Promise<[string]>;

    rookieBNBBet(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    "rookieBNBBet(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    rookieBNBPot(overrides?: CallOverrides): Promise<[BigNumber]>;

    "rookieBNBPot()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    rookieXBLZDBet(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "rookieXBLZDBet(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    rookieXBLZDPot(overrides?: CallOverrides): Promise<[BigNumber]>;

    "rookieXBLZDPot()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    setRewardDistribution(
      _rewardDistribution: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setRewardDistribution(address)"(
      _rewardDistribution: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    unpauseBetting(overrides?: Overrides): Promise<ContractTransaction>;

    "unpauseBetting()"(overrides?: Overrides): Promise<ContractTransaction>;

    winner(overrides?: CallOverrides): Promise<[number]>;

    "winner()"(overrides?: CallOverrides): Promise<[number]>;

    xblzd(overrides?: CallOverrides): Promise<[string]>;

    "xblzd()"(overrides?: CallOverrides): Promise<[string]>;
  };

  BNBBet(
    fighter: BigNumberish,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  "BNBBet(uint8)"(
    fighter: BigNumberish,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  XBLZDBet(
    fighter: BigNumberish,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "XBLZDBet(uint8,uint256)"(
    fighter: BigNumberish,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  cancelFight(overrides?: Overrides): Promise<ContractTransaction>;

  "cancelFight()"(overrides?: Overrides): Promise<ContractTransaction>;

  desc(overrides?: CallOverrides): Promise<string>;

  "desc()"(overrides?: CallOverrides): Promise<string>;

  earned(
    account: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & {
      bnbEarnings: BigNumber;
      xblzdEarnings: BigNumber;
    }
  >;

  "earned(address)"(
    account: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & {
      bnbEarnings: BigNumber;
      xblzdEarnings: BigNumber;
    }
  >;

  endTime(overrides?: CallOverrides): Promise<BigNumber>;

  "endTime()"(overrides?: CallOverrides): Promise<BigNumber>;

  finalizeFight(
    fighter: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "finalizeFight(uint8)"(
    fighter: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  getFees(overrides?: Overrides): Promise<ContractTransaction>;

  "getFees()"(overrides?: Overrides): Promise<ContractTransaction>;

  getRewards(overrides?: Overrides): Promise<ContractTransaction>;

  "getRewards()"(overrides?: Overrides): Promise<ContractTransaction>;

  isCanceled(overrides?: CallOverrides): Promise<boolean>;

  "isCanceled()"(overrides?: CallOverrides): Promise<boolean>;

  isFeesClaimed(overrides?: CallOverrides): Promise<boolean>;

  "isFeesClaimed()"(overrides?: CallOverrides): Promise<boolean>;

  isFinal(overrides?: CallOverrides): Promise<boolean>;

  "isFinal()"(overrides?: CallOverrides): Promise<boolean>;

  isOwner(overrides?: CallOverrides): Promise<boolean>;

  "isOwner()"(overrides?: CallOverrides): Promise<boolean>;

  isPaused(overrides?: CallOverrides): Promise<boolean>;

  "isPaused()"(overrides?: CallOverrides): Promise<boolean>;

  lastClaimTime(overrides?: CallOverrides): Promise<BigNumber>;

  "lastClaimTime()"(overrides?: CallOverrides): Promise<BigNumber>;

  loomdartBNBBet(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  "loomdartBNBBet(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  loomdartBNBPot(overrides?: CallOverrides): Promise<BigNumber>;

  "loomdartBNBPot()"(overrides?: CallOverrides): Promise<BigNumber>;

  loomdartXBLZDBet(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  "loomdartXBLZDBet(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  loomdartXBLZDPot(overrides?: CallOverrides): Promise<BigNumber>;

  "loomdartXBLZDPot()"(overrides?: CallOverrides): Promise<BigNumber>;

  notifyRewardAmount(
    reward: BigNumberish,
    _duration: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "notifyRewardAmount(uint256,uint256)"(
    reward: BigNumberish,
    _duration: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  "owner()"(overrides?: CallOverrides): Promise<string>;

  pauseBetting(overrides?: Overrides): Promise<ContractTransaction>;

  "pauseBetting()"(overrides?: Overrides): Promise<ContractTransaction>;

  renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

  "renounceOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

  rescueFunds(
    token: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "rescueFunds(address)"(
    token: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  rewardDistribution(overrides?: CallOverrides): Promise<string>;

  "rewardDistribution()"(overrides?: CallOverrides): Promise<string>;

  rookieBNBBet(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  "rookieBNBBet(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  rookieBNBPot(overrides?: CallOverrides): Promise<BigNumber>;

  "rookieBNBPot()"(overrides?: CallOverrides): Promise<BigNumber>;

  rookieXBLZDBet(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  "rookieXBLZDBet(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  rookieXBLZDPot(overrides?: CallOverrides): Promise<BigNumber>;

  "rookieXBLZDPot()"(overrides?: CallOverrides): Promise<BigNumber>;

  setRewardDistribution(
    _rewardDistribution: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setRewardDistribution(address)"(
    _rewardDistribution: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "transferOwnership(address)"(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  unpauseBetting(overrides?: Overrides): Promise<ContractTransaction>;

  "unpauseBetting()"(overrides?: Overrides): Promise<ContractTransaction>;

  winner(overrides?: CallOverrides): Promise<number>;

  "winner()"(overrides?: CallOverrides): Promise<number>;

  xblzd(overrides?: CallOverrides): Promise<string>;

  "xblzd()"(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    BNBBet(fighter: BigNumberish, overrides?: CallOverrides): Promise<void>;

    "BNBBet(uint8)"(
      fighter: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    XBLZDBet(
      fighter: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "XBLZDBet(uint8,uint256)"(
      fighter: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    cancelFight(overrides?: CallOverrides): Promise<void>;

    "cancelFight()"(overrides?: CallOverrides): Promise<void>;

    desc(overrides?: CallOverrides): Promise<string>;

    "desc()"(overrides?: CallOverrides): Promise<string>;

    earned(
      account: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        bnbEarnings: BigNumber;
        xblzdEarnings: BigNumber;
      }
    >;

    "earned(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        bnbEarnings: BigNumber;
        xblzdEarnings: BigNumber;
      }
    >;

    endTime(overrides?: CallOverrides): Promise<BigNumber>;

    "endTime()"(overrides?: CallOverrides): Promise<BigNumber>;

    finalizeFight(
      fighter: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "finalizeFight(uint8)"(
      fighter: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    getFees(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { bnbFees: BigNumber; xblzdFees: BigNumber }
    >;

    "getFees()"(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { bnbFees: BigNumber; xblzdFees: BigNumber }
    >;

    getRewards(overrides?: CallOverrides): Promise<void>;

    "getRewards()"(overrides?: CallOverrides): Promise<void>;

    isCanceled(overrides?: CallOverrides): Promise<boolean>;

    "isCanceled()"(overrides?: CallOverrides): Promise<boolean>;

    isFeesClaimed(overrides?: CallOverrides): Promise<boolean>;

    "isFeesClaimed()"(overrides?: CallOverrides): Promise<boolean>;

    isFinal(overrides?: CallOverrides): Promise<boolean>;

    "isFinal()"(overrides?: CallOverrides): Promise<boolean>;

    isOwner(overrides?: CallOverrides): Promise<boolean>;

    "isOwner()"(overrides?: CallOverrides): Promise<boolean>;

    isPaused(overrides?: CallOverrides): Promise<boolean>;

    "isPaused()"(overrides?: CallOverrides): Promise<boolean>;

    lastClaimTime(overrides?: CallOverrides): Promise<BigNumber>;

    "lastClaimTime()"(overrides?: CallOverrides): Promise<BigNumber>;

    loomdartBNBBet(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "loomdartBNBBet(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    loomdartBNBPot(overrides?: CallOverrides): Promise<BigNumber>;

    "loomdartBNBPot()"(overrides?: CallOverrides): Promise<BigNumber>;

    loomdartXBLZDBet(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "loomdartXBLZDBet(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    loomdartXBLZDPot(overrides?: CallOverrides): Promise<BigNumber>;

    "loomdartXBLZDPot()"(overrides?: CallOverrides): Promise<BigNumber>;

    notifyRewardAmount(
      reward: BigNumberish,
      _duration: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "notifyRewardAmount(uint256,uint256)"(
      reward: BigNumberish,
      _duration: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    "owner()"(overrides?: CallOverrides): Promise<string>;

    pauseBetting(overrides?: CallOverrides): Promise<void>;

    "pauseBetting()"(overrides?: CallOverrides): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    "renounceOwnership()"(overrides?: CallOverrides): Promise<void>;

    rescueFunds(token: string, overrides?: CallOverrides): Promise<void>;

    "rescueFunds(address)"(
      token: string,
      overrides?: CallOverrides
    ): Promise<void>;

    rewardDistribution(overrides?: CallOverrides): Promise<string>;

    "rewardDistribution()"(overrides?: CallOverrides): Promise<string>;

    rookieBNBBet(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "rookieBNBBet(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rookieBNBPot(overrides?: CallOverrides): Promise<BigNumber>;

    "rookieBNBPot()"(overrides?: CallOverrides): Promise<BigNumber>;

    rookieXBLZDBet(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "rookieXBLZDBet(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rookieXBLZDPot(overrides?: CallOverrides): Promise<BigNumber>;

    "rookieXBLZDPot()"(overrides?: CallOverrides): Promise<BigNumber>;

    setRewardDistribution(
      _rewardDistribution: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "setRewardDistribution(address)"(
      _rewardDistribution: string,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    unpauseBetting(overrides?: CallOverrides): Promise<void>;

    "unpauseBetting()"(overrides?: CallOverrides): Promise<void>;

    winner(overrides?: CallOverrides): Promise<number>;

    "winner()"(overrides?: CallOverrides): Promise<number>;

    xblzd(overrides?: CallOverrides): Promise<string>;

    "xblzd()"(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    EarningsPaid(
      user: string | null,
      bnbEarnings: null,
      xblzdEarnings: null
    ): EventFilter;

    LoomdartBNBBet(user: string | null, amount: null): EventFilter;

    LoomdartXBLZDBet(user: string | null, amount: null): EventFilter;

    OwnershipTransferred(
      previousOwner: string | null,
      newOwner: string | null
    ): EventFilter;

    RookieBNBBet(user: string | null, amount: null): EventFilter;

    RookieXBLZDBet(user: string | null, amount: null): EventFilter;
  };

  estimateGas: {
    BNBBet(
      fighter: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    "BNBBet(uint8)"(
      fighter: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    XBLZDBet(
      fighter: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "XBLZDBet(uint8,uint256)"(
      fighter: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    cancelFight(overrides?: Overrides): Promise<BigNumber>;

    "cancelFight()"(overrides?: Overrides): Promise<BigNumber>;

    desc(overrides?: CallOverrides): Promise<BigNumber>;

    "desc()"(overrides?: CallOverrides): Promise<BigNumber>;

    earned(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    "earned(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    endTime(overrides?: CallOverrides): Promise<BigNumber>;

    "endTime()"(overrides?: CallOverrides): Promise<BigNumber>;

    finalizeFight(
      fighter: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "finalizeFight(uint8)"(
      fighter: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    getFees(overrides?: Overrides): Promise<BigNumber>;

    "getFees()"(overrides?: Overrides): Promise<BigNumber>;

    getRewards(overrides?: Overrides): Promise<BigNumber>;

    "getRewards()"(overrides?: Overrides): Promise<BigNumber>;

    isCanceled(overrides?: CallOverrides): Promise<BigNumber>;

    "isCanceled()"(overrides?: CallOverrides): Promise<BigNumber>;

    isFeesClaimed(overrides?: CallOverrides): Promise<BigNumber>;

    "isFeesClaimed()"(overrides?: CallOverrides): Promise<BigNumber>;

    isFinal(overrides?: CallOverrides): Promise<BigNumber>;

    "isFinal()"(overrides?: CallOverrides): Promise<BigNumber>;

    isOwner(overrides?: CallOverrides): Promise<BigNumber>;

    "isOwner()"(overrides?: CallOverrides): Promise<BigNumber>;

    isPaused(overrides?: CallOverrides): Promise<BigNumber>;

    "isPaused()"(overrides?: CallOverrides): Promise<BigNumber>;

    lastClaimTime(overrides?: CallOverrides): Promise<BigNumber>;

    "lastClaimTime()"(overrides?: CallOverrides): Promise<BigNumber>;

    loomdartBNBBet(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "loomdartBNBBet(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    loomdartBNBPot(overrides?: CallOverrides): Promise<BigNumber>;

    "loomdartBNBPot()"(overrides?: CallOverrides): Promise<BigNumber>;

    loomdartXBLZDBet(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "loomdartXBLZDBet(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    loomdartXBLZDPot(overrides?: CallOverrides): Promise<BigNumber>;

    "loomdartXBLZDPot()"(overrides?: CallOverrides): Promise<BigNumber>;

    notifyRewardAmount(
      reward: BigNumberish,
      _duration: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "notifyRewardAmount(uint256,uint256)"(
      reward: BigNumberish,
      _duration: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    "owner()"(overrides?: CallOverrides): Promise<BigNumber>;

    pauseBetting(overrides?: Overrides): Promise<BigNumber>;

    "pauseBetting()"(overrides?: Overrides): Promise<BigNumber>;

    renounceOwnership(overrides?: Overrides): Promise<BigNumber>;

    "renounceOwnership()"(overrides?: Overrides): Promise<BigNumber>;

    rescueFunds(token: string, overrides?: Overrides): Promise<BigNumber>;

    "rescueFunds(address)"(
      token: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    rewardDistribution(overrides?: CallOverrides): Promise<BigNumber>;

    "rewardDistribution()"(overrides?: CallOverrides): Promise<BigNumber>;

    rookieBNBBet(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "rookieBNBBet(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rookieBNBPot(overrides?: CallOverrides): Promise<BigNumber>;

    "rookieBNBPot()"(overrides?: CallOverrides): Promise<BigNumber>;

    rookieXBLZDBet(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "rookieXBLZDBet(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rookieXBLZDPot(overrides?: CallOverrides): Promise<BigNumber>;

    "rookieXBLZDPot()"(overrides?: CallOverrides): Promise<BigNumber>;

    setRewardDistribution(
      _rewardDistribution: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setRewardDistribution(address)"(
      _rewardDistribution: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    unpauseBetting(overrides?: Overrides): Promise<BigNumber>;

    "unpauseBetting()"(overrides?: Overrides): Promise<BigNumber>;

    winner(overrides?: CallOverrides): Promise<BigNumber>;

    "winner()"(overrides?: CallOverrides): Promise<BigNumber>;

    xblzd(overrides?: CallOverrides): Promise<BigNumber>;

    "xblzd()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    BNBBet(
      fighter: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    "BNBBet(uint8)"(
      fighter: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    XBLZDBet(
      fighter: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "XBLZDBet(uint8,uint256)"(
      fighter: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    cancelFight(overrides?: Overrides): Promise<PopulatedTransaction>;

    "cancelFight()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    desc(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "desc()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    earned(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "earned(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    endTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "endTime()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    finalizeFight(
      fighter: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "finalizeFight(uint8)"(
      fighter: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    getFees(overrides?: Overrides): Promise<PopulatedTransaction>;

    "getFees()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    getRewards(overrides?: Overrides): Promise<PopulatedTransaction>;

    "getRewards()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    isCanceled(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "isCanceled()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isFeesClaimed(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "isFeesClaimed()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isFinal(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "isFinal()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isOwner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "isOwner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isPaused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "isPaused()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lastClaimTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "lastClaimTime()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    loomdartBNBBet(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "loomdartBNBBet(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    loomdartBNBPot(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "loomdartBNBPot()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    loomdartXBLZDBet(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "loomdartXBLZDBet(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    loomdartXBLZDPot(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "loomdartXBLZDPot()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    notifyRewardAmount(
      reward: BigNumberish,
      _duration: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "notifyRewardAmount(uint256,uint256)"(
      reward: BigNumberish,
      _duration: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pauseBetting(overrides?: Overrides): Promise<PopulatedTransaction>;

    "pauseBetting()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    renounceOwnership(overrides?: Overrides): Promise<PopulatedTransaction>;

    "renounceOwnership()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    rescueFunds(
      token: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "rescueFunds(address)"(
      token: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    rewardDistribution(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "rewardDistribution()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rookieBNBBet(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "rookieBNBBet(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rookieBNBPot(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "rookieBNBPot()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rookieXBLZDBet(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "rookieXBLZDBet(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rookieXBLZDPot(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "rookieXBLZDPot()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setRewardDistribution(
      _rewardDistribution: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setRewardDistribution(address)"(
      _rewardDistribution: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    unpauseBetting(overrides?: Overrides): Promise<PopulatedTransaction>;

    "unpauseBetting()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    winner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "winner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    xblzd(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "xblzd()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
